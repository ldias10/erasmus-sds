
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>
/**
 * Model Professor
 * 
 */
export type Professor = $Result.DefaultSelection<Prisma.$ProfessorPayload>
/**
 * Model Student
 * 
 */
export type Student = $Result.DefaultSelection<Prisma.$StudentPayload>
/**
 * Model Country
 * 
 */
export type Country = $Result.DefaultSelection<Prisma.$CountryPayload>
/**
 * Model University
 * 
 */
export type University = $Result.DefaultSelection<Prisma.$UniversityPayload>
/**
 * Model School
 * 
 */
export type School = $Result.DefaultSelection<Prisma.$SchoolPayload>
/**
 * Model FieldOfStudy
 * 
 */
export type FieldOfStudy = $Result.DefaultSelection<Prisma.$FieldOfStudyPayload>
/**
 * Model ProfessorOnFieldOfStudy
 * 
 */
export type ProfessorOnFieldOfStudy = $Result.DefaultSelection<Prisma.$ProfessorOnFieldOfStudyPayload>
/**
 * Model StudentOnFieldOfStudy
 * 
 */
export type StudentOnFieldOfStudy = $Result.DefaultSelection<Prisma.$StudentOnFieldOfStudyPayload>
/**
 * Model Course
 * 
 */
export type Course = $Result.DefaultSelection<Prisma.$CoursePayload>
/**
 * Model StudentOnCourse
 * 
 */
export type StudentOnCourse = $Result.DefaultSelection<Prisma.$StudentOnCoursePayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model Rate
 * 
 */
export type Rate = $Result.DefaultSelection<Prisma.$RatePayload>
/**
 * Model StudyLevel
 * 
 */
export type StudyLevel = $Result.DefaultSelection<Prisma.$StudyLevelPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs>;

  /**
   * `prisma.professor`: Exposes CRUD operations for the **Professor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Professors
    * const professors = await prisma.professor.findMany()
    * ```
    */
  get professor(): Prisma.ProfessorDelegate<ExtArgs>;

  /**
   * `prisma.student`: Exposes CRUD operations for the **Student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.StudentDelegate<ExtArgs>;

  /**
   * `prisma.country`: Exposes CRUD operations for the **Country** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Countries
    * const countries = await prisma.country.findMany()
    * ```
    */
  get country(): Prisma.CountryDelegate<ExtArgs>;

  /**
   * `prisma.university`: Exposes CRUD operations for the **University** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Universities
    * const universities = await prisma.university.findMany()
    * ```
    */
  get university(): Prisma.UniversityDelegate<ExtArgs>;

  /**
   * `prisma.school`: Exposes CRUD operations for the **School** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Schools
    * const schools = await prisma.school.findMany()
    * ```
    */
  get school(): Prisma.SchoolDelegate<ExtArgs>;

  /**
   * `prisma.fieldOfStudy`: Exposes CRUD operations for the **FieldOfStudy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FieldOfStudies
    * const fieldOfStudies = await prisma.fieldOfStudy.findMany()
    * ```
    */
  get fieldOfStudy(): Prisma.FieldOfStudyDelegate<ExtArgs>;

  /**
   * `prisma.professorOnFieldOfStudy`: Exposes CRUD operations for the **ProfessorOnFieldOfStudy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProfessorOnFieldOfStudies
    * const professorOnFieldOfStudies = await prisma.professorOnFieldOfStudy.findMany()
    * ```
    */
  get professorOnFieldOfStudy(): Prisma.ProfessorOnFieldOfStudyDelegate<ExtArgs>;

  /**
   * `prisma.studentOnFieldOfStudy`: Exposes CRUD operations for the **StudentOnFieldOfStudy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentOnFieldOfStudies
    * const studentOnFieldOfStudies = await prisma.studentOnFieldOfStudy.findMany()
    * ```
    */
  get studentOnFieldOfStudy(): Prisma.StudentOnFieldOfStudyDelegate<ExtArgs>;

  /**
   * `prisma.course`: Exposes CRUD operations for the **Course** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.course.findMany()
    * ```
    */
  get course(): Prisma.CourseDelegate<ExtArgs>;

  /**
   * `prisma.studentOnCourse`: Exposes CRUD operations for the **StudentOnCourse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentOnCourses
    * const studentOnCourses = await prisma.studentOnCourse.findMany()
    * ```
    */
  get studentOnCourse(): Prisma.StudentOnCourseDelegate<ExtArgs>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs>;

  /**
   * `prisma.rate`: Exposes CRUD operations for the **Rate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rates
    * const rates = await prisma.rate.findMany()
    * ```
    */
  get rate(): Prisma.RateDelegate<ExtArgs>;

  /**
   * `prisma.studyLevel`: Exposes CRUD operations for the **StudyLevel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudyLevels
    * const studyLevels = await prisma.studyLevel.findMany()
    * ```
    */
  get studyLevel(): Prisma.StudyLevelDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.12.1
   * Query Engine version: 473ed3124229e22d881cb7addf559799debae1ab
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Admin: 'Admin',
    Professor: 'Professor',
    Student: 'Student',
    Country: 'Country',
    University: 'University',
    School: 'School',
    FieldOfStudy: 'FieldOfStudy',
    ProfessorOnFieldOfStudy: 'ProfessorOnFieldOfStudy',
    StudentOnFieldOfStudy: 'StudentOnFieldOfStudy',
    Course: 'Course',
    StudentOnCourse: 'StudentOnCourse',
    Comment: 'Comment',
    Rate: 'Rate',
    StudyLevel: 'StudyLevel'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'admin' | 'professor' | 'student' | 'country' | 'university' | 'school' | 'fieldOfStudy' | 'professorOnFieldOfStudy' | 'studentOnFieldOfStudy' | 'course' | 'studentOnCourse' | 'comment' | 'rate' | 'studyLevel'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>,
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      Professor: {
        payload: Prisma.$ProfessorPayload<ExtArgs>
        fields: Prisma.ProfessorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfessorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfessorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          findFirst: {
            args: Prisma.ProfessorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfessorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          findMany: {
            args: Prisma.ProfessorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>[]
          }
          create: {
            args: Prisma.ProfessorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          createMany: {
            args: Prisma.ProfessorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProfessorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          update: {
            args: Prisma.ProfessorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          deleteMany: {
            args: Prisma.ProfessorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProfessorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProfessorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessorPayload>
          }
          aggregate: {
            args: Prisma.ProfessorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProfessor>
          }
          groupBy: {
            args: Prisma.ProfessorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProfessorGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfessorCountArgs<ExtArgs>,
            result: $Utils.Optional<ProfessorCountAggregateOutputType> | number
          }
        }
      }
      Student: {
        payload: Prisma.$StudentPayload<ExtArgs>
        fields: Prisma.StudentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findFirst: {
            args: Prisma.StudentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findMany: {
            args: Prisma.StudentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          create: {
            args: Prisma.StudentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          createMany: {
            args: Prisma.StudentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StudentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          update: {
            args: Prisma.StudentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          deleteMany: {
            args: Prisma.StudentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StudentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StudentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          aggregate: {
            args: Prisma.StudentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStudent>
          }
          groupBy: {
            args: Prisma.StudentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentCountArgs<ExtArgs>,
            result: $Utils.Optional<StudentCountAggregateOutputType> | number
          }
        }
      }
      Country: {
        payload: Prisma.$CountryPayload<ExtArgs>
        fields: Prisma.CountryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CountryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CountryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CountryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          findFirst: {
            args: Prisma.CountryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CountryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CountryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          findMany: {
            args: Prisma.CountryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>[]
          }
          create: {
            args: Prisma.CountryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          createMany: {
            args: Prisma.CountryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CountryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          update: {
            args: Prisma.CountryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          deleteMany: {
            args: Prisma.CountryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CountryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CountryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          aggregate: {
            args: Prisma.CountryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCountry>
          }
          groupBy: {
            args: Prisma.CountryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CountryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CountryCountArgs<ExtArgs>,
            result: $Utils.Optional<CountryCountAggregateOutputType> | number
          }
        }
      }
      University: {
        payload: Prisma.$UniversityPayload<ExtArgs>
        fields: Prisma.UniversityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UniversityFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UniversityFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload>
          }
          findFirst: {
            args: Prisma.UniversityFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UniversityFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload>
          }
          findMany: {
            args: Prisma.UniversityFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload>[]
          }
          create: {
            args: Prisma.UniversityCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload>
          }
          createMany: {
            args: Prisma.UniversityCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UniversityDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload>
          }
          update: {
            args: Prisma.UniversityUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload>
          }
          deleteMany: {
            args: Prisma.UniversityDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UniversityUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UniversityUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UniversityPayload>
          }
          aggregate: {
            args: Prisma.UniversityAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUniversity>
          }
          groupBy: {
            args: Prisma.UniversityGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UniversityGroupByOutputType>[]
          }
          count: {
            args: Prisma.UniversityCountArgs<ExtArgs>,
            result: $Utils.Optional<UniversityCountAggregateOutputType> | number
          }
        }
      }
      School: {
        payload: Prisma.$SchoolPayload<ExtArgs>
        fields: Prisma.SchoolFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SchoolFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SchoolFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          findFirst: {
            args: Prisma.SchoolFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SchoolFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          findMany: {
            args: Prisma.SchoolFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>[]
          }
          create: {
            args: Prisma.SchoolCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          createMany: {
            args: Prisma.SchoolCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SchoolDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          update: {
            args: Prisma.SchoolUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          deleteMany: {
            args: Prisma.SchoolDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SchoolUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SchoolUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          aggregate: {
            args: Prisma.SchoolAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSchool>
          }
          groupBy: {
            args: Prisma.SchoolGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SchoolGroupByOutputType>[]
          }
          count: {
            args: Prisma.SchoolCountArgs<ExtArgs>,
            result: $Utils.Optional<SchoolCountAggregateOutputType> | number
          }
        }
      }
      FieldOfStudy: {
        payload: Prisma.$FieldOfStudyPayload<ExtArgs>
        fields: Prisma.FieldOfStudyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FieldOfStudyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FieldOfStudyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FieldOfStudyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FieldOfStudyPayload>
          }
          findFirst: {
            args: Prisma.FieldOfStudyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FieldOfStudyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FieldOfStudyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FieldOfStudyPayload>
          }
          findMany: {
            args: Prisma.FieldOfStudyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FieldOfStudyPayload>[]
          }
          create: {
            args: Prisma.FieldOfStudyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FieldOfStudyPayload>
          }
          createMany: {
            args: Prisma.FieldOfStudyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FieldOfStudyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FieldOfStudyPayload>
          }
          update: {
            args: Prisma.FieldOfStudyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FieldOfStudyPayload>
          }
          deleteMany: {
            args: Prisma.FieldOfStudyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FieldOfStudyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FieldOfStudyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FieldOfStudyPayload>
          }
          aggregate: {
            args: Prisma.FieldOfStudyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFieldOfStudy>
          }
          groupBy: {
            args: Prisma.FieldOfStudyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FieldOfStudyGroupByOutputType>[]
          }
          count: {
            args: Prisma.FieldOfStudyCountArgs<ExtArgs>,
            result: $Utils.Optional<FieldOfStudyCountAggregateOutputType> | number
          }
        }
      }
      ProfessorOnFieldOfStudy: {
        payload: Prisma.$ProfessorOnFieldOfStudyPayload<ExtArgs>
        fields: Prisma.ProfessorOnFieldOfStudyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfessorOnFieldOfStudyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessorOnFieldOfStudyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfessorOnFieldOfStudyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessorOnFieldOfStudyPayload>
          }
          findFirst: {
            args: Prisma.ProfessorOnFieldOfStudyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessorOnFieldOfStudyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfessorOnFieldOfStudyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessorOnFieldOfStudyPayload>
          }
          findMany: {
            args: Prisma.ProfessorOnFieldOfStudyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessorOnFieldOfStudyPayload>[]
          }
          create: {
            args: Prisma.ProfessorOnFieldOfStudyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessorOnFieldOfStudyPayload>
          }
          createMany: {
            args: Prisma.ProfessorOnFieldOfStudyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProfessorOnFieldOfStudyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessorOnFieldOfStudyPayload>
          }
          update: {
            args: Prisma.ProfessorOnFieldOfStudyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessorOnFieldOfStudyPayload>
          }
          deleteMany: {
            args: Prisma.ProfessorOnFieldOfStudyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProfessorOnFieldOfStudyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProfessorOnFieldOfStudyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfessorOnFieldOfStudyPayload>
          }
          aggregate: {
            args: Prisma.ProfessorOnFieldOfStudyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProfessorOnFieldOfStudy>
          }
          groupBy: {
            args: Prisma.ProfessorOnFieldOfStudyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProfessorOnFieldOfStudyGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfessorOnFieldOfStudyCountArgs<ExtArgs>,
            result: $Utils.Optional<ProfessorOnFieldOfStudyCountAggregateOutputType> | number
          }
        }
      }
      StudentOnFieldOfStudy: {
        payload: Prisma.$StudentOnFieldOfStudyPayload<ExtArgs>
        fields: Prisma.StudentOnFieldOfStudyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentOnFieldOfStudyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentOnFieldOfStudyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentOnFieldOfStudyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentOnFieldOfStudyPayload>
          }
          findFirst: {
            args: Prisma.StudentOnFieldOfStudyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentOnFieldOfStudyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentOnFieldOfStudyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentOnFieldOfStudyPayload>
          }
          findMany: {
            args: Prisma.StudentOnFieldOfStudyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentOnFieldOfStudyPayload>[]
          }
          create: {
            args: Prisma.StudentOnFieldOfStudyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentOnFieldOfStudyPayload>
          }
          createMany: {
            args: Prisma.StudentOnFieldOfStudyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StudentOnFieldOfStudyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentOnFieldOfStudyPayload>
          }
          update: {
            args: Prisma.StudentOnFieldOfStudyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentOnFieldOfStudyPayload>
          }
          deleteMany: {
            args: Prisma.StudentOnFieldOfStudyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StudentOnFieldOfStudyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StudentOnFieldOfStudyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentOnFieldOfStudyPayload>
          }
          aggregate: {
            args: Prisma.StudentOnFieldOfStudyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStudentOnFieldOfStudy>
          }
          groupBy: {
            args: Prisma.StudentOnFieldOfStudyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StudentOnFieldOfStudyGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentOnFieldOfStudyCountArgs<ExtArgs>,
            result: $Utils.Optional<StudentOnFieldOfStudyCountAggregateOutputType> | number
          }
        }
      }
      Course: {
        payload: Prisma.$CoursePayload<ExtArgs>
        fields: Prisma.CourseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findFirst: {
            args: Prisma.CourseFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findMany: {
            args: Prisma.CourseFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          create: {
            args: Prisma.CourseCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          createMany: {
            args: Prisma.CourseCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CourseDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          update: {
            args: Prisma.CourseUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          deleteMany: {
            args: Prisma.CourseDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CourseUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CourseUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          aggregate: {
            args: Prisma.CourseAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCourse>
          }
          groupBy: {
            args: Prisma.CourseGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseCountArgs<ExtArgs>,
            result: $Utils.Optional<CourseCountAggregateOutputType> | number
          }
        }
      }
      StudentOnCourse: {
        payload: Prisma.$StudentOnCoursePayload<ExtArgs>
        fields: Prisma.StudentOnCourseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentOnCourseFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentOnCoursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentOnCourseFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentOnCoursePayload>
          }
          findFirst: {
            args: Prisma.StudentOnCourseFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentOnCoursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentOnCourseFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentOnCoursePayload>
          }
          findMany: {
            args: Prisma.StudentOnCourseFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentOnCoursePayload>[]
          }
          create: {
            args: Prisma.StudentOnCourseCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentOnCoursePayload>
          }
          createMany: {
            args: Prisma.StudentOnCourseCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StudentOnCourseDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentOnCoursePayload>
          }
          update: {
            args: Prisma.StudentOnCourseUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentOnCoursePayload>
          }
          deleteMany: {
            args: Prisma.StudentOnCourseDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StudentOnCourseUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StudentOnCourseUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentOnCoursePayload>
          }
          aggregate: {
            args: Prisma.StudentOnCourseAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStudentOnCourse>
          }
          groupBy: {
            args: Prisma.StudentOnCourseGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StudentOnCourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentOnCourseCountArgs<ExtArgs>,
            result: $Utils.Optional<StudentOnCourseCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>,
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      Rate: {
        payload: Prisma.$RatePayload<ExtArgs>
        fields: Prisma.RateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RateFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RateFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatePayload>
          }
          findFirst: {
            args: Prisma.RateFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RateFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatePayload>
          }
          findMany: {
            args: Prisma.RateFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatePayload>[]
          }
          create: {
            args: Prisma.RateCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatePayload>
          }
          createMany: {
            args: Prisma.RateCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RateDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatePayload>
          }
          update: {
            args: Prisma.RateUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatePayload>
          }
          deleteMany: {
            args: Prisma.RateDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RateUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RateUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatePayload>
          }
          aggregate: {
            args: Prisma.RateAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRate>
          }
          groupBy: {
            args: Prisma.RateGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RateGroupByOutputType>[]
          }
          count: {
            args: Prisma.RateCountArgs<ExtArgs>,
            result: $Utils.Optional<RateCountAggregateOutputType> | number
          }
        }
      }
      StudyLevel: {
        payload: Prisma.$StudyLevelPayload<ExtArgs>
        fields: Prisma.StudyLevelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudyLevelFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudyLevelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudyLevelFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudyLevelPayload>
          }
          findFirst: {
            args: Prisma.StudyLevelFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudyLevelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudyLevelFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudyLevelPayload>
          }
          findMany: {
            args: Prisma.StudyLevelFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudyLevelPayload>[]
          }
          create: {
            args: Prisma.StudyLevelCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudyLevelPayload>
          }
          createMany: {
            args: Prisma.StudyLevelCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StudyLevelDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudyLevelPayload>
          }
          update: {
            args: Prisma.StudyLevelUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudyLevelPayload>
          }
          deleteMany: {
            args: Prisma.StudyLevelDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StudyLevelUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StudyLevelUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudyLevelPayload>
          }
          aggregate: {
            args: Prisma.StudyLevelAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStudyLevel>
          }
          groupBy: {
            args: Prisma.StudyLevelGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StudyLevelGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudyLevelCountArgs<ExtArgs>,
            result: $Utils.Optional<StudyLevelCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProfessorCountOutputType
   */

  export type ProfessorCountOutputType = {
    fieldsOfStudy: number
  }

  export type ProfessorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fieldsOfStudy?: boolean | ProfessorCountOutputTypeCountFieldsOfStudyArgs
  }

  // Custom InputTypes

  /**
   * ProfessorCountOutputType without action
   */
  export type ProfessorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorCountOutputType
     */
    select?: ProfessorCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ProfessorCountOutputType without action
   */
  export type ProfessorCountOutputTypeCountFieldsOfStudyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessorOnFieldOfStudyWhereInput
  }



  /**
   * Count Type StudentCountOutputType
   */

  export type StudentCountOutputType = {
    fieldsOfStudy: number
    courses: number
    comments: number
  }

  export type StudentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fieldsOfStudy?: boolean | StudentCountOutputTypeCountFieldsOfStudyArgs
    courses?: boolean | StudentCountOutputTypeCountCoursesArgs
    comments?: boolean | StudentCountOutputTypeCountCommentsArgs
  }

  // Custom InputTypes

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCountOutputType
     */
    select?: StudentCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountFieldsOfStudyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentOnFieldOfStudyWhereInput
  }


  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentOnCourseWhereInput
  }


  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }



  /**
   * Count Type CountryCountOutputType
   */

  export type CountryCountOutputType = {
    students: number
    universities: number
  }

  export type CountryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | CountryCountOutputTypeCountStudentsArgs
    universities?: boolean | CountryCountOutputTypeCountUniversitiesArgs
  }

  // Custom InputTypes

  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CountryCountOutputType
     */
    select?: CountryCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }


  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeCountUniversitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UniversityWhereInput
  }



  /**
   * Count Type UniversityCountOutputType
   */

  export type UniversityCountOutputType = {
    schools: number
  }

  export type UniversityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schools?: boolean | UniversityCountOutputTypeCountSchoolsArgs
  }

  // Custom InputTypes

  /**
   * UniversityCountOutputType without action
   */
  export type UniversityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UniversityCountOutputType
     */
    select?: UniversityCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UniversityCountOutputType without action
   */
  export type UniversityCountOutputTypeCountSchoolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchoolWhereInput
  }



  /**
   * Count Type SchoolCountOutputType
   */

  export type SchoolCountOutputType = {
    students: number
  }

  export type SchoolCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | SchoolCountOutputTypeCountStudentsArgs
  }

  // Custom InputTypes

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolCountOutputType
     */
    select?: SchoolCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }



  /**
   * Count Type FieldOfStudyCountOutputType
   */

  export type FieldOfStudyCountOutputType = {
    professors: number
    students: number
    courses: number
  }

  export type FieldOfStudyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    professors?: boolean | FieldOfStudyCountOutputTypeCountProfessorsArgs
    students?: boolean | FieldOfStudyCountOutputTypeCountStudentsArgs
    courses?: boolean | FieldOfStudyCountOutputTypeCountCoursesArgs
  }

  // Custom InputTypes

  /**
   * FieldOfStudyCountOutputType without action
   */
  export type FieldOfStudyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldOfStudyCountOutputType
     */
    select?: FieldOfStudyCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * FieldOfStudyCountOutputType without action
   */
  export type FieldOfStudyCountOutputTypeCountProfessorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessorOnFieldOfStudyWhereInput
  }


  /**
   * FieldOfStudyCountOutputType without action
   */
  export type FieldOfStudyCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentOnFieldOfStudyWhereInput
  }


  /**
   * FieldOfStudyCountOutputType without action
   */
  export type FieldOfStudyCountOutputTypeCountCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
  }



  /**
   * Count Type CourseCountOutputType
   */

  export type CourseCountOutputType = {
    Students: number
    Comments: number
  }

  export type CourseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Students?: boolean | CourseCountOutputTypeCountStudentsArgs
    Comments?: boolean | CourseCountOutputTypeCountCommentsArgs
  }

  // Custom InputTypes

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCountOutputType
     */
    select?: CourseCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentOnCourseWhereInput
  }


  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }



  /**
   * Count Type StudyLevelCountOutputType
   */

  export type StudyLevelCountOutputType = {
    students: number
    courses: number
  }

  export type StudyLevelCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | StudyLevelCountOutputTypeCountStudentsArgs
    courses?: boolean | StudyLevelCountOutputTypeCountCoursesArgs
  }

  // Custom InputTypes

  /**
   * StudyLevelCountOutputType without action
   */
  export type StudyLevelCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyLevelCountOutputType
     */
    select?: StudyLevelCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * StudyLevelCountOutputType without action
   */
  export type StudyLevelCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }


  /**
   * StudyLevelCountOutputType without action
   */
  export type StudyLevelCountOutputTypeCountCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    surname: string | null
    isVerified: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    surname: string | null
    isVerified: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    surname: number
    isVerified: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    surname?: true
    isVerified?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    surname?: true
    isVerified?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    surname?: true
    isVerified?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    name: string
    surname: string
    isVerified: boolean
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    surname?: boolean
    isVerified?: boolean
    Admin?: boolean | User$AdminArgs<ExtArgs>
    Professor?: boolean | User$ProfessorArgs<ExtArgs>
    Student?: boolean | User$StudentArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    surname?: boolean
    isVerified?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Admin?: boolean | User$AdminArgs<ExtArgs>
    Professor?: boolean | User$ProfessorArgs<ExtArgs>
    Student?: boolean | User$StudentArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      Admin: Prisma.$AdminPayload<ExtArgs> | null
      Professor: Prisma.$ProfessorPayload<ExtArgs> | null
      Student: Prisma.$StudentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      name: string
      surname: string
      isVerified: boolean
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Admin<T extends User$AdminArgs<ExtArgs> = {}>(args?: Subset<T, User$AdminArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Professor<T extends User$ProfessorArgs<ExtArgs> = {}>(args?: Subset<T, User$ProfessorArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Student<T extends User$StudentArgs<ExtArgs> = {}>(args?: Subset<T, User$StudentArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly surname: FieldRef<"User", 'String'>
    readonly isVerified: FieldRef<"User", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.Admin
   */
  export type User$AdminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminInclude<ExtArgs> | null
    where?: AdminWhereInput
  }


  /**
   * User.Professor
   */
  export type User$ProfessorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorInclude<ExtArgs> | null
    where?: ProfessorWhereInput
  }


  /**
   * User.Student
   */
  export type User$StudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminAvgAggregateOutputType = {
    userId: number | null
  }

  export type AdminSumAggregateOutputType = {
    userId: number | null
  }

  export type AdminMinAggregateOutputType = {
    userId: number | null
  }

  export type AdminMaxAggregateOutputType = {
    userId: number | null
  }

  export type AdminCountAggregateOutputType = {
    userId: number
    _all: number
  }


  export type AdminAvgAggregateInputType = {
    userId?: true
  }

  export type AdminSumAggregateInputType = {
    userId?: true
  }

  export type AdminMinAggregateInputType = {
    userId?: true
  }

  export type AdminMaxAggregateInputType = {
    userId?: true
  }

  export type AdminCountAggregateInputType = {
    userId?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _avg?: AdminAvgAggregateInputType
    _sum?: AdminSumAggregateInputType
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    userId: number
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectScalar = {
    userId?: boolean
  }

  export type AdminInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $AdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: number
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }


  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AdminFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Admin that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AdminFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const adminWithUserIdOnly = await prisma.admin.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends AdminFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
    **/
    create<T extends AdminCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AdminCreateArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Admins.
     *     @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     *     @example
     *     // Create many Admins
     *     const admin = await prisma.admin.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AdminCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
    **/
    delete<T extends AdminDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AdminUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AdminDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AdminUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
    **/
    upsert<T extends AdminUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Admin model
   */ 
  interface AdminFieldRefs {
    readonly userId: FieldRef<"Admin", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }


  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }


  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }


  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }


  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }


  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }


  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }


  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
  }


  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }


  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }


  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
  }


  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminInclude<ExtArgs> | null
  }



  /**
   * Model Professor
   */

  export type AggregateProfessor = {
    _count: ProfessorCountAggregateOutputType | null
    _avg: ProfessorAvgAggregateOutputType | null
    _sum: ProfessorSumAggregateOutputType | null
    _min: ProfessorMinAggregateOutputType | null
    _max: ProfessorMaxAggregateOutputType | null
  }

  export type ProfessorAvgAggregateOutputType = {
    userId: number | null
  }

  export type ProfessorSumAggregateOutputType = {
    userId: number | null
  }

  export type ProfessorMinAggregateOutputType = {
    userId: number | null
  }

  export type ProfessorMaxAggregateOutputType = {
    userId: number | null
  }

  export type ProfessorCountAggregateOutputType = {
    userId: number
    _all: number
  }


  export type ProfessorAvgAggregateInputType = {
    userId?: true
  }

  export type ProfessorSumAggregateInputType = {
    userId?: true
  }

  export type ProfessorMinAggregateInputType = {
    userId?: true
  }

  export type ProfessorMaxAggregateInputType = {
    userId?: true
  }

  export type ProfessorCountAggregateInputType = {
    userId?: true
    _all?: true
  }

  export type ProfessorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Professor to aggregate.
     */
    where?: ProfessorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professors to fetch.
     */
    orderBy?: ProfessorOrderByWithRelationInput | ProfessorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfessorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Professors
    **/
    _count?: true | ProfessorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfessorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfessorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfessorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfessorMaxAggregateInputType
  }

  export type GetProfessorAggregateType<T extends ProfessorAggregateArgs> = {
        [P in keyof T & keyof AggregateProfessor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfessor[P]>
      : GetScalarType<T[P], AggregateProfessor[P]>
  }




  export type ProfessorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessorWhereInput
    orderBy?: ProfessorOrderByWithAggregationInput | ProfessorOrderByWithAggregationInput[]
    by: ProfessorScalarFieldEnum[] | ProfessorScalarFieldEnum
    having?: ProfessorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfessorCountAggregateInputType | true
    _avg?: ProfessorAvgAggregateInputType
    _sum?: ProfessorSumAggregateInputType
    _min?: ProfessorMinAggregateInputType
    _max?: ProfessorMaxAggregateInputType
  }

  export type ProfessorGroupByOutputType = {
    userId: number
    _count: ProfessorCountAggregateOutputType | null
    _avg: ProfessorAvgAggregateOutputType | null
    _sum: ProfessorSumAggregateOutputType | null
    _min: ProfessorMinAggregateOutputType | null
    _max: ProfessorMaxAggregateOutputType | null
  }

  type GetProfessorGroupByPayload<T extends ProfessorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfessorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfessorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfessorGroupByOutputType[P]>
            : GetScalarType<T[P], ProfessorGroupByOutputType[P]>
        }
      >
    >


  export type ProfessorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    fieldsOfStudy?: boolean | Professor$fieldsOfStudyArgs<ExtArgs>
    _count?: boolean | ProfessorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professor"]>

  export type ProfessorSelectScalar = {
    userId?: boolean
  }

  export type ProfessorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    fieldsOfStudy?: boolean | Professor$fieldsOfStudyArgs<ExtArgs>
    _count?: boolean | ProfessorCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ProfessorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Professor"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      fieldsOfStudy: Prisma.$ProfessorOnFieldOfStudyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: number
    }, ExtArgs["result"]["professor"]>
    composites: {}
  }


  type ProfessorGetPayload<S extends boolean | null | undefined | ProfessorDefaultArgs> = $Result.GetResult<Prisma.$ProfessorPayload, S>

  type ProfessorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProfessorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProfessorCountAggregateInputType | true
    }

  export interface ProfessorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Professor'], meta: { name: 'Professor' } }
    /**
     * Find zero or one Professor that matches the filter.
     * @param {ProfessorFindUniqueArgs} args - Arguments to find a Professor
     * @example
     * // Get one Professor
     * const professor = await prisma.professor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProfessorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessorFindUniqueArgs<ExtArgs>>
    ): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Professor that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProfessorFindUniqueOrThrowArgs} args - Arguments to find a Professor
     * @example
     * // Get one Professor
     * const professor = await prisma.professor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProfessorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Professor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorFindFirstArgs} args - Arguments to find a Professor
     * @example
     * // Get one Professor
     * const professor = await prisma.professor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProfessorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessorFindFirstArgs<ExtArgs>>
    ): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Professor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorFindFirstOrThrowArgs} args - Arguments to find a Professor
     * @example
     * // Get one Professor
     * const professor = await prisma.professor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProfessorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Professors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Professors
     * const professors = await prisma.professor.findMany()
     * 
     * // Get first 10 Professors
     * const professors = await prisma.professor.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const professorWithUserIdOnly = await prisma.professor.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends ProfessorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Professor.
     * @param {ProfessorCreateArgs} args - Arguments to create a Professor.
     * @example
     * // Create one Professor
     * const Professor = await prisma.professor.create({
     *   data: {
     *     // ... data to create a Professor
     *   }
     * })
     * 
    **/
    create<T extends ProfessorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessorCreateArgs<ExtArgs>>
    ): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Professors.
     *     @param {ProfessorCreateManyArgs} args - Arguments to create many Professors.
     *     @example
     *     // Create many Professors
     *     const professor = await prisma.professor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProfessorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Professor.
     * @param {ProfessorDeleteArgs} args - Arguments to delete one Professor.
     * @example
     * // Delete one Professor
     * const Professor = await prisma.professor.delete({
     *   where: {
     *     // ... filter to delete one Professor
     *   }
     * })
     * 
    **/
    delete<T extends ProfessorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessorDeleteArgs<ExtArgs>>
    ): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Professor.
     * @param {ProfessorUpdateArgs} args - Arguments to update one Professor.
     * @example
     * // Update one Professor
     * const professor = await prisma.professor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProfessorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessorUpdateArgs<ExtArgs>>
    ): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Professors.
     * @param {ProfessorDeleteManyArgs} args - Arguments to filter Professors to delete.
     * @example
     * // Delete a few Professors
     * const { count } = await prisma.professor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProfessorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Professors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Professors
     * const professor = await prisma.professor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProfessorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Professor.
     * @param {ProfessorUpsertArgs} args - Arguments to update or create a Professor.
     * @example
     * // Update or create a Professor
     * const professor = await prisma.professor.upsert({
     *   create: {
     *     // ... data to create a Professor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Professor we want to update
     *   }
     * })
    **/
    upsert<T extends ProfessorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessorUpsertArgs<ExtArgs>>
    ): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Professors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorCountArgs} args - Arguments to filter Professors to count.
     * @example
     * // Count the number of Professors
     * const count = await prisma.professor.count({
     *   where: {
     *     // ... the filter for the Professors we want to count
     *   }
     * })
    **/
    count<T extends ProfessorCountArgs>(
      args?: Subset<T, ProfessorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfessorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Professor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfessorAggregateArgs>(args: Subset<T, ProfessorAggregateArgs>): Prisma.PrismaPromise<GetProfessorAggregateType<T>>

    /**
     * Group by Professor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfessorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfessorGroupByArgs['orderBy'] }
        : { orderBy?: ProfessorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfessorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfessorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Professor model
   */
  readonly fields: ProfessorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Professor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfessorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    fieldsOfStudy<T extends Professor$fieldsOfStudyArgs<ExtArgs> = {}>(args?: Subset<T, Professor$fieldsOfStudyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessorOnFieldOfStudyPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Professor model
   */ 
  interface ProfessorFieldRefs {
    readonly userId: FieldRef<"Professor", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Professor findUnique
   */
  export type ProfessorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter, which Professor to fetch.
     */
    where: ProfessorWhereUniqueInput
  }


  /**
   * Professor findUniqueOrThrow
   */
  export type ProfessorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter, which Professor to fetch.
     */
    where: ProfessorWhereUniqueInput
  }


  /**
   * Professor findFirst
   */
  export type ProfessorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter, which Professor to fetch.
     */
    where?: ProfessorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professors to fetch.
     */
    orderBy?: ProfessorOrderByWithRelationInput | ProfessorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Professors.
     */
    cursor?: ProfessorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Professors.
     */
    distinct?: ProfessorScalarFieldEnum | ProfessorScalarFieldEnum[]
  }


  /**
   * Professor findFirstOrThrow
   */
  export type ProfessorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter, which Professor to fetch.
     */
    where?: ProfessorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professors to fetch.
     */
    orderBy?: ProfessorOrderByWithRelationInput | ProfessorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Professors.
     */
    cursor?: ProfessorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Professors.
     */
    distinct?: ProfessorScalarFieldEnum | ProfessorScalarFieldEnum[]
  }


  /**
   * Professor findMany
   */
  export type ProfessorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter, which Professors to fetch.
     */
    where?: ProfessorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Professors to fetch.
     */
    orderBy?: ProfessorOrderByWithRelationInput | ProfessorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Professors.
     */
    cursor?: ProfessorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Professors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Professors.
     */
    skip?: number
    distinct?: ProfessorScalarFieldEnum | ProfessorScalarFieldEnum[]
  }


  /**
   * Professor create
   */
  export type ProfessorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * The data needed to create a Professor.
     */
    data: XOR<ProfessorCreateInput, ProfessorUncheckedCreateInput>
  }


  /**
   * Professor createMany
   */
  export type ProfessorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Professors.
     */
    data: ProfessorCreateManyInput | ProfessorCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Professor update
   */
  export type ProfessorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * The data needed to update a Professor.
     */
    data: XOR<ProfessorUpdateInput, ProfessorUncheckedUpdateInput>
    /**
     * Choose, which Professor to update.
     */
    where: ProfessorWhereUniqueInput
  }


  /**
   * Professor updateMany
   */
  export type ProfessorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Professors.
     */
    data: XOR<ProfessorUpdateManyMutationInput, ProfessorUncheckedUpdateManyInput>
    /**
     * Filter which Professors to update
     */
    where?: ProfessorWhereInput
  }


  /**
   * Professor upsert
   */
  export type ProfessorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * The filter to search for the Professor to update in case it exists.
     */
    where: ProfessorWhereUniqueInput
    /**
     * In case the Professor found by the `where` argument doesn't exist, create a new Professor with this data.
     */
    create: XOR<ProfessorCreateInput, ProfessorUncheckedCreateInput>
    /**
     * In case the Professor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfessorUpdateInput, ProfessorUncheckedUpdateInput>
  }


  /**
   * Professor delete
   */
  export type ProfessorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorInclude<ExtArgs> | null
    /**
     * Filter which Professor to delete.
     */
    where: ProfessorWhereUniqueInput
  }


  /**
   * Professor deleteMany
   */
  export type ProfessorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Professors to delete
     */
    where?: ProfessorWhereInput
  }


  /**
   * Professor.fieldsOfStudy
   */
  export type Professor$fieldsOfStudyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorOnFieldOfStudy
     */
    select?: ProfessorOnFieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorOnFieldOfStudyInclude<ExtArgs> | null
    where?: ProfessorOnFieldOfStudyWhereInput
    orderBy?: ProfessorOnFieldOfStudyOrderByWithRelationInput | ProfessorOnFieldOfStudyOrderByWithRelationInput[]
    cursor?: ProfessorOnFieldOfStudyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfessorOnFieldOfStudyScalarFieldEnum | ProfessorOnFieldOfStudyScalarFieldEnum[]
  }


  /**
   * Professor without action
   */
  export type ProfessorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Professor
     */
    select?: ProfessorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorInclude<ExtArgs> | null
  }



  /**
   * Model Student
   */

  export type AggregateStudent = {
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  export type StudentAvgAggregateOutputType = {
    userId: number | null
    countryId: number | null
    schoolId: number | null
    studyLevelId: number | null
  }

  export type StudentSumAggregateOutputType = {
    userId: number | null
    countryId: number | null
    schoolId: number | null
    studyLevelId: number | null
  }

  export type StudentMinAggregateOutputType = {
    userId: number | null
    countryId: number | null
    schoolId: number | null
    studyLevelId: number | null
  }

  export type StudentMaxAggregateOutputType = {
    userId: number | null
    countryId: number | null
    schoolId: number | null
    studyLevelId: number | null
  }

  export type StudentCountAggregateOutputType = {
    userId: number
    countryId: number
    schoolId: number
    studyLevelId: number
    _all: number
  }


  export type StudentAvgAggregateInputType = {
    userId?: true
    countryId?: true
    schoolId?: true
    studyLevelId?: true
  }

  export type StudentSumAggregateInputType = {
    userId?: true
    countryId?: true
    schoolId?: true
    studyLevelId?: true
  }

  export type StudentMinAggregateInputType = {
    userId?: true
    countryId?: true
    schoolId?: true
    studyLevelId?: true
  }

  export type StudentMaxAggregateInputType = {
    userId?: true
    countryId?: true
    schoolId?: true
    studyLevelId?: true
  }

  export type StudentCountAggregateInputType = {
    userId?: true
    countryId?: true
    schoolId?: true
    studyLevelId?: true
    _all?: true
  }

  export type StudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student to aggregate.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Students
    **/
    _count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }




  export type StudentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithAggregationInput | StudentOrderByWithAggregationInput[]
    by: StudentScalarFieldEnum[] | StudentScalarFieldEnum
    having?: StudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCountAggregateInputType | true
    _avg?: StudentAvgAggregateInputType
    _sum?: StudentSumAggregateInputType
    _min?: StudentMinAggregateInputType
    _max?: StudentMaxAggregateInputType
  }

  export type StudentGroupByOutputType = {
    userId: number
    countryId: number
    schoolId: number
    studyLevelId: number
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  type GetStudentGroupByPayload<T extends StudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGroupByOutputType[P]>
        }
      >
    >


  export type StudentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    countryId?: boolean
    schoolId?: boolean
    studyLevelId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    School?: boolean | SchoolDefaultArgs<ExtArgs>
    StudyLevel?: boolean | StudyLevelDefaultArgs<ExtArgs>
    fieldsOfStudy?: boolean | Student$fieldsOfStudyArgs<ExtArgs>
    courses?: boolean | Student$coursesArgs<ExtArgs>
    comments?: boolean | Student$commentsArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectScalar = {
    userId?: boolean
    countryId?: boolean
    schoolId?: boolean
    studyLevelId?: boolean
  }

  export type StudentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
    School?: boolean | SchoolDefaultArgs<ExtArgs>
    StudyLevel?: boolean | StudyLevelDefaultArgs<ExtArgs>
    fieldsOfStudy?: boolean | Student$fieldsOfStudyArgs<ExtArgs>
    courses?: boolean | Student$coursesArgs<ExtArgs>
    comments?: boolean | Student$commentsArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $StudentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Student"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      country: Prisma.$CountryPayload<ExtArgs>
      School: Prisma.$SchoolPayload<ExtArgs>
      StudyLevel: Prisma.$StudyLevelPayload<ExtArgs>
      fieldsOfStudy: Prisma.$StudentOnFieldOfStudyPayload<ExtArgs>[]
      courses: Prisma.$StudentOnCoursePayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: number
      countryId: number
      schoolId: number
      studyLevelId: number
    }, ExtArgs["result"]["student"]>
    composites: {}
  }


  type StudentGetPayload<S extends boolean | null | undefined | StudentDefaultArgs> = $Result.GetResult<Prisma.$StudentPayload, S>

  type StudentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StudentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StudentCountAggregateInputType | true
    }

  export interface StudentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Student'], meta: { name: 'Student' } }
    /**
     * Find zero or one Student that matches the filter.
     * @param {StudentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StudentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StudentFindUniqueArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Student that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StudentFindUniqueOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StudentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StudentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentFindFirstArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Student that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StudentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const studentWithUserIdOnly = await prisma.student.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends StudentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Student.
     * @param {StudentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
    **/
    create<T extends StudentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StudentCreateArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Students.
     *     @param {StudentCreateManyArgs} args - Arguments to create many Students.
     *     @example
     *     // Create many Students
     *     const student = await prisma.student.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StudentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Student.
     * @param {StudentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
    **/
    delete<T extends StudentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StudentDeleteArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Student.
     * @param {StudentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StudentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StudentUpdateArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Students.
     * @param {StudentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StudentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StudentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StudentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Student.
     * @param {StudentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
    **/
    upsert<T extends StudentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StudentUpsertArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends StudentCountArgs>(
      args?: Subset<T, StudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): Prisma.PrismaPromise<GetStudentAggregateType<T>>

    /**
     * Group by Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentGroupByArgs['orderBy'] }
        : { orderBy?: StudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Student model
   */
  readonly fields: StudentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    country<T extends CountryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CountryDefaultArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    School<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    StudyLevel<T extends StudyLevelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudyLevelDefaultArgs<ExtArgs>>): Prisma__StudyLevelClient<$Result.GetResult<Prisma.$StudyLevelPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    fieldsOfStudy<T extends Student$fieldsOfStudyArgs<ExtArgs> = {}>(args?: Subset<T, Student$fieldsOfStudyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentOnFieldOfStudyPayload<ExtArgs>, T, 'findMany'> | Null>;

    courses<T extends Student$coursesArgs<ExtArgs> = {}>(args?: Subset<T, Student$coursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentOnCoursePayload<ExtArgs>, T, 'findMany'> | Null>;

    comments<T extends Student$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Student$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Student model
   */ 
  interface StudentFieldRefs {
    readonly userId: FieldRef<"Student", 'Int'>
    readonly countryId: FieldRef<"Student", 'Int'>
    readonly schoolId: FieldRef<"Student", 'Int'>
    readonly studyLevelId: FieldRef<"Student", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Student findUnique
   */
  export type StudentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }


  /**
   * Student findUniqueOrThrow
   */
  export type StudentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }


  /**
   * Student findFirst
   */
  export type StudentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }


  /**
   * Student findFirstOrThrow
   */
  export type StudentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }


  /**
   * Student findMany
   */
  export type StudentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Students to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }


  /**
   * Student create
   */
  export type StudentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to create a Student.
     */
    data: XOR<StudentCreateInput, StudentUncheckedCreateInput>
  }


  /**
   * Student createMany
   */
  export type StudentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Student update
   */
  export type StudentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to update a Student.
     */
    data: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
    /**
     * Choose, which Student to update.
     */
    where: StudentWhereUniqueInput
  }


  /**
   * Student updateMany
   */
  export type StudentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
  }


  /**
   * Student upsert
   */
  export type StudentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The filter to search for the Student to update in case it exists.
     */
    where: StudentWhereUniqueInput
    /**
     * In case the Student found by the `where` argument doesn't exist, create a new Student with this data.
     */
    create: XOR<StudentCreateInput, StudentUncheckedCreateInput>
    /**
     * In case the Student was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
  }


  /**
   * Student delete
   */
  export type StudentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter which Student to delete.
     */
    where: StudentWhereUniqueInput
  }


  /**
   * Student deleteMany
   */
  export type StudentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Students to delete
     */
    where?: StudentWhereInput
  }


  /**
   * Student.fieldsOfStudy
   */
  export type Student$fieldsOfStudyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentOnFieldOfStudy
     */
    select?: StudentOnFieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentOnFieldOfStudyInclude<ExtArgs> | null
    where?: StudentOnFieldOfStudyWhereInput
    orderBy?: StudentOnFieldOfStudyOrderByWithRelationInput | StudentOnFieldOfStudyOrderByWithRelationInput[]
    cursor?: StudentOnFieldOfStudyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentOnFieldOfStudyScalarFieldEnum | StudentOnFieldOfStudyScalarFieldEnum[]
  }


  /**
   * Student.courses
   */
  export type Student$coursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentOnCourse
     */
    select?: StudentOnCourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentOnCourseInclude<ExtArgs> | null
    where?: StudentOnCourseWhereInput
    orderBy?: StudentOnCourseOrderByWithRelationInput | StudentOnCourseOrderByWithRelationInput[]
    cursor?: StudentOnCourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentOnCourseScalarFieldEnum | StudentOnCourseScalarFieldEnum[]
  }


  /**
   * Student.comments
   */
  export type Student$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }


  /**
   * Student without action
   */
  export type StudentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
  }



  /**
   * Model Country
   */

  export type AggregateCountry = {
    _count: CountryCountAggregateOutputType | null
    _avg: CountryAvgAggregateOutputType | null
    _sum: CountrySumAggregateOutputType | null
    _min: CountryMinAggregateOutputType | null
    _max: CountryMaxAggregateOutputType | null
  }

  export type CountryAvgAggregateOutputType = {
    id: number | null
  }

  export type CountrySumAggregateOutputType = {
    id: number | null
  }

  export type CountryMinAggregateOutputType = {
    id: number | null
    name: string | null
    tag: string | null
  }

  export type CountryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    tag: string | null
  }

  export type CountryCountAggregateOutputType = {
    id: number
    name: number
    tag: number
    _all: number
  }


  export type CountryAvgAggregateInputType = {
    id?: true
  }

  export type CountrySumAggregateInputType = {
    id?: true
  }

  export type CountryMinAggregateInputType = {
    id?: true
    name?: true
    tag?: true
  }

  export type CountryMaxAggregateInputType = {
    id?: true
    name?: true
    tag?: true
  }

  export type CountryCountAggregateInputType = {
    id?: true
    name?: true
    tag?: true
    _all?: true
  }

  export type CountryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Country to aggregate.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Countries
    **/
    _count?: true | CountryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CountryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CountrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CountryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CountryMaxAggregateInputType
  }

  export type GetCountryAggregateType<T extends CountryAggregateArgs> = {
        [P in keyof T & keyof AggregateCountry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCountry[P]>
      : GetScalarType<T[P], AggregateCountry[P]>
  }




  export type CountryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CountryWhereInput
    orderBy?: CountryOrderByWithAggregationInput | CountryOrderByWithAggregationInput[]
    by: CountryScalarFieldEnum[] | CountryScalarFieldEnum
    having?: CountryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CountryCountAggregateInputType | true
    _avg?: CountryAvgAggregateInputType
    _sum?: CountrySumAggregateInputType
    _min?: CountryMinAggregateInputType
    _max?: CountryMaxAggregateInputType
  }

  export type CountryGroupByOutputType = {
    id: number
    name: string
    tag: string
    _count: CountryCountAggregateOutputType | null
    _avg: CountryAvgAggregateOutputType | null
    _sum: CountrySumAggregateOutputType | null
    _min: CountryMinAggregateOutputType | null
    _max: CountryMaxAggregateOutputType | null
  }

  type GetCountryGroupByPayload<T extends CountryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CountryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CountryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CountryGroupByOutputType[P]>
            : GetScalarType<T[P], CountryGroupByOutputType[P]>
        }
      >
    >


  export type CountrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    tag?: boolean
    students?: boolean | Country$studentsArgs<ExtArgs>
    universities?: boolean | Country$universitiesArgs<ExtArgs>
    _count?: boolean | CountryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["country"]>

  export type CountrySelectScalar = {
    id?: boolean
    name?: boolean
    tag?: boolean
  }

  export type CountryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | Country$studentsArgs<ExtArgs>
    universities?: boolean | Country$universitiesArgs<ExtArgs>
    _count?: boolean | CountryCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CountryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Country"
    objects: {
      students: Prisma.$StudentPayload<ExtArgs>[]
      universities: Prisma.$UniversityPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      tag: string
    }, ExtArgs["result"]["country"]>
    composites: {}
  }


  type CountryGetPayload<S extends boolean | null | undefined | CountryDefaultArgs> = $Result.GetResult<Prisma.$CountryPayload, S>

  type CountryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CountryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CountryCountAggregateInputType | true
    }

  export interface CountryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Country'], meta: { name: 'Country' } }
    /**
     * Find zero or one Country that matches the filter.
     * @param {CountryFindUniqueArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CountryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CountryFindUniqueArgs<ExtArgs>>
    ): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Country that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CountryFindUniqueOrThrowArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CountryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CountryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Country that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindFirstArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CountryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CountryFindFirstArgs<ExtArgs>>
    ): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Country that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindFirstOrThrowArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CountryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CountryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Countries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Countries
     * const countries = await prisma.country.findMany()
     * 
     * // Get first 10 Countries
     * const countries = await prisma.country.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const countryWithIdOnly = await prisma.country.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CountryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CountryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Country.
     * @param {CountryCreateArgs} args - Arguments to create a Country.
     * @example
     * // Create one Country
     * const Country = await prisma.country.create({
     *   data: {
     *     // ... data to create a Country
     *   }
     * })
     * 
    **/
    create<T extends CountryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CountryCreateArgs<ExtArgs>>
    ): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Countries.
     *     @param {CountryCreateManyArgs} args - Arguments to create many Countries.
     *     @example
     *     // Create many Countries
     *     const country = await prisma.country.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CountryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CountryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Country.
     * @param {CountryDeleteArgs} args - Arguments to delete one Country.
     * @example
     * // Delete one Country
     * const Country = await prisma.country.delete({
     *   where: {
     *     // ... filter to delete one Country
     *   }
     * })
     * 
    **/
    delete<T extends CountryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CountryDeleteArgs<ExtArgs>>
    ): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Country.
     * @param {CountryUpdateArgs} args - Arguments to update one Country.
     * @example
     * // Update one Country
     * const country = await prisma.country.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CountryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CountryUpdateArgs<ExtArgs>>
    ): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Countries.
     * @param {CountryDeleteManyArgs} args - Arguments to filter Countries to delete.
     * @example
     * // Delete a few Countries
     * const { count } = await prisma.country.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CountryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CountryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Countries
     * const country = await prisma.country.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CountryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CountryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Country.
     * @param {CountryUpsertArgs} args - Arguments to update or create a Country.
     * @example
     * // Update or create a Country
     * const country = await prisma.country.upsert({
     *   create: {
     *     // ... data to create a Country
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Country we want to update
     *   }
     * })
    **/
    upsert<T extends CountryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CountryUpsertArgs<ExtArgs>>
    ): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryCountArgs} args - Arguments to filter Countries to count.
     * @example
     * // Count the number of Countries
     * const count = await prisma.country.count({
     *   where: {
     *     // ... the filter for the Countries we want to count
     *   }
     * })
    **/
    count<T extends CountryCountArgs>(
      args?: Subset<T, CountryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CountryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Country.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CountryAggregateArgs>(args: Subset<T, CountryAggregateArgs>): Prisma.PrismaPromise<GetCountryAggregateType<T>>

    /**
     * Group by Country.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CountryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CountryGroupByArgs['orderBy'] }
        : { orderBy?: CountryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CountryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCountryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Country model
   */
  readonly fields: CountryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Country.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CountryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    students<T extends Country$studentsArgs<ExtArgs> = {}>(args?: Subset<T, Country$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findMany'> | Null>;

    universities<T extends Country$universitiesArgs<ExtArgs> = {}>(args?: Subset<T, Country$universitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Country model
   */ 
  interface CountryFieldRefs {
    readonly id: FieldRef<"Country", 'Int'>
    readonly name: FieldRef<"Country", 'String'>
    readonly tag: FieldRef<"Country", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Country findUnique
   */
  export type CountryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where: CountryWhereUniqueInput
  }


  /**
   * Country findUniqueOrThrow
   */
  export type CountryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where: CountryWhereUniqueInput
  }


  /**
   * Country findFirst
   */
  export type CountryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Countries.
     */
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }


  /**
   * Country findFirstOrThrow
   */
  export type CountryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Countries.
     */
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }


  /**
   * Country findMany
   */
  export type CountryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Countries to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }


  /**
   * Country create
   */
  export type CountryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The data needed to create a Country.
     */
    data: XOR<CountryCreateInput, CountryUncheckedCreateInput>
  }


  /**
   * Country createMany
   */
  export type CountryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Countries.
     */
    data: CountryCreateManyInput | CountryCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Country update
   */
  export type CountryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The data needed to update a Country.
     */
    data: XOR<CountryUpdateInput, CountryUncheckedUpdateInput>
    /**
     * Choose, which Country to update.
     */
    where: CountryWhereUniqueInput
  }


  /**
   * Country updateMany
   */
  export type CountryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Countries.
     */
    data: XOR<CountryUpdateManyMutationInput, CountryUncheckedUpdateManyInput>
    /**
     * Filter which Countries to update
     */
    where?: CountryWhereInput
  }


  /**
   * Country upsert
   */
  export type CountryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The filter to search for the Country to update in case it exists.
     */
    where: CountryWhereUniqueInput
    /**
     * In case the Country found by the `where` argument doesn't exist, create a new Country with this data.
     */
    create: XOR<CountryCreateInput, CountryUncheckedCreateInput>
    /**
     * In case the Country was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CountryUpdateInput, CountryUncheckedUpdateInput>
  }


  /**
   * Country delete
   */
  export type CountryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter which Country to delete.
     */
    where: CountryWhereUniqueInput
  }


  /**
   * Country deleteMany
   */
  export type CountryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Countries to delete
     */
    where?: CountryWhereInput
  }


  /**
   * Country.students
   */
  export type Country$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }


  /**
   * Country.universities
   */
  export type Country$universitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UniversityInclude<ExtArgs> | null
    where?: UniversityWhereInput
    orderBy?: UniversityOrderByWithRelationInput | UniversityOrderByWithRelationInput[]
    cursor?: UniversityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UniversityScalarFieldEnum | UniversityScalarFieldEnum[]
  }


  /**
   * Country without action
   */
  export type CountryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CountryInclude<ExtArgs> | null
  }



  /**
   * Model University
   */

  export type AggregateUniversity = {
    _count: UniversityCountAggregateOutputType | null
    _avg: UniversityAvgAggregateOutputType | null
    _sum: UniversitySumAggregateOutputType | null
    _min: UniversityMinAggregateOutputType | null
    _max: UniversityMaxAggregateOutputType | null
  }

  export type UniversityAvgAggregateOutputType = {
    id: number | null
    countryId: number | null
  }

  export type UniversitySumAggregateOutputType = {
    id: number | null
    countryId: number | null
  }

  export type UniversityMinAggregateOutputType = {
    id: number | null
    name: string | null
    countryId: number | null
  }

  export type UniversityMaxAggregateOutputType = {
    id: number | null
    name: string | null
    countryId: number | null
  }

  export type UniversityCountAggregateOutputType = {
    id: number
    name: number
    countryId: number
    _all: number
  }


  export type UniversityAvgAggregateInputType = {
    id?: true
    countryId?: true
  }

  export type UniversitySumAggregateInputType = {
    id?: true
    countryId?: true
  }

  export type UniversityMinAggregateInputType = {
    id?: true
    name?: true
    countryId?: true
  }

  export type UniversityMaxAggregateInputType = {
    id?: true
    name?: true
    countryId?: true
  }

  export type UniversityCountAggregateInputType = {
    id?: true
    name?: true
    countryId?: true
    _all?: true
  }

  export type UniversityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which University to aggregate.
     */
    where?: UniversityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Universities to fetch.
     */
    orderBy?: UniversityOrderByWithRelationInput | UniversityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UniversityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Universities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Universities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Universities
    **/
    _count?: true | UniversityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UniversityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UniversitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UniversityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UniversityMaxAggregateInputType
  }

  export type GetUniversityAggregateType<T extends UniversityAggregateArgs> = {
        [P in keyof T & keyof AggregateUniversity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUniversity[P]>
      : GetScalarType<T[P], AggregateUniversity[P]>
  }




  export type UniversityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UniversityWhereInput
    orderBy?: UniversityOrderByWithAggregationInput | UniversityOrderByWithAggregationInput[]
    by: UniversityScalarFieldEnum[] | UniversityScalarFieldEnum
    having?: UniversityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UniversityCountAggregateInputType | true
    _avg?: UniversityAvgAggregateInputType
    _sum?: UniversitySumAggregateInputType
    _min?: UniversityMinAggregateInputType
    _max?: UniversityMaxAggregateInputType
  }

  export type UniversityGroupByOutputType = {
    id: number
    name: string
    countryId: number
    _count: UniversityCountAggregateOutputType | null
    _avg: UniversityAvgAggregateOutputType | null
    _sum: UniversitySumAggregateOutputType | null
    _min: UniversityMinAggregateOutputType | null
    _max: UniversityMaxAggregateOutputType | null
  }

  type GetUniversityGroupByPayload<T extends UniversityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UniversityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UniversityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UniversityGroupByOutputType[P]>
            : GetScalarType<T[P], UniversityGroupByOutputType[P]>
        }
      >
    >


  export type UniversitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    countryId?: boolean
    Country?: boolean | CountryDefaultArgs<ExtArgs>
    schools?: boolean | University$schoolsArgs<ExtArgs>
    _count?: boolean | UniversityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["university"]>

  export type UniversitySelectScalar = {
    id?: boolean
    name?: boolean
    countryId?: boolean
  }

  export type UniversityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Country?: boolean | CountryDefaultArgs<ExtArgs>
    schools?: boolean | University$schoolsArgs<ExtArgs>
    _count?: boolean | UniversityCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UniversityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "University"
    objects: {
      Country: Prisma.$CountryPayload<ExtArgs>
      schools: Prisma.$SchoolPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      countryId: number
    }, ExtArgs["result"]["university"]>
    composites: {}
  }


  type UniversityGetPayload<S extends boolean | null | undefined | UniversityDefaultArgs> = $Result.GetResult<Prisma.$UniversityPayload, S>

  type UniversityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UniversityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UniversityCountAggregateInputType | true
    }

  export interface UniversityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['University'], meta: { name: 'University' } }
    /**
     * Find zero or one University that matches the filter.
     * @param {UniversityFindUniqueArgs} args - Arguments to find a University
     * @example
     * // Get one University
     * const university = await prisma.university.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UniversityFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UniversityFindUniqueArgs<ExtArgs>>
    ): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one University that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UniversityFindUniqueOrThrowArgs} args - Arguments to find a University
     * @example
     * // Get one University
     * const university = await prisma.university.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UniversityFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UniversityFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first University that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityFindFirstArgs} args - Arguments to find a University
     * @example
     * // Get one University
     * const university = await prisma.university.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UniversityFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UniversityFindFirstArgs<ExtArgs>>
    ): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first University that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityFindFirstOrThrowArgs} args - Arguments to find a University
     * @example
     * // Get one University
     * const university = await prisma.university.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UniversityFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UniversityFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Universities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Universities
     * const universities = await prisma.university.findMany()
     * 
     * // Get first 10 Universities
     * const universities = await prisma.university.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const universityWithIdOnly = await prisma.university.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UniversityFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UniversityFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a University.
     * @param {UniversityCreateArgs} args - Arguments to create a University.
     * @example
     * // Create one University
     * const University = await prisma.university.create({
     *   data: {
     *     // ... data to create a University
     *   }
     * })
     * 
    **/
    create<T extends UniversityCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UniversityCreateArgs<ExtArgs>>
    ): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Universities.
     *     @param {UniversityCreateManyArgs} args - Arguments to create many Universities.
     *     @example
     *     // Create many Universities
     *     const university = await prisma.university.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UniversityCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UniversityCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a University.
     * @param {UniversityDeleteArgs} args - Arguments to delete one University.
     * @example
     * // Delete one University
     * const University = await prisma.university.delete({
     *   where: {
     *     // ... filter to delete one University
     *   }
     * })
     * 
    **/
    delete<T extends UniversityDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UniversityDeleteArgs<ExtArgs>>
    ): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one University.
     * @param {UniversityUpdateArgs} args - Arguments to update one University.
     * @example
     * // Update one University
     * const university = await prisma.university.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UniversityUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UniversityUpdateArgs<ExtArgs>>
    ): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Universities.
     * @param {UniversityDeleteManyArgs} args - Arguments to filter Universities to delete.
     * @example
     * // Delete a few Universities
     * const { count } = await prisma.university.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UniversityDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UniversityDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Universities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Universities
     * const university = await prisma.university.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UniversityUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UniversityUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one University.
     * @param {UniversityUpsertArgs} args - Arguments to update or create a University.
     * @example
     * // Update or create a University
     * const university = await prisma.university.upsert({
     *   create: {
     *     // ... data to create a University
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the University we want to update
     *   }
     * })
    **/
    upsert<T extends UniversityUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UniversityUpsertArgs<ExtArgs>>
    ): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Universities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityCountArgs} args - Arguments to filter Universities to count.
     * @example
     * // Count the number of Universities
     * const count = await prisma.university.count({
     *   where: {
     *     // ... the filter for the Universities we want to count
     *   }
     * })
    **/
    count<T extends UniversityCountArgs>(
      args?: Subset<T, UniversityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UniversityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a University.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UniversityAggregateArgs>(args: Subset<T, UniversityAggregateArgs>): Prisma.PrismaPromise<GetUniversityAggregateType<T>>

    /**
     * Group by University.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UniversityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UniversityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UniversityGroupByArgs['orderBy'] }
        : { orderBy?: UniversityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UniversityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUniversityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the University model
   */
  readonly fields: UniversityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for University.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UniversityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Country<T extends CountryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CountryDefaultArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    schools<T extends University$schoolsArgs<ExtArgs> = {}>(args?: Subset<T, University$schoolsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the University model
   */ 
  interface UniversityFieldRefs {
    readonly id: FieldRef<"University", 'Int'>
    readonly name: FieldRef<"University", 'String'>
    readonly countryId: FieldRef<"University", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * University findUnique
   */
  export type UniversityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UniversityInclude<ExtArgs> | null
    /**
     * Filter, which University to fetch.
     */
    where: UniversityWhereUniqueInput
  }


  /**
   * University findUniqueOrThrow
   */
  export type UniversityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UniversityInclude<ExtArgs> | null
    /**
     * Filter, which University to fetch.
     */
    where: UniversityWhereUniqueInput
  }


  /**
   * University findFirst
   */
  export type UniversityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UniversityInclude<ExtArgs> | null
    /**
     * Filter, which University to fetch.
     */
    where?: UniversityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Universities to fetch.
     */
    orderBy?: UniversityOrderByWithRelationInput | UniversityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Universities.
     */
    cursor?: UniversityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Universities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Universities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Universities.
     */
    distinct?: UniversityScalarFieldEnum | UniversityScalarFieldEnum[]
  }


  /**
   * University findFirstOrThrow
   */
  export type UniversityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UniversityInclude<ExtArgs> | null
    /**
     * Filter, which University to fetch.
     */
    where?: UniversityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Universities to fetch.
     */
    orderBy?: UniversityOrderByWithRelationInput | UniversityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Universities.
     */
    cursor?: UniversityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Universities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Universities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Universities.
     */
    distinct?: UniversityScalarFieldEnum | UniversityScalarFieldEnum[]
  }


  /**
   * University findMany
   */
  export type UniversityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UniversityInclude<ExtArgs> | null
    /**
     * Filter, which Universities to fetch.
     */
    where?: UniversityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Universities to fetch.
     */
    orderBy?: UniversityOrderByWithRelationInput | UniversityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Universities.
     */
    cursor?: UniversityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Universities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Universities.
     */
    skip?: number
    distinct?: UniversityScalarFieldEnum | UniversityScalarFieldEnum[]
  }


  /**
   * University create
   */
  export type UniversityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UniversityInclude<ExtArgs> | null
    /**
     * The data needed to create a University.
     */
    data: XOR<UniversityCreateInput, UniversityUncheckedCreateInput>
  }


  /**
   * University createMany
   */
  export type UniversityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Universities.
     */
    data: UniversityCreateManyInput | UniversityCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * University update
   */
  export type UniversityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UniversityInclude<ExtArgs> | null
    /**
     * The data needed to update a University.
     */
    data: XOR<UniversityUpdateInput, UniversityUncheckedUpdateInput>
    /**
     * Choose, which University to update.
     */
    where: UniversityWhereUniqueInput
  }


  /**
   * University updateMany
   */
  export type UniversityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Universities.
     */
    data: XOR<UniversityUpdateManyMutationInput, UniversityUncheckedUpdateManyInput>
    /**
     * Filter which Universities to update
     */
    where?: UniversityWhereInput
  }


  /**
   * University upsert
   */
  export type UniversityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UniversityInclude<ExtArgs> | null
    /**
     * The filter to search for the University to update in case it exists.
     */
    where: UniversityWhereUniqueInput
    /**
     * In case the University found by the `where` argument doesn't exist, create a new University with this data.
     */
    create: XOR<UniversityCreateInput, UniversityUncheckedCreateInput>
    /**
     * In case the University was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UniversityUpdateInput, UniversityUncheckedUpdateInput>
  }


  /**
   * University delete
   */
  export type UniversityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UniversityInclude<ExtArgs> | null
    /**
     * Filter which University to delete.
     */
    where: UniversityWhereUniqueInput
  }


  /**
   * University deleteMany
   */
  export type UniversityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Universities to delete
     */
    where?: UniversityWhereInput
  }


  /**
   * University.schools
   */
  export type University$schoolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    where?: SchoolWhereInput
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    cursor?: SchoolWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SchoolScalarFieldEnum | SchoolScalarFieldEnum[]
  }


  /**
   * University without action
   */
  export type UniversityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the University
     */
    select?: UniversitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UniversityInclude<ExtArgs> | null
  }



  /**
   * Model School
   */

  export type AggregateSchool = {
    _count: SchoolCountAggregateOutputType | null
    _avg: SchoolAvgAggregateOutputType | null
    _sum: SchoolSumAggregateOutputType | null
    _min: SchoolMinAggregateOutputType | null
    _max: SchoolMaxAggregateOutputType | null
  }

  export type SchoolAvgAggregateOutputType = {
    id: number | null
    universityId: number | null
  }

  export type SchoolSumAggregateOutputType = {
    id: number | null
    universityId: number | null
  }

  export type SchoolMinAggregateOutputType = {
    id: number | null
    name: string | null
    universityId: number | null
  }

  export type SchoolMaxAggregateOutputType = {
    id: number | null
    name: string | null
    universityId: number | null
  }

  export type SchoolCountAggregateOutputType = {
    id: number
    name: number
    universityId: number
    _all: number
  }


  export type SchoolAvgAggregateInputType = {
    id?: true
    universityId?: true
  }

  export type SchoolSumAggregateInputType = {
    id?: true
    universityId?: true
  }

  export type SchoolMinAggregateInputType = {
    id?: true
    name?: true
    universityId?: true
  }

  export type SchoolMaxAggregateInputType = {
    id?: true
    name?: true
    universityId?: true
  }

  export type SchoolCountAggregateInputType = {
    id?: true
    name?: true
    universityId?: true
    _all?: true
  }

  export type SchoolAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which School to aggregate.
     */
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     */
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Schools
    **/
    _count?: true | SchoolCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SchoolAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SchoolSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SchoolMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SchoolMaxAggregateInputType
  }

  export type GetSchoolAggregateType<T extends SchoolAggregateArgs> = {
        [P in keyof T & keyof AggregateSchool]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchool[P]>
      : GetScalarType<T[P], AggregateSchool[P]>
  }




  export type SchoolGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchoolWhereInput
    orderBy?: SchoolOrderByWithAggregationInput | SchoolOrderByWithAggregationInput[]
    by: SchoolScalarFieldEnum[] | SchoolScalarFieldEnum
    having?: SchoolScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SchoolCountAggregateInputType | true
    _avg?: SchoolAvgAggregateInputType
    _sum?: SchoolSumAggregateInputType
    _min?: SchoolMinAggregateInputType
    _max?: SchoolMaxAggregateInputType
  }

  export type SchoolGroupByOutputType = {
    id: number
    name: string
    universityId: number
    _count: SchoolCountAggregateOutputType | null
    _avg: SchoolAvgAggregateOutputType | null
    _sum: SchoolSumAggregateOutputType | null
    _min: SchoolMinAggregateOutputType | null
    _max: SchoolMaxAggregateOutputType | null
  }

  type GetSchoolGroupByPayload<T extends SchoolGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SchoolGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SchoolGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SchoolGroupByOutputType[P]>
            : GetScalarType<T[P], SchoolGroupByOutputType[P]>
        }
      >
    >


  export type SchoolSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    universityId?: boolean
    University?: boolean | UniversityDefaultArgs<ExtArgs>
    students?: boolean | School$studentsArgs<ExtArgs>
    _count?: boolean | SchoolCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["school"]>

  export type SchoolSelectScalar = {
    id?: boolean
    name?: boolean
    universityId?: boolean
  }

  export type SchoolInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    University?: boolean | UniversityDefaultArgs<ExtArgs>
    students?: boolean | School$studentsArgs<ExtArgs>
    _count?: boolean | SchoolCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SchoolPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "School"
    objects: {
      University: Prisma.$UniversityPayload<ExtArgs>
      students: Prisma.$StudentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      universityId: number
    }, ExtArgs["result"]["school"]>
    composites: {}
  }


  type SchoolGetPayload<S extends boolean | null | undefined | SchoolDefaultArgs> = $Result.GetResult<Prisma.$SchoolPayload, S>

  type SchoolCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SchoolFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SchoolCountAggregateInputType | true
    }

  export interface SchoolDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['School'], meta: { name: 'School' } }
    /**
     * Find zero or one School that matches the filter.
     * @param {SchoolFindUniqueArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SchoolFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolFindUniqueArgs<ExtArgs>>
    ): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one School that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SchoolFindUniqueOrThrowArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SchoolFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first School that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFindFirstArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SchoolFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolFindFirstArgs<ExtArgs>>
    ): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first School that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFindFirstOrThrowArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SchoolFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Schools that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Schools
     * const schools = await prisma.school.findMany()
     * 
     * // Get first 10 Schools
     * const schools = await prisma.school.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const schoolWithIdOnly = await prisma.school.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SchoolFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a School.
     * @param {SchoolCreateArgs} args - Arguments to create a School.
     * @example
     * // Create one School
     * const School = await prisma.school.create({
     *   data: {
     *     // ... data to create a School
     *   }
     * })
     * 
    **/
    create<T extends SchoolCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolCreateArgs<ExtArgs>>
    ): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Schools.
     *     @param {SchoolCreateManyArgs} args - Arguments to create many Schools.
     *     @example
     *     // Create many Schools
     *     const school = await prisma.school.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SchoolCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a School.
     * @param {SchoolDeleteArgs} args - Arguments to delete one School.
     * @example
     * // Delete one School
     * const School = await prisma.school.delete({
     *   where: {
     *     // ... filter to delete one School
     *   }
     * })
     * 
    **/
    delete<T extends SchoolDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolDeleteArgs<ExtArgs>>
    ): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one School.
     * @param {SchoolUpdateArgs} args - Arguments to update one School.
     * @example
     * // Update one School
     * const school = await prisma.school.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SchoolUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolUpdateArgs<ExtArgs>>
    ): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Schools.
     * @param {SchoolDeleteManyArgs} args - Arguments to filter Schools to delete.
     * @example
     * // Delete a few Schools
     * const { count } = await prisma.school.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SchoolDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SchoolDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Schools
     * const school = await prisma.school.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SchoolUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one School.
     * @param {SchoolUpsertArgs} args - Arguments to update or create a School.
     * @example
     * // Update or create a School
     * const school = await prisma.school.upsert({
     *   create: {
     *     // ... data to create a School
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the School we want to update
     *   }
     * })
    **/
    upsert<T extends SchoolUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SchoolUpsertArgs<ExtArgs>>
    ): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Schools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolCountArgs} args - Arguments to filter Schools to count.
     * @example
     * // Count the number of Schools
     * const count = await prisma.school.count({
     *   where: {
     *     // ... the filter for the Schools we want to count
     *   }
     * })
    **/
    count<T extends SchoolCountArgs>(
      args?: Subset<T, SchoolCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SchoolCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a School.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SchoolAggregateArgs>(args: Subset<T, SchoolAggregateArgs>): Prisma.PrismaPromise<GetSchoolAggregateType<T>>

    /**
     * Group by School.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SchoolGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SchoolGroupByArgs['orderBy'] }
        : { orderBy?: SchoolGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SchoolGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSchoolGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the School model
   */
  readonly fields: SchoolFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for School.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SchoolClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    University<T extends UniversityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UniversityDefaultArgs<ExtArgs>>): Prisma__UniversityClient<$Result.GetResult<Prisma.$UniversityPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    students<T extends School$studentsArgs<ExtArgs> = {}>(args?: Subset<T, School$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the School model
   */ 
  interface SchoolFieldRefs {
    readonly id: FieldRef<"School", 'Int'>
    readonly name: FieldRef<"School", 'String'>
    readonly universityId: FieldRef<"School", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * School findUnique
   */
  export type SchoolFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which School to fetch.
     */
    where: SchoolWhereUniqueInput
  }


  /**
   * School findUniqueOrThrow
   */
  export type SchoolFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which School to fetch.
     */
    where: SchoolWhereUniqueInput
  }


  /**
   * School findFirst
   */
  export type SchoolFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which School to fetch.
     */
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     */
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schools.
     */
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schools.
     */
    distinct?: SchoolScalarFieldEnum | SchoolScalarFieldEnum[]
  }


  /**
   * School findFirstOrThrow
   */
  export type SchoolFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which School to fetch.
     */
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     */
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schools.
     */
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schools.
     */
    distinct?: SchoolScalarFieldEnum | SchoolScalarFieldEnum[]
  }


  /**
   * School findMany
   */
  export type SchoolFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which Schools to fetch.
     */
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     */
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Schools.
     */
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     */
    skip?: number
    distinct?: SchoolScalarFieldEnum | SchoolScalarFieldEnum[]
  }


  /**
   * School create
   */
  export type SchoolCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * The data needed to create a School.
     */
    data: XOR<SchoolCreateInput, SchoolUncheckedCreateInput>
  }


  /**
   * School createMany
   */
  export type SchoolCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Schools.
     */
    data: SchoolCreateManyInput | SchoolCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * School update
   */
  export type SchoolUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * The data needed to update a School.
     */
    data: XOR<SchoolUpdateInput, SchoolUncheckedUpdateInput>
    /**
     * Choose, which School to update.
     */
    where: SchoolWhereUniqueInput
  }


  /**
   * School updateMany
   */
  export type SchoolUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Schools.
     */
    data: XOR<SchoolUpdateManyMutationInput, SchoolUncheckedUpdateManyInput>
    /**
     * Filter which Schools to update
     */
    where?: SchoolWhereInput
  }


  /**
   * School upsert
   */
  export type SchoolUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * The filter to search for the School to update in case it exists.
     */
    where: SchoolWhereUniqueInput
    /**
     * In case the School found by the `where` argument doesn't exist, create a new School with this data.
     */
    create: XOR<SchoolCreateInput, SchoolUncheckedCreateInput>
    /**
     * In case the School was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SchoolUpdateInput, SchoolUncheckedUpdateInput>
  }


  /**
   * School delete
   */
  export type SchoolDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter which School to delete.
     */
    where: SchoolWhereUniqueInput
  }


  /**
   * School deleteMany
   */
  export type SchoolDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schools to delete
     */
    where?: SchoolWhereInput
  }


  /**
   * School.students
   */
  export type School$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }


  /**
   * School without action
   */
  export type SchoolDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SchoolInclude<ExtArgs> | null
  }



  /**
   * Model FieldOfStudy
   */

  export type AggregateFieldOfStudy = {
    _count: FieldOfStudyCountAggregateOutputType | null
    _avg: FieldOfStudyAvgAggregateOutputType | null
    _sum: FieldOfStudySumAggregateOutputType | null
    _min: FieldOfStudyMinAggregateOutputType | null
    _max: FieldOfStudyMaxAggregateOutputType | null
  }

  export type FieldOfStudyAvgAggregateOutputType = {
    id: number | null
  }

  export type FieldOfStudySumAggregateOutputType = {
    id: number | null
  }

  export type FieldOfStudyMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type FieldOfStudyMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type FieldOfStudyCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type FieldOfStudyAvgAggregateInputType = {
    id?: true
  }

  export type FieldOfStudySumAggregateInputType = {
    id?: true
  }

  export type FieldOfStudyMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type FieldOfStudyMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type FieldOfStudyCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type FieldOfStudyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FieldOfStudy to aggregate.
     */
    where?: FieldOfStudyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FieldOfStudies to fetch.
     */
    orderBy?: FieldOfStudyOrderByWithRelationInput | FieldOfStudyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FieldOfStudyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FieldOfStudies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FieldOfStudies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FieldOfStudies
    **/
    _count?: true | FieldOfStudyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FieldOfStudyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FieldOfStudySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FieldOfStudyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FieldOfStudyMaxAggregateInputType
  }

  export type GetFieldOfStudyAggregateType<T extends FieldOfStudyAggregateArgs> = {
        [P in keyof T & keyof AggregateFieldOfStudy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFieldOfStudy[P]>
      : GetScalarType<T[P], AggregateFieldOfStudy[P]>
  }




  export type FieldOfStudyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FieldOfStudyWhereInput
    orderBy?: FieldOfStudyOrderByWithAggregationInput | FieldOfStudyOrderByWithAggregationInput[]
    by: FieldOfStudyScalarFieldEnum[] | FieldOfStudyScalarFieldEnum
    having?: FieldOfStudyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FieldOfStudyCountAggregateInputType | true
    _avg?: FieldOfStudyAvgAggregateInputType
    _sum?: FieldOfStudySumAggregateInputType
    _min?: FieldOfStudyMinAggregateInputType
    _max?: FieldOfStudyMaxAggregateInputType
  }

  export type FieldOfStudyGroupByOutputType = {
    id: number
    name: string
    _count: FieldOfStudyCountAggregateOutputType | null
    _avg: FieldOfStudyAvgAggregateOutputType | null
    _sum: FieldOfStudySumAggregateOutputType | null
    _min: FieldOfStudyMinAggregateOutputType | null
    _max: FieldOfStudyMaxAggregateOutputType | null
  }

  type GetFieldOfStudyGroupByPayload<T extends FieldOfStudyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FieldOfStudyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FieldOfStudyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FieldOfStudyGroupByOutputType[P]>
            : GetScalarType<T[P], FieldOfStudyGroupByOutputType[P]>
        }
      >
    >


  export type FieldOfStudySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    professors?: boolean | FieldOfStudy$professorsArgs<ExtArgs>
    students?: boolean | FieldOfStudy$studentsArgs<ExtArgs>
    courses?: boolean | FieldOfStudy$coursesArgs<ExtArgs>
    _count?: boolean | FieldOfStudyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fieldOfStudy"]>

  export type FieldOfStudySelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type FieldOfStudyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    professors?: boolean | FieldOfStudy$professorsArgs<ExtArgs>
    students?: boolean | FieldOfStudy$studentsArgs<ExtArgs>
    courses?: boolean | FieldOfStudy$coursesArgs<ExtArgs>
    _count?: boolean | FieldOfStudyCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $FieldOfStudyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FieldOfStudy"
    objects: {
      professors: Prisma.$ProfessorOnFieldOfStudyPayload<ExtArgs>[]
      students: Prisma.$StudentOnFieldOfStudyPayload<ExtArgs>[]
      courses: Prisma.$CoursePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["fieldOfStudy"]>
    composites: {}
  }


  type FieldOfStudyGetPayload<S extends boolean | null | undefined | FieldOfStudyDefaultArgs> = $Result.GetResult<Prisma.$FieldOfStudyPayload, S>

  type FieldOfStudyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FieldOfStudyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FieldOfStudyCountAggregateInputType | true
    }

  export interface FieldOfStudyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FieldOfStudy'], meta: { name: 'FieldOfStudy' } }
    /**
     * Find zero or one FieldOfStudy that matches the filter.
     * @param {FieldOfStudyFindUniqueArgs} args - Arguments to find a FieldOfStudy
     * @example
     * // Get one FieldOfStudy
     * const fieldOfStudy = await prisma.fieldOfStudy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FieldOfStudyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FieldOfStudyFindUniqueArgs<ExtArgs>>
    ): Prisma__FieldOfStudyClient<$Result.GetResult<Prisma.$FieldOfStudyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one FieldOfStudy that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FieldOfStudyFindUniqueOrThrowArgs} args - Arguments to find a FieldOfStudy
     * @example
     * // Get one FieldOfStudy
     * const fieldOfStudy = await prisma.fieldOfStudy.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FieldOfStudyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FieldOfStudyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FieldOfStudyClient<$Result.GetResult<Prisma.$FieldOfStudyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first FieldOfStudy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldOfStudyFindFirstArgs} args - Arguments to find a FieldOfStudy
     * @example
     * // Get one FieldOfStudy
     * const fieldOfStudy = await prisma.fieldOfStudy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FieldOfStudyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FieldOfStudyFindFirstArgs<ExtArgs>>
    ): Prisma__FieldOfStudyClient<$Result.GetResult<Prisma.$FieldOfStudyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first FieldOfStudy that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldOfStudyFindFirstOrThrowArgs} args - Arguments to find a FieldOfStudy
     * @example
     * // Get one FieldOfStudy
     * const fieldOfStudy = await prisma.fieldOfStudy.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FieldOfStudyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FieldOfStudyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FieldOfStudyClient<$Result.GetResult<Prisma.$FieldOfStudyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more FieldOfStudies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldOfStudyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FieldOfStudies
     * const fieldOfStudies = await prisma.fieldOfStudy.findMany()
     * 
     * // Get first 10 FieldOfStudies
     * const fieldOfStudies = await prisma.fieldOfStudy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fieldOfStudyWithIdOnly = await prisma.fieldOfStudy.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FieldOfStudyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FieldOfStudyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FieldOfStudyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a FieldOfStudy.
     * @param {FieldOfStudyCreateArgs} args - Arguments to create a FieldOfStudy.
     * @example
     * // Create one FieldOfStudy
     * const FieldOfStudy = await prisma.fieldOfStudy.create({
     *   data: {
     *     // ... data to create a FieldOfStudy
     *   }
     * })
     * 
    **/
    create<T extends FieldOfStudyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FieldOfStudyCreateArgs<ExtArgs>>
    ): Prisma__FieldOfStudyClient<$Result.GetResult<Prisma.$FieldOfStudyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many FieldOfStudies.
     *     @param {FieldOfStudyCreateManyArgs} args - Arguments to create many FieldOfStudies.
     *     @example
     *     // Create many FieldOfStudies
     *     const fieldOfStudy = await prisma.fieldOfStudy.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FieldOfStudyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FieldOfStudyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FieldOfStudy.
     * @param {FieldOfStudyDeleteArgs} args - Arguments to delete one FieldOfStudy.
     * @example
     * // Delete one FieldOfStudy
     * const FieldOfStudy = await prisma.fieldOfStudy.delete({
     *   where: {
     *     // ... filter to delete one FieldOfStudy
     *   }
     * })
     * 
    **/
    delete<T extends FieldOfStudyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FieldOfStudyDeleteArgs<ExtArgs>>
    ): Prisma__FieldOfStudyClient<$Result.GetResult<Prisma.$FieldOfStudyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one FieldOfStudy.
     * @param {FieldOfStudyUpdateArgs} args - Arguments to update one FieldOfStudy.
     * @example
     * // Update one FieldOfStudy
     * const fieldOfStudy = await prisma.fieldOfStudy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FieldOfStudyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FieldOfStudyUpdateArgs<ExtArgs>>
    ): Prisma__FieldOfStudyClient<$Result.GetResult<Prisma.$FieldOfStudyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more FieldOfStudies.
     * @param {FieldOfStudyDeleteManyArgs} args - Arguments to filter FieldOfStudies to delete.
     * @example
     * // Delete a few FieldOfStudies
     * const { count } = await prisma.fieldOfStudy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FieldOfStudyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FieldOfStudyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FieldOfStudies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldOfStudyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FieldOfStudies
     * const fieldOfStudy = await prisma.fieldOfStudy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FieldOfStudyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FieldOfStudyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FieldOfStudy.
     * @param {FieldOfStudyUpsertArgs} args - Arguments to update or create a FieldOfStudy.
     * @example
     * // Update or create a FieldOfStudy
     * const fieldOfStudy = await prisma.fieldOfStudy.upsert({
     *   create: {
     *     // ... data to create a FieldOfStudy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FieldOfStudy we want to update
     *   }
     * })
    **/
    upsert<T extends FieldOfStudyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FieldOfStudyUpsertArgs<ExtArgs>>
    ): Prisma__FieldOfStudyClient<$Result.GetResult<Prisma.$FieldOfStudyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of FieldOfStudies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldOfStudyCountArgs} args - Arguments to filter FieldOfStudies to count.
     * @example
     * // Count the number of FieldOfStudies
     * const count = await prisma.fieldOfStudy.count({
     *   where: {
     *     // ... the filter for the FieldOfStudies we want to count
     *   }
     * })
    **/
    count<T extends FieldOfStudyCountArgs>(
      args?: Subset<T, FieldOfStudyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FieldOfStudyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FieldOfStudy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldOfStudyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FieldOfStudyAggregateArgs>(args: Subset<T, FieldOfStudyAggregateArgs>): Prisma.PrismaPromise<GetFieldOfStudyAggregateType<T>>

    /**
     * Group by FieldOfStudy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldOfStudyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FieldOfStudyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FieldOfStudyGroupByArgs['orderBy'] }
        : { orderBy?: FieldOfStudyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FieldOfStudyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFieldOfStudyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FieldOfStudy model
   */
  readonly fields: FieldOfStudyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FieldOfStudy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FieldOfStudyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    professors<T extends FieldOfStudy$professorsArgs<ExtArgs> = {}>(args?: Subset<T, FieldOfStudy$professorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessorOnFieldOfStudyPayload<ExtArgs>, T, 'findMany'> | Null>;

    students<T extends FieldOfStudy$studentsArgs<ExtArgs> = {}>(args?: Subset<T, FieldOfStudy$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentOnFieldOfStudyPayload<ExtArgs>, T, 'findMany'> | Null>;

    courses<T extends FieldOfStudy$coursesArgs<ExtArgs> = {}>(args?: Subset<T, FieldOfStudy$coursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the FieldOfStudy model
   */ 
  interface FieldOfStudyFieldRefs {
    readonly id: FieldRef<"FieldOfStudy", 'Int'>
    readonly name: FieldRef<"FieldOfStudy", 'String'>
  }
    

  // Custom InputTypes

  /**
   * FieldOfStudy findUnique
   */
  export type FieldOfStudyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldOfStudy
     */
    select?: FieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FieldOfStudyInclude<ExtArgs> | null
    /**
     * Filter, which FieldOfStudy to fetch.
     */
    where: FieldOfStudyWhereUniqueInput
  }


  /**
   * FieldOfStudy findUniqueOrThrow
   */
  export type FieldOfStudyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldOfStudy
     */
    select?: FieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FieldOfStudyInclude<ExtArgs> | null
    /**
     * Filter, which FieldOfStudy to fetch.
     */
    where: FieldOfStudyWhereUniqueInput
  }


  /**
   * FieldOfStudy findFirst
   */
  export type FieldOfStudyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldOfStudy
     */
    select?: FieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FieldOfStudyInclude<ExtArgs> | null
    /**
     * Filter, which FieldOfStudy to fetch.
     */
    where?: FieldOfStudyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FieldOfStudies to fetch.
     */
    orderBy?: FieldOfStudyOrderByWithRelationInput | FieldOfStudyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FieldOfStudies.
     */
    cursor?: FieldOfStudyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FieldOfStudies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FieldOfStudies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FieldOfStudies.
     */
    distinct?: FieldOfStudyScalarFieldEnum | FieldOfStudyScalarFieldEnum[]
  }


  /**
   * FieldOfStudy findFirstOrThrow
   */
  export type FieldOfStudyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldOfStudy
     */
    select?: FieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FieldOfStudyInclude<ExtArgs> | null
    /**
     * Filter, which FieldOfStudy to fetch.
     */
    where?: FieldOfStudyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FieldOfStudies to fetch.
     */
    orderBy?: FieldOfStudyOrderByWithRelationInput | FieldOfStudyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FieldOfStudies.
     */
    cursor?: FieldOfStudyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FieldOfStudies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FieldOfStudies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FieldOfStudies.
     */
    distinct?: FieldOfStudyScalarFieldEnum | FieldOfStudyScalarFieldEnum[]
  }


  /**
   * FieldOfStudy findMany
   */
  export type FieldOfStudyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldOfStudy
     */
    select?: FieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FieldOfStudyInclude<ExtArgs> | null
    /**
     * Filter, which FieldOfStudies to fetch.
     */
    where?: FieldOfStudyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FieldOfStudies to fetch.
     */
    orderBy?: FieldOfStudyOrderByWithRelationInput | FieldOfStudyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FieldOfStudies.
     */
    cursor?: FieldOfStudyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FieldOfStudies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FieldOfStudies.
     */
    skip?: number
    distinct?: FieldOfStudyScalarFieldEnum | FieldOfStudyScalarFieldEnum[]
  }


  /**
   * FieldOfStudy create
   */
  export type FieldOfStudyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldOfStudy
     */
    select?: FieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FieldOfStudyInclude<ExtArgs> | null
    /**
     * The data needed to create a FieldOfStudy.
     */
    data: XOR<FieldOfStudyCreateInput, FieldOfStudyUncheckedCreateInput>
  }


  /**
   * FieldOfStudy createMany
   */
  export type FieldOfStudyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FieldOfStudies.
     */
    data: FieldOfStudyCreateManyInput | FieldOfStudyCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * FieldOfStudy update
   */
  export type FieldOfStudyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldOfStudy
     */
    select?: FieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FieldOfStudyInclude<ExtArgs> | null
    /**
     * The data needed to update a FieldOfStudy.
     */
    data: XOR<FieldOfStudyUpdateInput, FieldOfStudyUncheckedUpdateInput>
    /**
     * Choose, which FieldOfStudy to update.
     */
    where: FieldOfStudyWhereUniqueInput
  }


  /**
   * FieldOfStudy updateMany
   */
  export type FieldOfStudyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FieldOfStudies.
     */
    data: XOR<FieldOfStudyUpdateManyMutationInput, FieldOfStudyUncheckedUpdateManyInput>
    /**
     * Filter which FieldOfStudies to update
     */
    where?: FieldOfStudyWhereInput
  }


  /**
   * FieldOfStudy upsert
   */
  export type FieldOfStudyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldOfStudy
     */
    select?: FieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FieldOfStudyInclude<ExtArgs> | null
    /**
     * The filter to search for the FieldOfStudy to update in case it exists.
     */
    where: FieldOfStudyWhereUniqueInput
    /**
     * In case the FieldOfStudy found by the `where` argument doesn't exist, create a new FieldOfStudy with this data.
     */
    create: XOR<FieldOfStudyCreateInput, FieldOfStudyUncheckedCreateInput>
    /**
     * In case the FieldOfStudy was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FieldOfStudyUpdateInput, FieldOfStudyUncheckedUpdateInput>
  }


  /**
   * FieldOfStudy delete
   */
  export type FieldOfStudyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldOfStudy
     */
    select?: FieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FieldOfStudyInclude<ExtArgs> | null
    /**
     * Filter which FieldOfStudy to delete.
     */
    where: FieldOfStudyWhereUniqueInput
  }


  /**
   * FieldOfStudy deleteMany
   */
  export type FieldOfStudyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FieldOfStudies to delete
     */
    where?: FieldOfStudyWhereInput
  }


  /**
   * FieldOfStudy.professors
   */
  export type FieldOfStudy$professorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorOnFieldOfStudy
     */
    select?: ProfessorOnFieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorOnFieldOfStudyInclude<ExtArgs> | null
    where?: ProfessorOnFieldOfStudyWhereInput
    orderBy?: ProfessorOnFieldOfStudyOrderByWithRelationInput | ProfessorOnFieldOfStudyOrderByWithRelationInput[]
    cursor?: ProfessorOnFieldOfStudyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfessorOnFieldOfStudyScalarFieldEnum | ProfessorOnFieldOfStudyScalarFieldEnum[]
  }


  /**
   * FieldOfStudy.students
   */
  export type FieldOfStudy$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentOnFieldOfStudy
     */
    select?: StudentOnFieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentOnFieldOfStudyInclude<ExtArgs> | null
    where?: StudentOnFieldOfStudyWhereInput
    orderBy?: StudentOnFieldOfStudyOrderByWithRelationInput | StudentOnFieldOfStudyOrderByWithRelationInput[]
    cursor?: StudentOnFieldOfStudyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentOnFieldOfStudyScalarFieldEnum | StudentOnFieldOfStudyScalarFieldEnum[]
  }


  /**
   * FieldOfStudy.courses
   */
  export type FieldOfStudy$coursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    cursor?: CourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }


  /**
   * FieldOfStudy without action
   */
  export type FieldOfStudyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldOfStudy
     */
    select?: FieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FieldOfStudyInclude<ExtArgs> | null
  }



  /**
   * Model ProfessorOnFieldOfStudy
   */

  export type AggregateProfessorOnFieldOfStudy = {
    _count: ProfessorOnFieldOfStudyCountAggregateOutputType | null
    _avg: ProfessorOnFieldOfStudyAvgAggregateOutputType | null
    _sum: ProfessorOnFieldOfStudySumAggregateOutputType | null
    _min: ProfessorOnFieldOfStudyMinAggregateOutputType | null
    _max: ProfessorOnFieldOfStudyMaxAggregateOutputType | null
  }

  export type ProfessorOnFieldOfStudyAvgAggregateOutputType = {
    fieldOfStudyId: number | null
    professorUserId: number | null
  }

  export type ProfessorOnFieldOfStudySumAggregateOutputType = {
    fieldOfStudyId: number | null
    professorUserId: number | null
  }

  export type ProfessorOnFieldOfStudyMinAggregateOutputType = {
    fieldOfStudyId: number | null
    professorUserId: number | null
  }

  export type ProfessorOnFieldOfStudyMaxAggregateOutputType = {
    fieldOfStudyId: number | null
    professorUserId: number | null
  }

  export type ProfessorOnFieldOfStudyCountAggregateOutputType = {
    fieldOfStudyId: number
    professorUserId: number
    _all: number
  }


  export type ProfessorOnFieldOfStudyAvgAggregateInputType = {
    fieldOfStudyId?: true
    professorUserId?: true
  }

  export type ProfessorOnFieldOfStudySumAggregateInputType = {
    fieldOfStudyId?: true
    professorUserId?: true
  }

  export type ProfessorOnFieldOfStudyMinAggregateInputType = {
    fieldOfStudyId?: true
    professorUserId?: true
  }

  export type ProfessorOnFieldOfStudyMaxAggregateInputType = {
    fieldOfStudyId?: true
    professorUserId?: true
  }

  export type ProfessorOnFieldOfStudyCountAggregateInputType = {
    fieldOfStudyId?: true
    professorUserId?: true
    _all?: true
  }

  export type ProfessorOnFieldOfStudyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfessorOnFieldOfStudy to aggregate.
     */
    where?: ProfessorOnFieldOfStudyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessorOnFieldOfStudies to fetch.
     */
    orderBy?: ProfessorOnFieldOfStudyOrderByWithRelationInput | ProfessorOnFieldOfStudyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfessorOnFieldOfStudyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessorOnFieldOfStudies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessorOnFieldOfStudies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProfessorOnFieldOfStudies
    **/
    _count?: true | ProfessorOnFieldOfStudyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfessorOnFieldOfStudyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfessorOnFieldOfStudySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfessorOnFieldOfStudyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfessorOnFieldOfStudyMaxAggregateInputType
  }

  export type GetProfessorOnFieldOfStudyAggregateType<T extends ProfessorOnFieldOfStudyAggregateArgs> = {
        [P in keyof T & keyof AggregateProfessorOnFieldOfStudy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfessorOnFieldOfStudy[P]>
      : GetScalarType<T[P], AggregateProfessorOnFieldOfStudy[P]>
  }




  export type ProfessorOnFieldOfStudyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessorOnFieldOfStudyWhereInput
    orderBy?: ProfessorOnFieldOfStudyOrderByWithAggregationInput | ProfessorOnFieldOfStudyOrderByWithAggregationInput[]
    by: ProfessorOnFieldOfStudyScalarFieldEnum[] | ProfessorOnFieldOfStudyScalarFieldEnum
    having?: ProfessorOnFieldOfStudyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfessorOnFieldOfStudyCountAggregateInputType | true
    _avg?: ProfessorOnFieldOfStudyAvgAggregateInputType
    _sum?: ProfessorOnFieldOfStudySumAggregateInputType
    _min?: ProfessorOnFieldOfStudyMinAggregateInputType
    _max?: ProfessorOnFieldOfStudyMaxAggregateInputType
  }

  export type ProfessorOnFieldOfStudyGroupByOutputType = {
    fieldOfStudyId: number
    professorUserId: number
    _count: ProfessorOnFieldOfStudyCountAggregateOutputType | null
    _avg: ProfessorOnFieldOfStudyAvgAggregateOutputType | null
    _sum: ProfessorOnFieldOfStudySumAggregateOutputType | null
    _min: ProfessorOnFieldOfStudyMinAggregateOutputType | null
    _max: ProfessorOnFieldOfStudyMaxAggregateOutputType | null
  }

  type GetProfessorOnFieldOfStudyGroupByPayload<T extends ProfessorOnFieldOfStudyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfessorOnFieldOfStudyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfessorOnFieldOfStudyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfessorOnFieldOfStudyGroupByOutputType[P]>
            : GetScalarType<T[P], ProfessorOnFieldOfStudyGroupByOutputType[P]>
        }
      >
    >


  export type ProfessorOnFieldOfStudySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    fieldOfStudyId?: boolean
    professorUserId?: boolean
    FieldOfStudy?: boolean | FieldOfStudyDefaultArgs<ExtArgs>
    Professor?: boolean | ProfessorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professorOnFieldOfStudy"]>

  export type ProfessorOnFieldOfStudySelectScalar = {
    fieldOfStudyId?: boolean
    professorUserId?: boolean
  }

  export type ProfessorOnFieldOfStudyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    FieldOfStudy?: boolean | FieldOfStudyDefaultArgs<ExtArgs>
    Professor?: boolean | ProfessorDefaultArgs<ExtArgs>
  }


  export type $ProfessorOnFieldOfStudyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProfessorOnFieldOfStudy"
    objects: {
      FieldOfStudy: Prisma.$FieldOfStudyPayload<ExtArgs>
      Professor: Prisma.$ProfessorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      fieldOfStudyId: number
      professorUserId: number
    }, ExtArgs["result"]["professorOnFieldOfStudy"]>
    composites: {}
  }


  type ProfessorOnFieldOfStudyGetPayload<S extends boolean | null | undefined | ProfessorOnFieldOfStudyDefaultArgs> = $Result.GetResult<Prisma.$ProfessorOnFieldOfStudyPayload, S>

  type ProfessorOnFieldOfStudyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProfessorOnFieldOfStudyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProfessorOnFieldOfStudyCountAggregateInputType | true
    }

  export interface ProfessorOnFieldOfStudyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProfessorOnFieldOfStudy'], meta: { name: 'ProfessorOnFieldOfStudy' } }
    /**
     * Find zero or one ProfessorOnFieldOfStudy that matches the filter.
     * @param {ProfessorOnFieldOfStudyFindUniqueArgs} args - Arguments to find a ProfessorOnFieldOfStudy
     * @example
     * // Get one ProfessorOnFieldOfStudy
     * const professorOnFieldOfStudy = await prisma.professorOnFieldOfStudy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProfessorOnFieldOfStudyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessorOnFieldOfStudyFindUniqueArgs<ExtArgs>>
    ): Prisma__ProfessorOnFieldOfStudyClient<$Result.GetResult<Prisma.$ProfessorOnFieldOfStudyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ProfessorOnFieldOfStudy that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProfessorOnFieldOfStudyFindUniqueOrThrowArgs} args - Arguments to find a ProfessorOnFieldOfStudy
     * @example
     * // Get one ProfessorOnFieldOfStudy
     * const professorOnFieldOfStudy = await prisma.professorOnFieldOfStudy.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProfessorOnFieldOfStudyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessorOnFieldOfStudyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProfessorOnFieldOfStudyClient<$Result.GetResult<Prisma.$ProfessorOnFieldOfStudyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ProfessorOnFieldOfStudy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorOnFieldOfStudyFindFirstArgs} args - Arguments to find a ProfessorOnFieldOfStudy
     * @example
     * // Get one ProfessorOnFieldOfStudy
     * const professorOnFieldOfStudy = await prisma.professorOnFieldOfStudy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProfessorOnFieldOfStudyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessorOnFieldOfStudyFindFirstArgs<ExtArgs>>
    ): Prisma__ProfessorOnFieldOfStudyClient<$Result.GetResult<Prisma.$ProfessorOnFieldOfStudyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ProfessorOnFieldOfStudy that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorOnFieldOfStudyFindFirstOrThrowArgs} args - Arguments to find a ProfessorOnFieldOfStudy
     * @example
     * // Get one ProfessorOnFieldOfStudy
     * const professorOnFieldOfStudy = await prisma.professorOnFieldOfStudy.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProfessorOnFieldOfStudyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessorOnFieldOfStudyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProfessorOnFieldOfStudyClient<$Result.GetResult<Prisma.$ProfessorOnFieldOfStudyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ProfessorOnFieldOfStudies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorOnFieldOfStudyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProfessorOnFieldOfStudies
     * const professorOnFieldOfStudies = await prisma.professorOnFieldOfStudy.findMany()
     * 
     * // Get first 10 ProfessorOnFieldOfStudies
     * const professorOnFieldOfStudies = await prisma.professorOnFieldOfStudy.findMany({ take: 10 })
     * 
     * // Only select the `fieldOfStudyId`
     * const professorOnFieldOfStudyWithFieldOfStudyIdOnly = await prisma.professorOnFieldOfStudy.findMany({ select: { fieldOfStudyId: true } })
     * 
    **/
    findMany<T extends ProfessorOnFieldOfStudyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessorOnFieldOfStudyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessorOnFieldOfStudyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ProfessorOnFieldOfStudy.
     * @param {ProfessorOnFieldOfStudyCreateArgs} args - Arguments to create a ProfessorOnFieldOfStudy.
     * @example
     * // Create one ProfessorOnFieldOfStudy
     * const ProfessorOnFieldOfStudy = await prisma.professorOnFieldOfStudy.create({
     *   data: {
     *     // ... data to create a ProfessorOnFieldOfStudy
     *   }
     * })
     * 
    **/
    create<T extends ProfessorOnFieldOfStudyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessorOnFieldOfStudyCreateArgs<ExtArgs>>
    ): Prisma__ProfessorOnFieldOfStudyClient<$Result.GetResult<Prisma.$ProfessorOnFieldOfStudyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ProfessorOnFieldOfStudies.
     *     @param {ProfessorOnFieldOfStudyCreateManyArgs} args - Arguments to create many ProfessorOnFieldOfStudies.
     *     @example
     *     // Create many ProfessorOnFieldOfStudies
     *     const professorOnFieldOfStudy = await prisma.professorOnFieldOfStudy.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProfessorOnFieldOfStudyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessorOnFieldOfStudyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProfessorOnFieldOfStudy.
     * @param {ProfessorOnFieldOfStudyDeleteArgs} args - Arguments to delete one ProfessorOnFieldOfStudy.
     * @example
     * // Delete one ProfessorOnFieldOfStudy
     * const ProfessorOnFieldOfStudy = await prisma.professorOnFieldOfStudy.delete({
     *   where: {
     *     // ... filter to delete one ProfessorOnFieldOfStudy
     *   }
     * })
     * 
    **/
    delete<T extends ProfessorOnFieldOfStudyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessorOnFieldOfStudyDeleteArgs<ExtArgs>>
    ): Prisma__ProfessorOnFieldOfStudyClient<$Result.GetResult<Prisma.$ProfessorOnFieldOfStudyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ProfessorOnFieldOfStudy.
     * @param {ProfessorOnFieldOfStudyUpdateArgs} args - Arguments to update one ProfessorOnFieldOfStudy.
     * @example
     * // Update one ProfessorOnFieldOfStudy
     * const professorOnFieldOfStudy = await prisma.professorOnFieldOfStudy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProfessorOnFieldOfStudyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessorOnFieldOfStudyUpdateArgs<ExtArgs>>
    ): Prisma__ProfessorOnFieldOfStudyClient<$Result.GetResult<Prisma.$ProfessorOnFieldOfStudyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ProfessorOnFieldOfStudies.
     * @param {ProfessorOnFieldOfStudyDeleteManyArgs} args - Arguments to filter ProfessorOnFieldOfStudies to delete.
     * @example
     * // Delete a few ProfessorOnFieldOfStudies
     * const { count } = await prisma.professorOnFieldOfStudy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProfessorOnFieldOfStudyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfessorOnFieldOfStudyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfessorOnFieldOfStudies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorOnFieldOfStudyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProfessorOnFieldOfStudies
     * const professorOnFieldOfStudy = await prisma.professorOnFieldOfStudy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProfessorOnFieldOfStudyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessorOnFieldOfStudyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProfessorOnFieldOfStudy.
     * @param {ProfessorOnFieldOfStudyUpsertArgs} args - Arguments to update or create a ProfessorOnFieldOfStudy.
     * @example
     * // Update or create a ProfessorOnFieldOfStudy
     * const professorOnFieldOfStudy = await prisma.professorOnFieldOfStudy.upsert({
     *   create: {
     *     // ... data to create a ProfessorOnFieldOfStudy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProfessorOnFieldOfStudy we want to update
     *   }
     * })
    **/
    upsert<T extends ProfessorOnFieldOfStudyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProfessorOnFieldOfStudyUpsertArgs<ExtArgs>>
    ): Prisma__ProfessorOnFieldOfStudyClient<$Result.GetResult<Prisma.$ProfessorOnFieldOfStudyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ProfessorOnFieldOfStudies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorOnFieldOfStudyCountArgs} args - Arguments to filter ProfessorOnFieldOfStudies to count.
     * @example
     * // Count the number of ProfessorOnFieldOfStudies
     * const count = await prisma.professorOnFieldOfStudy.count({
     *   where: {
     *     // ... the filter for the ProfessorOnFieldOfStudies we want to count
     *   }
     * })
    **/
    count<T extends ProfessorOnFieldOfStudyCountArgs>(
      args?: Subset<T, ProfessorOnFieldOfStudyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfessorOnFieldOfStudyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProfessorOnFieldOfStudy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorOnFieldOfStudyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfessorOnFieldOfStudyAggregateArgs>(args: Subset<T, ProfessorOnFieldOfStudyAggregateArgs>): Prisma.PrismaPromise<GetProfessorOnFieldOfStudyAggregateType<T>>

    /**
     * Group by ProfessorOnFieldOfStudy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessorOnFieldOfStudyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfessorOnFieldOfStudyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfessorOnFieldOfStudyGroupByArgs['orderBy'] }
        : { orderBy?: ProfessorOnFieldOfStudyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfessorOnFieldOfStudyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfessorOnFieldOfStudyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProfessorOnFieldOfStudy model
   */
  readonly fields: ProfessorOnFieldOfStudyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProfessorOnFieldOfStudy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfessorOnFieldOfStudyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    FieldOfStudy<T extends FieldOfStudyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FieldOfStudyDefaultArgs<ExtArgs>>): Prisma__FieldOfStudyClient<$Result.GetResult<Prisma.$FieldOfStudyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Professor<T extends ProfessorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfessorDefaultArgs<ExtArgs>>): Prisma__ProfessorClient<$Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ProfessorOnFieldOfStudy model
   */ 
  interface ProfessorOnFieldOfStudyFieldRefs {
    readonly fieldOfStudyId: FieldRef<"ProfessorOnFieldOfStudy", 'Int'>
    readonly professorUserId: FieldRef<"ProfessorOnFieldOfStudy", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * ProfessorOnFieldOfStudy findUnique
   */
  export type ProfessorOnFieldOfStudyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorOnFieldOfStudy
     */
    select?: ProfessorOnFieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorOnFieldOfStudyInclude<ExtArgs> | null
    /**
     * Filter, which ProfessorOnFieldOfStudy to fetch.
     */
    where: ProfessorOnFieldOfStudyWhereUniqueInput
  }


  /**
   * ProfessorOnFieldOfStudy findUniqueOrThrow
   */
  export type ProfessorOnFieldOfStudyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorOnFieldOfStudy
     */
    select?: ProfessorOnFieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorOnFieldOfStudyInclude<ExtArgs> | null
    /**
     * Filter, which ProfessorOnFieldOfStudy to fetch.
     */
    where: ProfessorOnFieldOfStudyWhereUniqueInput
  }


  /**
   * ProfessorOnFieldOfStudy findFirst
   */
  export type ProfessorOnFieldOfStudyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorOnFieldOfStudy
     */
    select?: ProfessorOnFieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorOnFieldOfStudyInclude<ExtArgs> | null
    /**
     * Filter, which ProfessorOnFieldOfStudy to fetch.
     */
    where?: ProfessorOnFieldOfStudyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessorOnFieldOfStudies to fetch.
     */
    orderBy?: ProfessorOnFieldOfStudyOrderByWithRelationInput | ProfessorOnFieldOfStudyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfessorOnFieldOfStudies.
     */
    cursor?: ProfessorOnFieldOfStudyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessorOnFieldOfStudies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessorOnFieldOfStudies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfessorOnFieldOfStudies.
     */
    distinct?: ProfessorOnFieldOfStudyScalarFieldEnum | ProfessorOnFieldOfStudyScalarFieldEnum[]
  }


  /**
   * ProfessorOnFieldOfStudy findFirstOrThrow
   */
  export type ProfessorOnFieldOfStudyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorOnFieldOfStudy
     */
    select?: ProfessorOnFieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorOnFieldOfStudyInclude<ExtArgs> | null
    /**
     * Filter, which ProfessorOnFieldOfStudy to fetch.
     */
    where?: ProfessorOnFieldOfStudyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessorOnFieldOfStudies to fetch.
     */
    orderBy?: ProfessorOnFieldOfStudyOrderByWithRelationInput | ProfessorOnFieldOfStudyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfessorOnFieldOfStudies.
     */
    cursor?: ProfessorOnFieldOfStudyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessorOnFieldOfStudies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessorOnFieldOfStudies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfessorOnFieldOfStudies.
     */
    distinct?: ProfessorOnFieldOfStudyScalarFieldEnum | ProfessorOnFieldOfStudyScalarFieldEnum[]
  }


  /**
   * ProfessorOnFieldOfStudy findMany
   */
  export type ProfessorOnFieldOfStudyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorOnFieldOfStudy
     */
    select?: ProfessorOnFieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorOnFieldOfStudyInclude<ExtArgs> | null
    /**
     * Filter, which ProfessorOnFieldOfStudies to fetch.
     */
    where?: ProfessorOnFieldOfStudyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessorOnFieldOfStudies to fetch.
     */
    orderBy?: ProfessorOnFieldOfStudyOrderByWithRelationInput | ProfessorOnFieldOfStudyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProfessorOnFieldOfStudies.
     */
    cursor?: ProfessorOnFieldOfStudyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessorOnFieldOfStudies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessorOnFieldOfStudies.
     */
    skip?: number
    distinct?: ProfessorOnFieldOfStudyScalarFieldEnum | ProfessorOnFieldOfStudyScalarFieldEnum[]
  }


  /**
   * ProfessorOnFieldOfStudy create
   */
  export type ProfessorOnFieldOfStudyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorOnFieldOfStudy
     */
    select?: ProfessorOnFieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorOnFieldOfStudyInclude<ExtArgs> | null
    /**
     * The data needed to create a ProfessorOnFieldOfStudy.
     */
    data: XOR<ProfessorOnFieldOfStudyCreateInput, ProfessorOnFieldOfStudyUncheckedCreateInput>
  }


  /**
   * ProfessorOnFieldOfStudy createMany
   */
  export type ProfessorOnFieldOfStudyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProfessorOnFieldOfStudies.
     */
    data: ProfessorOnFieldOfStudyCreateManyInput | ProfessorOnFieldOfStudyCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ProfessorOnFieldOfStudy update
   */
  export type ProfessorOnFieldOfStudyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorOnFieldOfStudy
     */
    select?: ProfessorOnFieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorOnFieldOfStudyInclude<ExtArgs> | null
    /**
     * The data needed to update a ProfessorOnFieldOfStudy.
     */
    data: XOR<ProfessorOnFieldOfStudyUpdateInput, ProfessorOnFieldOfStudyUncheckedUpdateInput>
    /**
     * Choose, which ProfessorOnFieldOfStudy to update.
     */
    where: ProfessorOnFieldOfStudyWhereUniqueInput
  }


  /**
   * ProfessorOnFieldOfStudy updateMany
   */
  export type ProfessorOnFieldOfStudyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProfessorOnFieldOfStudies.
     */
    data: XOR<ProfessorOnFieldOfStudyUpdateManyMutationInput, ProfessorOnFieldOfStudyUncheckedUpdateManyInput>
    /**
     * Filter which ProfessorOnFieldOfStudies to update
     */
    where?: ProfessorOnFieldOfStudyWhereInput
  }


  /**
   * ProfessorOnFieldOfStudy upsert
   */
  export type ProfessorOnFieldOfStudyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorOnFieldOfStudy
     */
    select?: ProfessorOnFieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorOnFieldOfStudyInclude<ExtArgs> | null
    /**
     * The filter to search for the ProfessorOnFieldOfStudy to update in case it exists.
     */
    where: ProfessorOnFieldOfStudyWhereUniqueInput
    /**
     * In case the ProfessorOnFieldOfStudy found by the `where` argument doesn't exist, create a new ProfessorOnFieldOfStudy with this data.
     */
    create: XOR<ProfessorOnFieldOfStudyCreateInput, ProfessorOnFieldOfStudyUncheckedCreateInput>
    /**
     * In case the ProfessorOnFieldOfStudy was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfessorOnFieldOfStudyUpdateInput, ProfessorOnFieldOfStudyUncheckedUpdateInput>
  }


  /**
   * ProfessorOnFieldOfStudy delete
   */
  export type ProfessorOnFieldOfStudyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorOnFieldOfStudy
     */
    select?: ProfessorOnFieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorOnFieldOfStudyInclude<ExtArgs> | null
    /**
     * Filter which ProfessorOnFieldOfStudy to delete.
     */
    where: ProfessorOnFieldOfStudyWhereUniqueInput
  }


  /**
   * ProfessorOnFieldOfStudy deleteMany
   */
  export type ProfessorOnFieldOfStudyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfessorOnFieldOfStudies to delete
     */
    where?: ProfessorOnFieldOfStudyWhereInput
  }


  /**
   * ProfessorOnFieldOfStudy without action
   */
  export type ProfessorOnFieldOfStudyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessorOnFieldOfStudy
     */
    select?: ProfessorOnFieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfessorOnFieldOfStudyInclude<ExtArgs> | null
  }



  /**
   * Model StudentOnFieldOfStudy
   */

  export type AggregateStudentOnFieldOfStudy = {
    _count: StudentOnFieldOfStudyCountAggregateOutputType | null
    _avg: StudentOnFieldOfStudyAvgAggregateOutputType | null
    _sum: StudentOnFieldOfStudySumAggregateOutputType | null
    _min: StudentOnFieldOfStudyMinAggregateOutputType | null
    _max: StudentOnFieldOfStudyMaxAggregateOutputType | null
  }

  export type StudentOnFieldOfStudyAvgAggregateOutputType = {
    studentUserId: number | null
    fieldOfStudyId: number | null
  }

  export type StudentOnFieldOfStudySumAggregateOutputType = {
    studentUserId: number | null
    fieldOfStudyId: number | null
  }

  export type StudentOnFieldOfStudyMinAggregateOutputType = {
    studentUserId: number | null
    fieldOfStudyId: number | null
  }

  export type StudentOnFieldOfStudyMaxAggregateOutputType = {
    studentUserId: number | null
    fieldOfStudyId: number | null
  }

  export type StudentOnFieldOfStudyCountAggregateOutputType = {
    studentUserId: number
    fieldOfStudyId: number
    _all: number
  }


  export type StudentOnFieldOfStudyAvgAggregateInputType = {
    studentUserId?: true
    fieldOfStudyId?: true
  }

  export type StudentOnFieldOfStudySumAggregateInputType = {
    studentUserId?: true
    fieldOfStudyId?: true
  }

  export type StudentOnFieldOfStudyMinAggregateInputType = {
    studentUserId?: true
    fieldOfStudyId?: true
  }

  export type StudentOnFieldOfStudyMaxAggregateInputType = {
    studentUserId?: true
    fieldOfStudyId?: true
  }

  export type StudentOnFieldOfStudyCountAggregateInputType = {
    studentUserId?: true
    fieldOfStudyId?: true
    _all?: true
  }

  export type StudentOnFieldOfStudyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentOnFieldOfStudy to aggregate.
     */
    where?: StudentOnFieldOfStudyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentOnFieldOfStudies to fetch.
     */
    orderBy?: StudentOnFieldOfStudyOrderByWithRelationInput | StudentOnFieldOfStudyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentOnFieldOfStudyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentOnFieldOfStudies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentOnFieldOfStudies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudentOnFieldOfStudies
    **/
    _count?: true | StudentOnFieldOfStudyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentOnFieldOfStudyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentOnFieldOfStudySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentOnFieldOfStudyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentOnFieldOfStudyMaxAggregateInputType
  }

  export type GetStudentOnFieldOfStudyAggregateType<T extends StudentOnFieldOfStudyAggregateArgs> = {
        [P in keyof T & keyof AggregateStudentOnFieldOfStudy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudentOnFieldOfStudy[P]>
      : GetScalarType<T[P], AggregateStudentOnFieldOfStudy[P]>
  }




  export type StudentOnFieldOfStudyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentOnFieldOfStudyWhereInput
    orderBy?: StudentOnFieldOfStudyOrderByWithAggregationInput | StudentOnFieldOfStudyOrderByWithAggregationInput[]
    by: StudentOnFieldOfStudyScalarFieldEnum[] | StudentOnFieldOfStudyScalarFieldEnum
    having?: StudentOnFieldOfStudyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentOnFieldOfStudyCountAggregateInputType | true
    _avg?: StudentOnFieldOfStudyAvgAggregateInputType
    _sum?: StudentOnFieldOfStudySumAggregateInputType
    _min?: StudentOnFieldOfStudyMinAggregateInputType
    _max?: StudentOnFieldOfStudyMaxAggregateInputType
  }

  export type StudentOnFieldOfStudyGroupByOutputType = {
    studentUserId: number
    fieldOfStudyId: number
    _count: StudentOnFieldOfStudyCountAggregateOutputType | null
    _avg: StudentOnFieldOfStudyAvgAggregateOutputType | null
    _sum: StudentOnFieldOfStudySumAggregateOutputType | null
    _min: StudentOnFieldOfStudyMinAggregateOutputType | null
    _max: StudentOnFieldOfStudyMaxAggregateOutputType | null
  }

  type GetStudentOnFieldOfStudyGroupByPayload<T extends StudentOnFieldOfStudyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentOnFieldOfStudyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentOnFieldOfStudyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentOnFieldOfStudyGroupByOutputType[P]>
            : GetScalarType<T[P], StudentOnFieldOfStudyGroupByOutputType[P]>
        }
      >
    >


  export type StudentOnFieldOfStudySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    studentUserId?: boolean
    fieldOfStudyId?: boolean
    Student?: boolean | StudentDefaultArgs<ExtArgs>
    FieldOfStudy?: boolean | FieldOfStudyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentOnFieldOfStudy"]>

  export type StudentOnFieldOfStudySelectScalar = {
    studentUserId?: boolean
    fieldOfStudyId?: boolean
  }

  export type StudentOnFieldOfStudyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Student?: boolean | StudentDefaultArgs<ExtArgs>
    FieldOfStudy?: boolean | FieldOfStudyDefaultArgs<ExtArgs>
  }


  export type $StudentOnFieldOfStudyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudentOnFieldOfStudy"
    objects: {
      Student: Prisma.$StudentPayload<ExtArgs>
      FieldOfStudy: Prisma.$FieldOfStudyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      studentUserId: number
      fieldOfStudyId: number
    }, ExtArgs["result"]["studentOnFieldOfStudy"]>
    composites: {}
  }


  type StudentOnFieldOfStudyGetPayload<S extends boolean | null | undefined | StudentOnFieldOfStudyDefaultArgs> = $Result.GetResult<Prisma.$StudentOnFieldOfStudyPayload, S>

  type StudentOnFieldOfStudyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StudentOnFieldOfStudyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StudentOnFieldOfStudyCountAggregateInputType | true
    }

  export interface StudentOnFieldOfStudyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudentOnFieldOfStudy'], meta: { name: 'StudentOnFieldOfStudy' } }
    /**
     * Find zero or one StudentOnFieldOfStudy that matches the filter.
     * @param {StudentOnFieldOfStudyFindUniqueArgs} args - Arguments to find a StudentOnFieldOfStudy
     * @example
     * // Get one StudentOnFieldOfStudy
     * const studentOnFieldOfStudy = await prisma.studentOnFieldOfStudy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StudentOnFieldOfStudyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StudentOnFieldOfStudyFindUniqueArgs<ExtArgs>>
    ): Prisma__StudentOnFieldOfStudyClient<$Result.GetResult<Prisma.$StudentOnFieldOfStudyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one StudentOnFieldOfStudy that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StudentOnFieldOfStudyFindUniqueOrThrowArgs} args - Arguments to find a StudentOnFieldOfStudy
     * @example
     * // Get one StudentOnFieldOfStudy
     * const studentOnFieldOfStudy = await prisma.studentOnFieldOfStudy.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StudentOnFieldOfStudyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentOnFieldOfStudyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StudentOnFieldOfStudyClient<$Result.GetResult<Prisma.$StudentOnFieldOfStudyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first StudentOnFieldOfStudy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentOnFieldOfStudyFindFirstArgs} args - Arguments to find a StudentOnFieldOfStudy
     * @example
     * // Get one StudentOnFieldOfStudy
     * const studentOnFieldOfStudy = await prisma.studentOnFieldOfStudy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StudentOnFieldOfStudyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentOnFieldOfStudyFindFirstArgs<ExtArgs>>
    ): Prisma__StudentOnFieldOfStudyClient<$Result.GetResult<Prisma.$StudentOnFieldOfStudyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first StudentOnFieldOfStudy that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentOnFieldOfStudyFindFirstOrThrowArgs} args - Arguments to find a StudentOnFieldOfStudy
     * @example
     * // Get one StudentOnFieldOfStudy
     * const studentOnFieldOfStudy = await prisma.studentOnFieldOfStudy.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StudentOnFieldOfStudyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentOnFieldOfStudyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StudentOnFieldOfStudyClient<$Result.GetResult<Prisma.$StudentOnFieldOfStudyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more StudentOnFieldOfStudies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentOnFieldOfStudyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudentOnFieldOfStudies
     * const studentOnFieldOfStudies = await prisma.studentOnFieldOfStudy.findMany()
     * 
     * // Get first 10 StudentOnFieldOfStudies
     * const studentOnFieldOfStudies = await prisma.studentOnFieldOfStudy.findMany({ take: 10 })
     * 
     * // Only select the `studentUserId`
     * const studentOnFieldOfStudyWithStudentUserIdOnly = await prisma.studentOnFieldOfStudy.findMany({ select: { studentUserId: true } })
     * 
    **/
    findMany<T extends StudentOnFieldOfStudyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentOnFieldOfStudyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentOnFieldOfStudyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a StudentOnFieldOfStudy.
     * @param {StudentOnFieldOfStudyCreateArgs} args - Arguments to create a StudentOnFieldOfStudy.
     * @example
     * // Create one StudentOnFieldOfStudy
     * const StudentOnFieldOfStudy = await prisma.studentOnFieldOfStudy.create({
     *   data: {
     *     // ... data to create a StudentOnFieldOfStudy
     *   }
     * })
     * 
    **/
    create<T extends StudentOnFieldOfStudyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StudentOnFieldOfStudyCreateArgs<ExtArgs>>
    ): Prisma__StudentOnFieldOfStudyClient<$Result.GetResult<Prisma.$StudentOnFieldOfStudyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many StudentOnFieldOfStudies.
     *     @param {StudentOnFieldOfStudyCreateManyArgs} args - Arguments to create many StudentOnFieldOfStudies.
     *     @example
     *     // Create many StudentOnFieldOfStudies
     *     const studentOnFieldOfStudy = await prisma.studentOnFieldOfStudy.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StudentOnFieldOfStudyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentOnFieldOfStudyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a StudentOnFieldOfStudy.
     * @param {StudentOnFieldOfStudyDeleteArgs} args - Arguments to delete one StudentOnFieldOfStudy.
     * @example
     * // Delete one StudentOnFieldOfStudy
     * const StudentOnFieldOfStudy = await prisma.studentOnFieldOfStudy.delete({
     *   where: {
     *     // ... filter to delete one StudentOnFieldOfStudy
     *   }
     * })
     * 
    **/
    delete<T extends StudentOnFieldOfStudyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StudentOnFieldOfStudyDeleteArgs<ExtArgs>>
    ): Prisma__StudentOnFieldOfStudyClient<$Result.GetResult<Prisma.$StudentOnFieldOfStudyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one StudentOnFieldOfStudy.
     * @param {StudentOnFieldOfStudyUpdateArgs} args - Arguments to update one StudentOnFieldOfStudy.
     * @example
     * // Update one StudentOnFieldOfStudy
     * const studentOnFieldOfStudy = await prisma.studentOnFieldOfStudy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StudentOnFieldOfStudyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StudentOnFieldOfStudyUpdateArgs<ExtArgs>>
    ): Prisma__StudentOnFieldOfStudyClient<$Result.GetResult<Prisma.$StudentOnFieldOfStudyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more StudentOnFieldOfStudies.
     * @param {StudentOnFieldOfStudyDeleteManyArgs} args - Arguments to filter StudentOnFieldOfStudies to delete.
     * @example
     * // Delete a few StudentOnFieldOfStudies
     * const { count } = await prisma.studentOnFieldOfStudy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StudentOnFieldOfStudyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentOnFieldOfStudyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentOnFieldOfStudies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentOnFieldOfStudyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudentOnFieldOfStudies
     * const studentOnFieldOfStudy = await prisma.studentOnFieldOfStudy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StudentOnFieldOfStudyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StudentOnFieldOfStudyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StudentOnFieldOfStudy.
     * @param {StudentOnFieldOfStudyUpsertArgs} args - Arguments to update or create a StudentOnFieldOfStudy.
     * @example
     * // Update or create a StudentOnFieldOfStudy
     * const studentOnFieldOfStudy = await prisma.studentOnFieldOfStudy.upsert({
     *   create: {
     *     // ... data to create a StudentOnFieldOfStudy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudentOnFieldOfStudy we want to update
     *   }
     * })
    **/
    upsert<T extends StudentOnFieldOfStudyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StudentOnFieldOfStudyUpsertArgs<ExtArgs>>
    ): Prisma__StudentOnFieldOfStudyClient<$Result.GetResult<Prisma.$StudentOnFieldOfStudyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of StudentOnFieldOfStudies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentOnFieldOfStudyCountArgs} args - Arguments to filter StudentOnFieldOfStudies to count.
     * @example
     * // Count the number of StudentOnFieldOfStudies
     * const count = await prisma.studentOnFieldOfStudy.count({
     *   where: {
     *     // ... the filter for the StudentOnFieldOfStudies we want to count
     *   }
     * })
    **/
    count<T extends StudentOnFieldOfStudyCountArgs>(
      args?: Subset<T, StudentOnFieldOfStudyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentOnFieldOfStudyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudentOnFieldOfStudy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentOnFieldOfStudyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentOnFieldOfStudyAggregateArgs>(args: Subset<T, StudentOnFieldOfStudyAggregateArgs>): Prisma.PrismaPromise<GetStudentOnFieldOfStudyAggregateType<T>>

    /**
     * Group by StudentOnFieldOfStudy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentOnFieldOfStudyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentOnFieldOfStudyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentOnFieldOfStudyGroupByArgs['orderBy'] }
        : { orderBy?: StudentOnFieldOfStudyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentOnFieldOfStudyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentOnFieldOfStudyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudentOnFieldOfStudy model
   */
  readonly fields: StudentOnFieldOfStudyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudentOnFieldOfStudy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentOnFieldOfStudyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    FieldOfStudy<T extends FieldOfStudyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FieldOfStudyDefaultArgs<ExtArgs>>): Prisma__FieldOfStudyClient<$Result.GetResult<Prisma.$FieldOfStudyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the StudentOnFieldOfStudy model
   */ 
  interface StudentOnFieldOfStudyFieldRefs {
    readonly studentUserId: FieldRef<"StudentOnFieldOfStudy", 'Int'>
    readonly fieldOfStudyId: FieldRef<"StudentOnFieldOfStudy", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * StudentOnFieldOfStudy findUnique
   */
  export type StudentOnFieldOfStudyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentOnFieldOfStudy
     */
    select?: StudentOnFieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentOnFieldOfStudyInclude<ExtArgs> | null
    /**
     * Filter, which StudentOnFieldOfStudy to fetch.
     */
    where: StudentOnFieldOfStudyWhereUniqueInput
  }


  /**
   * StudentOnFieldOfStudy findUniqueOrThrow
   */
  export type StudentOnFieldOfStudyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentOnFieldOfStudy
     */
    select?: StudentOnFieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentOnFieldOfStudyInclude<ExtArgs> | null
    /**
     * Filter, which StudentOnFieldOfStudy to fetch.
     */
    where: StudentOnFieldOfStudyWhereUniqueInput
  }


  /**
   * StudentOnFieldOfStudy findFirst
   */
  export type StudentOnFieldOfStudyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentOnFieldOfStudy
     */
    select?: StudentOnFieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentOnFieldOfStudyInclude<ExtArgs> | null
    /**
     * Filter, which StudentOnFieldOfStudy to fetch.
     */
    where?: StudentOnFieldOfStudyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentOnFieldOfStudies to fetch.
     */
    orderBy?: StudentOnFieldOfStudyOrderByWithRelationInput | StudentOnFieldOfStudyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentOnFieldOfStudies.
     */
    cursor?: StudentOnFieldOfStudyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentOnFieldOfStudies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentOnFieldOfStudies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentOnFieldOfStudies.
     */
    distinct?: StudentOnFieldOfStudyScalarFieldEnum | StudentOnFieldOfStudyScalarFieldEnum[]
  }


  /**
   * StudentOnFieldOfStudy findFirstOrThrow
   */
  export type StudentOnFieldOfStudyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentOnFieldOfStudy
     */
    select?: StudentOnFieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentOnFieldOfStudyInclude<ExtArgs> | null
    /**
     * Filter, which StudentOnFieldOfStudy to fetch.
     */
    where?: StudentOnFieldOfStudyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentOnFieldOfStudies to fetch.
     */
    orderBy?: StudentOnFieldOfStudyOrderByWithRelationInput | StudentOnFieldOfStudyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentOnFieldOfStudies.
     */
    cursor?: StudentOnFieldOfStudyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentOnFieldOfStudies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentOnFieldOfStudies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentOnFieldOfStudies.
     */
    distinct?: StudentOnFieldOfStudyScalarFieldEnum | StudentOnFieldOfStudyScalarFieldEnum[]
  }


  /**
   * StudentOnFieldOfStudy findMany
   */
  export type StudentOnFieldOfStudyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentOnFieldOfStudy
     */
    select?: StudentOnFieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentOnFieldOfStudyInclude<ExtArgs> | null
    /**
     * Filter, which StudentOnFieldOfStudies to fetch.
     */
    where?: StudentOnFieldOfStudyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentOnFieldOfStudies to fetch.
     */
    orderBy?: StudentOnFieldOfStudyOrderByWithRelationInput | StudentOnFieldOfStudyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudentOnFieldOfStudies.
     */
    cursor?: StudentOnFieldOfStudyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentOnFieldOfStudies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentOnFieldOfStudies.
     */
    skip?: number
    distinct?: StudentOnFieldOfStudyScalarFieldEnum | StudentOnFieldOfStudyScalarFieldEnum[]
  }


  /**
   * StudentOnFieldOfStudy create
   */
  export type StudentOnFieldOfStudyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentOnFieldOfStudy
     */
    select?: StudentOnFieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentOnFieldOfStudyInclude<ExtArgs> | null
    /**
     * The data needed to create a StudentOnFieldOfStudy.
     */
    data: XOR<StudentOnFieldOfStudyCreateInput, StudentOnFieldOfStudyUncheckedCreateInput>
  }


  /**
   * StudentOnFieldOfStudy createMany
   */
  export type StudentOnFieldOfStudyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudentOnFieldOfStudies.
     */
    data: StudentOnFieldOfStudyCreateManyInput | StudentOnFieldOfStudyCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * StudentOnFieldOfStudy update
   */
  export type StudentOnFieldOfStudyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentOnFieldOfStudy
     */
    select?: StudentOnFieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentOnFieldOfStudyInclude<ExtArgs> | null
    /**
     * The data needed to update a StudentOnFieldOfStudy.
     */
    data: XOR<StudentOnFieldOfStudyUpdateInput, StudentOnFieldOfStudyUncheckedUpdateInput>
    /**
     * Choose, which StudentOnFieldOfStudy to update.
     */
    where: StudentOnFieldOfStudyWhereUniqueInput
  }


  /**
   * StudentOnFieldOfStudy updateMany
   */
  export type StudentOnFieldOfStudyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudentOnFieldOfStudies.
     */
    data: XOR<StudentOnFieldOfStudyUpdateManyMutationInput, StudentOnFieldOfStudyUncheckedUpdateManyInput>
    /**
     * Filter which StudentOnFieldOfStudies to update
     */
    where?: StudentOnFieldOfStudyWhereInput
  }


  /**
   * StudentOnFieldOfStudy upsert
   */
  export type StudentOnFieldOfStudyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentOnFieldOfStudy
     */
    select?: StudentOnFieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentOnFieldOfStudyInclude<ExtArgs> | null
    /**
     * The filter to search for the StudentOnFieldOfStudy to update in case it exists.
     */
    where: StudentOnFieldOfStudyWhereUniqueInput
    /**
     * In case the StudentOnFieldOfStudy found by the `where` argument doesn't exist, create a new StudentOnFieldOfStudy with this data.
     */
    create: XOR<StudentOnFieldOfStudyCreateInput, StudentOnFieldOfStudyUncheckedCreateInput>
    /**
     * In case the StudentOnFieldOfStudy was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentOnFieldOfStudyUpdateInput, StudentOnFieldOfStudyUncheckedUpdateInput>
  }


  /**
   * StudentOnFieldOfStudy delete
   */
  export type StudentOnFieldOfStudyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentOnFieldOfStudy
     */
    select?: StudentOnFieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentOnFieldOfStudyInclude<ExtArgs> | null
    /**
     * Filter which StudentOnFieldOfStudy to delete.
     */
    where: StudentOnFieldOfStudyWhereUniqueInput
  }


  /**
   * StudentOnFieldOfStudy deleteMany
   */
  export type StudentOnFieldOfStudyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentOnFieldOfStudies to delete
     */
    where?: StudentOnFieldOfStudyWhereInput
  }


  /**
   * StudentOnFieldOfStudy without action
   */
  export type StudentOnFieldOfStudyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentOnFieldOfStudy
     */
    select?: StudentOnFieldOfStudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentOnFieldOfStudyInclude<ExtArgs> | null
  }



  /**
   * Model Course
   */

  export type AggregateCourse = {
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  export type CourseAvgAggregateOutputType = {
    id: number | null
    ects: number | null
    hoursOfLecture: number | null
    hoursOfLabs: number | null
    numberOfExams: number | null
    fieldOfStudyId: number | null
    studyLevelId: number | null
  }

  export type CourseSumAggregateOutputType = {
    id: number | null
    ects: number | null
    hoursOfLecture: number | null
    hoursOfLabs: number | null
    numberOfExams: number | null
    fieldOfStudyId: number | null
    studyLevelId: number | null
  }

  export type CourseMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    ects: number | null
    hoursOfLecture: number | null
    hoursOfLabs: number | null
    numberOfExams: number | null
    isAvailable: boolean | null
    fieldOfStudyId: number | null
    studyLevelId: number | null
  }

  export type CourseMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    ects: number | null
    hoursOfLecture: number | null
    hoursOfLabs: number | null
    numberOfExams: number | null
    isAvailable: boolean | null
    fieldOfStudyId: number | null
    studyLevelId: number | null
  }

  export type CourseCountAggregateOutputType = {
    id: number
    name: number
    description: number
    ects: number
    hoursOfLecture: number
    hoursOfLabs: number
    numberOfExams: number
    isAvailable: number
    fieldOfStudyId: number
    studyLevelId: number
    _all: number
  }


  export type CourseAvgAggregateInputType = {
    id?: true
    ects?: true
    hoursOfLecture?: true
    hoursOfLabs?: true
    numberOfExams?: true
    fieldOfStudyId?: true
    studyLevelId?: true
  }

  export type CourseSumAggregateInputType = {
    id?: true
    ects?: true
    hoursOfLecture?: true
    hoursOfLabs?: true
    numberOfExams?: true
    fieldOfStudyId?: true
    studyLevelId?: true
  }

  export type CourseMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    ects?: true
    hoursOfLecture?: true
    hoursOfLabs?: true
    numberOfExams?: true
    isAvailable?: true
    fieldOfStudyId?: true
    studyLevelId?: true
  }

  export type CourseMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    ects?: true
    hoursOfLecture?: true
    hoursOfLabs?: true
    numberOfExams?: true
    isAvailable?: true
    fieldOfStudyId?: true
    studyLevelId?: true
  }

  export type CourseCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    ects?: true
    hoursOfLecture?: true
    hoursOfLabs?: true
    numberOfExams?: true
    isAvailable?: true
    fieldOfStudyId?: true
    studyLevelId?: true
    _all?: true
  }

  export type CourseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Course to aggregate.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Courses
    **/
    _count?: true | CourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseMaxAggregateInputType
  }

  export type GetCourseAggregateType<T extends CourseAggregateArgs> = {
        [P in keyof T & keyof AggregateCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourse[P]>
      : GetScalarType<T[P], AggregateCourse[P]>
  }




  export type CourseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithAggregationInput | CourseOrderByWithAggregationInput[]
    by: CourseScalarFieldEnum[] | CourseScalarFieldEnum
    having?: CourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseCountAggregateInputType | true
    _avg?: CourseAvgAggregateInputType
    _sum?: CourseSumAggregateInputType
    _min?: CourseMinAggregateInputType
    _max?: CourseMaxAggregateInputType
  }

  export type CourseGroupByOutputType = {
    id: number
    name: string
    description: string
    ects: number
    hoursOfLecture: number
    hoursOfLabs: number
    numberOfExams: number
    isAvailable: boolean
    fieldOfStudyId: number
    studyLevelId: number
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  type GetCourseGroupByPayload<T extends CourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseGroupByOutputType[P]>
            : GetScalarType<T[P], CourseGroupByOutputType[P]>
        }
      >
    >


  export type CourseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    ects?: boolean
    hoursOfLecture?: boolean
    hoursOfLabs?: boolean
    numberOfExams?: boolean
    isAvailable?: boolean
    fieldOfStudyId?: boolean
    studyLevelId?: boolean
    FieldOfStudy?: boolean | FieldOfStudyDefaultArgs<ExtArgs>
    StudyLevel?: boolean | StudyLevelDefaultArgs<ExtArgs>
    Students?: boolean | Course$StudentsArgs<ExtArgs>
    Comments?: boolean | Course$CommentsArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    ects?: boolean
    hoursOfLecture?: boolean
    hoursOfLabs?: boolean
    numberOfExams?: boolean
    isAvailable?: boolean
    fieldOfStudyId?: boolean
    studyLevelId?: boolean
  }

  export type CourseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    FieldOfStudy?: boolean | FieldOfStudyDefaultArgs<ExtArgs>
    StudyLevel?: boolean | StudyLevelDefaultArgs<ExtArgs>
    Students?: boolean | Course$StudentsArgs<ExtArgs>
    Comments?: boolean | Course$CommentsArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CoursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Course"
    objects: {
      FieldOfStudy: Prisma.$FieldOfStudyPayload<ExtArgs>
      StudyLevel: Prisma.$StudyLevelPayload<ExtArgs>
      Students: Prisma.$StudentOnCoursePayload<ExtArgs>[]
      Comments: Prisma.$CommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string
      ects: number
      hoursOfLecture: number
      hoursOfLabs: number
      numberOfExams: number
      isAvailable: boolean
      fieldOfStudyId: number
      studyLevelId: number
    }, ExtArgs["result"]["course"]>
    composites: {}
  }


  type CourseGetPayload<S extends boolean | null | undefined | CourseDefaultArgs> = $Result.GetResult<Prisma.$CoursePayload, S>

  type CourseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CourseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CourseCountAggregateInputType | true
    }

  export interface CourseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Course'], meta: { name: 'Course' } }
    /**
     * Find zero or one Course that matches the filter.
     * @param {CourseFindUniqueArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CourseFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CourseFindUniqueArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Course that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CourseFindUniqueOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CourseFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Course that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CourseFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseFindFirstArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Course that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CourseFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.course.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.course.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseWithIdOnly = await prisma.course.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CourseFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Course.
     * @param {CourseCreateArgs} args - Arguments to create a Course.
     * @example
     * // Create one Course
     * const Course = await prisma.course.create({
     *   data: {
     *     // ... data to create a Course
     *   }
     * })
     * 
    **/
    create<T extends CourseCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CourseCreateArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Courses.
     *     @param {CourseCreateManyArgs} args - Arguments to create many Courses.
     *     @example
     *     // Create many Courses
     *     const course = await prisma.course.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CourseCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Course.
     * @param {CourseDeleteArgs} args - Arguments to delete one Course.
     * @example
     * // Delete one Course
     * const Course = await prisma.course.delete({
     *   where: {
     *     // ... filter to delete one Course
     *   }
     * })
     * 
    **/
    delete<T extends CourseDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CourseDeleteArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Course.
     * @param {CourseUpdateArgs} args - Arguments to update one Course.
     * @example
     * // Update one Course
     * const course = await prisma.course.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CourseUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CourseUpdateArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Courses.
     * @param {CourseDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.course.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CourseDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CourseUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CourseUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Course.
     * @param {CourseUpsertArgs} args - Arguments to update or create a Course.
     * @example
     * // Update or create a Course
     * const course = await prisma.course.upsert({
     *   create: {
     *     // ... data to create a Course
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Course we want to update
     *   }
     * })
    **/
    upsert<T extends CourseUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CourseUpsertArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.course.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends CourseCountArgs>(
      args?: Subset<T, CourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseAggregateArgs>(args: Subset<T, CourseAggregateArgs>): Prisma.PrismaPromise<GetCourseAggregateType<T>>

    /**
     * Group by Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseGroupByArgs['orderBy'] }
        : { orderBy?: CourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Course model
   */
  readonly fields: CourseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Course.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    FieldOfStudy<T extends FieldOfStudyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FieldOfStudyDefaultArgs<ExtArgs>>): Prisma__FieldOfStudyClient<$Result.GetResult<Prisma.$FieldOfStudyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    StudyLevel<T extends StudyLevelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudyLevelDefaultArgs<ExtArgs>>): Prisma__StudyLevelClient<$Result.GetResult<Prisma.$StudyLevelPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Students<T extends Course$StudentsArgs<ExtArgs> = {}>(args?: Subset<T, Course$StudentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentOnCoursePayload<ExtArgs>, T, 'findMany'> | Null>;

    Comments<T extends Course$CommentsArgs<ExtArgs> = {}>(args?: Subset<T, Course$CommentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Course model
   */ 
  interface CourseFieldRefs {
    readonly id: FieldRef<"Course", 'Int'>
    readonly name: FieldRef<"Course", 'String'>
    readonly description: FieldRef<"Course", 'String'>
    readonly ects: FieldRef<"Course", 'Int'>
    readonly hoursOfLecture: FieldRef<"Course", 'Float'>
    readonly hoursOfLabs: FieldRef<"Course", 'Float'>
    readonly numberOfExams: FieldRef<"Course", 'Int'>
    readonly isAvailable: FieldRef<"Course", 'Boolean'>
    readonly fieldOfStudyId: FieldRef<"Course", 'Int'>
    readonly studyLevelId: FieldRef<"Course", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Course findUnique
   */
  export type CourseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }


  /**
   * Course findUniqueOrThrow
   */
  export type CourseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }


  /**
   * Course findFirst
   */
  export type CourseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }


  /**
   * Course findFirstOrThrow
   */
  export type CourseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }


  /**
   * Course findMany
   */
  export type CourseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }


  /**
   * Course create
   */
  export type CourseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to create a Course.
     */
    data: XOR<CourseCreateInput, CourseUncheckedCreateInput>
  }


  /**
   * Course createMany
   */
  export type CourseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Course update
   */
  export type CourseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to update a Course.
     */
    data: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
    /**
     * Choose, which Course to update.
     */
    where: CourseWhereUniqueInput
  }


  /**
   * Course updateMany
   */
  export type CourseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
  }


  /**
   * Course upsert
   */
  export type CourseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The filter to search for the Course to update in case it exists.
     */
    where: CourseWhereUniqueInput
    /**
     * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
     */
    create: XOR<CourseCreateInput, CourseUncheckedCreateInput>
    /**
     * In case the Course was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
  }


  /**
   * Course delete
   */
  export type CourseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter which Course to delete.
     */
    where: CourseWhereUniqueInput
  }


  /**
   * Course deleteMany
   */
  export type CourseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Courses to delete
     */
    where?: CourseWhereInput
  }


  /**
   * Course.Students
   */
  export type Course$StudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentOnCourse
     */
    select?: StudentOnCourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentOnCourseInclude<ExtArgs> | null
    where?: StudentOnCourseWhereInput
    orderBy?: StudentOnCourseOrderByWithRelationInput | StudentOnCourseOrderByWithRelationInput[]
    cursor?: StudentOnCourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentOnCourseScalarFieldEnum | StudentOnCourseScalarFieldEnum[]
  }


  /**
   * Course.Comments
   */
  export type Course$CommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }


  /**
   * Course without action
   */
  export type CourseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
  }



  /**
   * Model StudentOnCourse
   */

  export type AggregateStudentOnCourse = {
    _count: StudentOnCourseCountAggregateOutputType | null
    _avg: StudentOnCourseAvgAggregateOutputType | null
    _sum: StudentOnCourseSumAggregateOutputType | null
    _min: StudentOnCourseMinAggregateOutputType | null
    _max: StudentOnCourseMaxAggregateOutputType | null
  }

  export type StudentOnCourseAvgAggregateOutputType = {
    studentUserId: number | null
    courseId: number | null
  }

  export type StudentOnCourseSumAggregateOutputType = {
    studentUserId: number | null
    courseId: number | null
  }

  export type StudentOnCourseMinAggregateOutputType = {
    studentUserId: number | null
    courseId: number | null
  }

  export type StudentOnCourseMaxAggregateOutputType = {
    studentUserId: number | null
    courseId: number | null
  }

  export type StudentOnCourseCountAggregateOutputType = {
    studentUserId: number
    courseId: number
    _all: number
  }


  export type StudentOnCourseAvgAggregateInputType = {
    studentUserId?: true
    courseId?: true
  }

  export type StudentOnCourseSumAggregateInputType = {
    studentUserId?: true
    courseId?: true
  }

  export type StudentOnCourseMinAggregateInputType = {
    studentUserId?: true
    courseId?: true
  }

  export type StudentOnCourseMaxAggregateInputType = {
    studentUserId?: true
    courseId?: true
  }

  export type StudentOnCourseCountAggregateInputType = {
    studentUserId?: true
    courseId?: true
    _all?: true
  }

  export type StudentOnCourseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentOnCourse to aggregate.
     */
    where?: StudentOnCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentOnCourses to fetch.
     */
    orderBy?: StudentOnCourseOrderByWithRelationInput | StudentOnCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentOnCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentOnCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentOnCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudentOnCourses
    **/
    _count?: true | StudentOnCourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentOnCourseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentOnCourseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentOnCourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentOnCourseMaxAggregateInputType
  }

  export type GetStudentOnCourseAggregateType<T extends StudentOnCourseAggregateArgs> = {
        [P in keyof T & keyof AggregateStudentOnCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudentOnCourse[P]>
      : GetScalarType<T[P], AggregateStudentOnCourse[P]>
  }




  export type StudentOnCourseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentOnCourseWhereInput
    orderBy?: StudentOnCourseOrderByWithAggregationInput | StudentOnCourseOrderByWithAggregationInput[]
    by: StudentOnCourseScalarFieldEnum[] | StudentOnCourseScalarFieldEnum
    having?: StudentOnCourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentOnCourseCountAggregateInputType | true
    _avg?: StudentOnCourseAvgAggregateInputType
    _sum?: StudentOnCourseSumAggregateInputType
    _min?: StudentOnCourseMinAggregateInputType
    _max?: StudentOnCourseMaxAggregateInputType
  }

  export type StudentOnCourseGroupByOutputType = {
    studentUserId: number
    courseId: number
    _count: StudentOnCourseCountAggregateOutputType | null
    _avg: StudentOnCourseAvgAggregateOutputType | null
    _sum: StudentOnCourseSumAggregateOutputType | null
    _min: StudentOnCourseMinAggregateOutputType | null
    _max: StudentOnCourseMaxAggregateOutputType | null
  }

  type GetStudentOnCourseGroupByPayload<T extends StudentOnCourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentOnCourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentOnCourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentOnCourseGroupByOutputType[P]>
            : GetScalarType<T[P], StudentOnCourseGroupByOutputType[P]>
        }
      >
    >


  export type StudentOnCourseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    studentUserId?: boolean
    courseId?: boolean
    Student?: boolean | StudentDefaultArgs<ExtArgs>
    Course?: boolean | CourseDefaultArgs<ExtArgs>
    Rate?: boolean | StudentOnCourse$RateArgs<ExtArgs>
  }, ExtArgs["result"]["studentOnCourse"]>

  export type StudentOnCourseSelectScalar = {
    studentUserId?: boolean
    courseId?: boolean
  }

  export type StudentOnCourseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Student?: boolean | StudentDefaultArgs<ExtArgs>
    Course?: boolean | CourseDefaultArgs<ExtArgs>
    Rate?: boolean | StudentOnCourse$RateArgs<ExtArgs>
  }


  export type $StudentOnCoursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudentOnCourse"
    objects: {
      Student: Prisma.$StudentPayload<ExtArgs>
      Course: Prisma.$CoursePayload<ExtArgs>
      Rate: Prisma.$RatePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      studentUserId: number
      courseId: number
    }, ExtArgs["result"]["studentOnCourse"]>
    composites: {}
  }


  type StudentOnCourseGetPayload<S extends boolean | null | undefined | StudentOnCourseDefaultArgs> = $Result.GetResult<Prisma.$StudentOnCoursePayload, S>

  type StudentOnCourseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StudentOnCourseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StudentOnCourseCountAggregateInputType | true
    }

  export interface StudentOnCourseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudentOnCourse'], meta: { name: 'StudentOnCourse' } }
    /**
     * Find zero or one StudentOnCourse that matches the filter.
     * @param {StudentOnCourseFindUniqueArgs} args - Arguments to find a StudentOnCourse
     * @example
     * // Get one StudentOnCourse
     * const studentOnCourse = await prisma.studentOnCourse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StudentOnCourseFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StudentOnCourseFindUniqueArgs<ExtArgs>>
    ): Prisma__StudentOnCourseClient<$Result.GetResult<Prisma.$StudentOnCoursePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one StudentOnCourse that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StudentOnCourseFindUniqueOrThrowArgs} args - Arguments to find a StudentOnCourse
     * @example
     * // Get one StudentOnCourse
     * const studentOnCourse = await prisma.studentOnCourse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StudentOnCourseFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentOnCourseFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StudentOnCourseClient<$Result.GetResult<Prisma.$StudentOnCoursePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first StudentOnCourse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentOnCourseFindFirstArgs} args - Arguments to find a StudentOnCourse
     * @example
     * // Get one StudentOnCourse
     * const studentOnCourse = await prisma.studentOnCourse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StudentOnCourseFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentOnCourseFindFirstArgs<ExtArgs>>
    ): Prisma__StudentOnCourseClient<$Result.GetResult<Prisma.$StudentOnCoursePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first StudentOnCourse that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentOnCourseFindFirstOrThrowArgs} args - Arguments to find a StudentOnCourse
     * @example
     * // Get one StudentOnCourse
     * const studentOnCourse = await prisma.studentOnCourse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StudentOnCourseFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentOnCourseFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StudentOnCourseClient<$Result.GetResult<Prisma.$StudentOnCoursePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more StudentOnCourses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentOnCourseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudentOnCourses
     * const studentOnCourses = await prisma.studentOnCourse.findMany()
     * 
     * // Get first 10 StudentOnCourses
     * const studentOnCourses = await prisma.studentOnCourse.findMany({ take: 10 })
     * 
     * // Only select the `studentUserId`
     * const studentOnCourseWithStudentUserIdOnly = await prisma.studentOnCourse.findMany({ select: { studentUserId: true } })
     * 
    **/
    findMany<T extends StudentOnCourseFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentOnCourseFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentOnCoursePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a StudentOnCourse.
     * @param {StudentOnCourseCreateArgs} args - Arguments to create a StudentOnCourse.
     * @example
     * // Create one StudentOnCourse
     * const StudentOnCourse = await prisma.studentOnCourse.create({
     *   data: {
     *     // ... data to create a StudentOnCourse
     *   }
     * })
     * 
    **/
    create<T extends StudentOnCourseCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StudentOnCourseCreateArgs<ExtArgs>>
    ): Prisma__StudentOnCourseClient<$Result.GetResult<Prisma.$StudentOnCoursePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many StudentOnCourses.
     *     @param {StudentOnCourseCreateManyArgs} args - Arguments to create many StudentOnCourses.
     *     @example
     *     // Create many StudentOnCourses
     *     const studentOnCourse = await prisma.studentOnCourse.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StudentOnCourseCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentOnCourseCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a StudentOnCourse.
     * @param {StudentOnCourseDeleteArgs} args - Arguments to delete one StudentOnCourse.
     * @example
     * // Delete one StudentOnCourse
     * const StudentOnCourse = await prisma.studentOnCourse.delete({
     *   where: {
     *     // ... filter to delete one StudentOnCourse
     *   }
     * })
     * 
    **/
    delete<T extends StudentOnCourseDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StudentOnCourseDeleteArgs<ExtArgs>>
    ): Prisma__StudentOnCourseClient<$Result.GetResult<Prisma.$StudentOnCoursePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one StudentOnCourse.
     * @param {StudentOnCourseUpdateArgs} args - Arguments to update one StudentOnCourse.
     * @example
     * // Update one StudentOnCourse
     * const studentOnCourse = await prisma.studentOnCourse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StudentOnCourseUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StudentOnCourseUpdateArgs<ExtArgs>>
    ): Prisma__StudentOnCourseClient<$Result.GetResult<Prisma.$StudentOnCoursePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more StudentOnCourses.
     * @param {StudentOnCourseDeleteManyArgs} args - Arguments to filter StudentOnCourses to delete.
     * @example
     * // Delete a few StudentOnCourses
     * const { count } = await prisma.studentOnCourse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StudentOnCourseDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentOnCourseDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentOnCourses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentOnCourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudentOnCourses
     * const studentOnCourse = await prisma.studentOnCourse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StudentOnCourseUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StudentOnCourseUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StudentOnCourse.
     * @param {StudentOnCourseUpsertArgs} args - Arguments to update or create a StudentOnCourse.
     * @example
     * // Update or create a StudentOnCourse
     * const studentOnCourse = await prisma.studentOnCourse.upsert({
     *   create: {
     *     // ... data to create a StudentOnCourse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudentOnCourse we want to update
     *   }
     * })
    **/
    upsert<T extends StudentOnCourseUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StudentOnCourseUpsertArgs<ExtArgs>>
    ): Prisma__StudentOnCourseClient<$Result.GetResult<Prisma.$StudentOnCoursePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of StudentOnCourses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentOnCourseCountArgs} args - Arguments to filter StudentOnCourses to count.
     * @example
     * // Count the number of StudentOnCourses
     * const count = await prisma.studentOnCourse.count({
     *   where: {
     *     // ... the filter for the StudentOnCourses we want to count
     *   }
     * })
    **/
    count<T extends StudentOnCourseCountArgs>(
      args?: Subset<T, StudentOnCourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentOnCourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudentOnCourse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentOnCourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentOnCourseAggregateArgs>(args: Subset<T, StudentOnCourseAggregateArgs>): Prisma.PrismaPromise<GetStudentOnCourseAggregateType<T>>

    /**
     * Group by StudentOnCourse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentOnCourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentOnCourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentOnCourseGroupByArgs['orderBy'] }
        : { orderBy?: StudentOnCourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentOnCourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentOnCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudentOnCourse model
   */
  readonly fields: StudentOnCourseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudentOnCourse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentOnCourseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Rate<T extends StudentOnCourse$RateArgs<ExtArgs> = {}>(args?: Subset<T, StudentOnCourse$RateArgs<ExtArgs>>): Prisma__RateClient<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the StudentOnCourse model
   */ 
  interface StudentOnCourseFieldRefs {
    readonly studentUserId: FieldRef<"StudentOnCourse", 'Int'>
    readonly courseId: FieldRef<"StudentOnCourse", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * StudentOnCourse findUnique
   */
  export type StudentOnCourseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentOnCourse
     */
    select?: StudentOnCourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentOnCourseInclude<ExtArgs> | null
    /**
     * Filter, which StudentOnCourse to fetch.
     */
    where: StudentOnCourseWhereUniqueInput
  }


  /**
   * StudentOnCourse findUniqueOrThrow
   */
  export type StudentOnCourseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentOnCourse
     */
    select?: StudentOnCourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentOnCourseInclude<ExtArgs> | null
    /**
     * Filter, which StudentOnCourse to fetch.
     */
    where: StudentOnCourseWhereUniqueInput
  }


  /**
   * StudentOnCourse findFirst
   */
  export type StudentOnCourseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentOnCourse
     */
    select?: StudentOnCourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentOnCourseInclude<ExtArgs> | null
    /**
     * Filter, which StudentOnCourse to fetch.
     */
    where?: StudentOnCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentOnCourses to fetch.
     */
    orderBy?: StudentOnCourseOrderByWithRelationInput | StudentOnCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentOnCourses.
     */
    cursor?: StudentOnCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentOnCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentOnCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentOnCourses.
     */
    distinct?: StudentOnCourseScalarFieldEnum | StudentOnCourseScalarFieldEnum[]
  }


  /**
   * StudentOnCourse findFirstOrThrow
   */
  export type StudentOnCourseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentOnCourse
     */
    select?: StudentOnCourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentOnCourseInclude<ExtArgs> | null
    /**
     * Filter, which StudentOnCourse to fetch.
     */
    where?: StudentOnCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentOnCourses to fetch.
     */
    orderBy?: StudentOnCourseOrderByWithRelationInput | StudentOnCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentOnCourses.
     */
    cursor?: StudentOnCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentOnCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentOnCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentOnCourses.
     */
    distinct?: StudentOnCourseScalarFieldEnum | StudentOnCourseScalarFieldEnum[]
  }


  /**
   * StudentOnCourse findMany
   */
  export type StudentOnCourseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentOnCourse
     */
    select?: StudentOnCourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentOnCourseInclude<ExtArgs> | null
    /**
     * Filter, which StudentOnCourses to fetch.
     */
    where?: StudentOnCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentOnCourses to fetch.
     */
    orderBy?: StudentOnCourseOrderByWithRelationInput | StudentOnCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudentOnCourses.
     */
    cursor?: StudentOnCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentOnCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentOnCourses.
     */
    skip?: number
    distinct?: StudentOnCourseScalarFieldEnum | StudentOnCourseScalarFieldEnum[]
  }


  /**
   * StudentOnCourse create
   */
  export type StudentOnCourseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentOnCourse
     */
    select?: StudentOnCourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentOnCourseInclude<ExtArgs> | null
    /**
     * The data needed to create a StudentOnCourse.
     */
    data: XOR<StudentOnCourseCreateInput, StudentOnCourseUncheckedCreateInput>
  }


  /**
   * StudentOnCourse createMany
   */
  export type StudentOnCourseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudentOnCourses.
     */
    data: StudentOnCourseCreateManyInput | StudentOnCourseCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * StudentOnCourse update
   */
  export type StudentOnCourseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentOnCourse
     */
    select?: StudentOnCourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentOnCourseInclude<ExtArgs> | null
    /**
     * The data needed to update a StudentOnCourse.
     */
    data: XOR<StudentOnCourseUpdateInput, StudentOnCourseUncheckedUpdateInput>
    /**
     * Choose, which StudentOnCourse to update.
     */
    where: StudentOnCourseWhereUniqueInput
  }


  /**
   * StudentOnCourse updateMany
   */
  export type StudentOnCourseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudentOnCourses.
     */
    data: XOR<StudentOnCourseUpdateManyMutationInput, StudentOnCourseUncheckedUpdateManyInput>
    /**
     * Filter which StudentOnCourses to update
     */
    where?: StudentOnCourseWhereInput
  }


  /**
   * StudentOnCourse upsert
   */
  export type StudentOnCourseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentOnCourse
     */
    select?: StudentOnCourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentOnCourseInclude<ExtArgs> | null
    /**
     * The filter to search for the StudentOnCourse to update in case it exists.
     */
    where: StudentOnCourseWhereUniqueInput
    /**
     * In case the StudentOnCourse found by the `where` argument doesn't exist, create a new StudentOnCourse with this data.
     */
    create: XOR<StudentOnCourseCreateInput, StudentOnCourseUncheckedCreateInput>
    /**
     * In case the StudentOnCourse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentOnCourseUpdateInput, StudentOnCourseUncheckedUpdateInput>
  }


  /**
   * StudentOnCourse delete
   */
  export type StudentOnCourseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentOnCourse
     */
    select?: StudentOnCourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentOnCourseInclude<ExtArgs> | null
    /**
     * Filter which StudentOnCourse to delete.
     */
    where: StudentOnCourseWhereUniqueInput
  }


  /**
   * StudentOnCourse deleteMany
   */
  export type StudentOnCourseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentOnCourses to delete
     */
    where?: StudentOnCourseWhereInput
  }


  /**
   * StudentOnCourse.Rate
   */
  export type StudentOnCourse$RateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateInclude<ExtArgs> | null
    where?: RateWhereInput
  }


  /**
   * StudentOnCourse without action
   */
  export type StudentOnCourseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentOnCourse
     */
    select?: StudentOnCourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentOnCourseInclude<ExtArgs> | null
  }



  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentAvgAggregateOutputType = {
    id: number | null
    studentUserId: number | null
    courseId: number | null
  }

  export type CommentSumAggregateOutputType = {
    id: number | null
    studentUserId: number | null
    courseId: number | null
  }

  export type CommentMinAggregateOutputType = {
    id: number | null
    content: string | null
    date: Date | null
    studentUserId: number | null
    courseId: number | null
  }

  export type CommentMaxAggregateOutputType = {
    id: number | null
    content: string | null
    date: Date | null
    studentUserId: number | null
    courseId: number | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    content: number
    date: number
    studentUserId: number
    courseId: number
    _all: number
  }


  export type CommentAvgAggregateInputType = {
    id?: true
    studentUserId?: true
    courseId?: true
  }

  export type CommentSumAggregateInputType = {
    id?: true
    studentUserId?: true
    courseId?: true
  }

  export type CommentMinAggregateInputType = {
    id?: true
    content?: true
    date?: true
    studentUserId?: true
    courseId?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    content?: true
    date?: true
    studentUserId?: true
    courseId?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    content?: true
    date?: true
    studentUserId?: true
    courseId?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _avg?: CommentAvgAggregateInputType
    _sum?: CommentSumAggregateInputType
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: number
    content: string
    date: Date
    studentUserId: number
    courseId: number
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    date?: boolean
    studentUserId?: boolean
    courseId?: boolean
    Student?: boolean | StudentDefaultArgs<ExtArgs>
    Course?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    content?: boolean
    date?: boolean
    studentUserId?: boolean
    courseId?: boolean
  }

  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Student?: boolean | StudentDefaultArgs<ExtArgs>
    Course?: boolean | CourseDefaultArgs<ExtArgs>
  }


  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      Student: Prisma.$StudentPayload<ExtArgs>
      Course: Prisma.$CoursePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      content: string
      date: Date
      studentUserId: number
      courseId: number
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }


  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CommentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Comment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CommentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CommentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
    **/
    create<T extends CommentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CommentCreateArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Comments.
     *     @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     *     @example
     *     // Create many Comments
     *     const comment = await prisma.comment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CommentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
    **/
    delete<T extends CommentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
    **/
    upsert<T extends CommentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Comment model
   */ 
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'Int'>
    readonly content: FieldRef<"Comment", 'String'>
    readonly date: FieldRef<"Comment", 'DateTime'>
    readonly studentUserId: FieldRef<"Comment", 'Int'>
    readonly courseId: FieldRef<"Comment", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }


  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }


  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }


  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }


  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
  }


  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }


  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
  }


  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
  }



  /**
   * Model Rate
   */

  export type AggregateRate = {
    _count: RateCountAggregateOutputType | null
    _avg: RateAvgAggregateOutputType | null
    _sum: RateSumAggregateOutputType | null
    _min: RateMinAggregateOutputType | null
    _max: RateMaxAggregateOutputType | null
  }

  export type RateAvgAggregateOutputType = {
    studentId: number | null
    courseId: number | null
    rate: number | null
  }

  export type RateSumAggregateOutputType = {
    studentId: number | null
    courseId: number | null
    rate: number | null
  }

  export type RateMinAggregateOutputType = {
    studentId: number | null
    courseId: number | null
    rate: number | null
  }

  export type RateMaxAggregateOutputType = {
    studentId: number | null
    courseId: number | null
    rate: number | null
  }

  export type RateCountAggregateOutputType = {
    studentId: number
    courseId: number
    rate: number
    _all: number
  }


  export type RateAvgAggregateInputType = {
    studentId?: true
    courseId?: true
    rate?: true
  }

  export type RateSumAggregateInputType = {
    studentId?: true
    courseId?: true
    rate?: true
  }

  export type RateMinAggregateInputType = {
    studentId?: true
    courseId?: true
    rate?: true
  }

  export type RateMaxAggregateInputType = {
    studentId?: true
    courseId?: true
    rate?: true
  }

  export type RateCountAggregateInputType = {
    studentId?: true
    courseId?: true
    rate?: true
    _all?: true
  }

  export type RateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rate to aggregate.
     */
    where?: RateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rates to fetch.
     */
    orderBy?: RateOrderByWithRelationInput | RateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rates
    **/
    _count?: true | RateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RateMaxAggregateInputType
  }

  export type GetRateAggregateType<T extends RateAggregateArgs> = {
        [P in keyof T & keyof AggregateRate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRate[P]>
      : GetScalarType<T[P], AggregateRate[P]>
  }




  export type RateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RateWhereInput
    orderBy?: RateOrderByWithAggregationInput | RateOrderByWithAggregationInput[]
    by: RateScalarFieldEnum[] | RateScalarFieldEnum
    having?: RateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RateCountAggregateInputType | true
    _avg?: RateAvgAggregateInputType
    _sum?: RateSumAggregateInputType
    _min?: RateMinAggregateInputType
    _max?: RateMaxAggregateInputType
  }

  export type RateGroupByOutputType = {
    studentId: number
    courseId: number
    rate: number
    _count: RateCountAggregateOutputType | null
    _avg: RateAvgAggregateOutputType | null
    _sum: RateSumAggregateOutputType | null
    _min: RateMinAggregateOutputType | null
    _max: RateMaxAggregateOutputType | null
  }

  type GetRateGroupByPayload<T extends RateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RateGroupByOutputType[P]>
            : GetScalarType<T[P], RateGroupByOutputType[P]>
        }
      >
    >


  export type RateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    studentId?: boolean
    courseId?: boolean
    rate?: boolean
    StudentOnCourse?: boolean | StudentOnCourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rate"]>

  export type RateSelectScalar = {
    studentId?: boolean
    courseId?: boolean
    rate?: boolean
  }

  export type RateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    StudentOnCourse?: boolean | StudentOnCourseDefaultArgs<ExtArgs>
  }


  export type $RatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Rate"
    objects: {
      StudentOnCourse: Prisma.$StudentOnCoursePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      studentId: number
      courseId: number
      rate: number
    }, ExtArgs["result"]["rate"]>
    composites: {}
  }


  type RateGetPayload<S extends boolean | null | undefined | RateDefaultArgs> = $Result.GetResult<Prisma.$RatePayload, S>

  type RateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RateFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RateCountAggregateInputType | true
    }

  export interface RateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Rate'], meta: { name: 'Rate' } }
    /**
     * Find zero or one Rate that matches the filter.
     * @param {RateFindUniqueArgs} args - Arguments to find a Rate
     * @example
     * // Get one Rate
     * const rate = await prisma.rate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RateFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RateFindUniqueArgs<ExtArgs>>
    ): Prisma__RateClient<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Rate that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RateFindUniqueOrThrowArgs} args - Arguments to find a Rate
     * @example
     * // Get one Rate
     * const rate = await prisma.rate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RateFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RateFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RateClient<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Rate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateFindFirstArgs} args - Arguments to find a Rate
     * @example
     * // Get one Rate
     * const rate = await prisma.rate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RateFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RateFindFirstArgs<ExtArgs>>
    ): Prisma__RateClient<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Rate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateFindFirstOrThrowArgs} args - Arguments to find a Rate
     * @example
     * // Get one Rate
     * const rate = await prisma.rate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RateFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RateFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RateClient<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Rates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rates
     * const rates = await prisma.rate.findMany()
     * 
     * // Get first 10 Rates
     * const rates = await prisma.rate.findMany({ take: 10 })
     * 
     * // Only select the `studentId`
     * const rateWithStudentIdOnly = await prisma.rate.findMany({ select: { studentId: true } })
     * 
    **/
    findMany<T extends RateFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RateFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Rate.
     * @param {RateCreateArgs} args - Arguments to create a Rate.
     * @example
     * // Create one Rate
     * const Rate = await prisma.rate.create({
     *   data: {
     *     // ... data to create a Rate
     *   }
     * })
     * 
    **/
    create<T extends RateCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RateCreateArgs<ExtArgs>>
    ): Prisma__RateClient<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Rates.
     *     @param {RateCreateManyArgs} args - Arguments to create many Rates.
     *     @example
     *     // Create many Rates
     *     const rate = await prisma.rate.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RateCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RateCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Rate.
     * @param {RateDeleteArgs} args - Arguments to delete one Rate.
     * @example
     * // Delete one Rate
     * const Rate = await prisma.rate.delete({
     *   where: {
     *     // ... filter to delete one Rate
     *   }
     * })
     * 
    **/
    delete<T extends RateDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RateDeleteArgs<ExtArgs>>
    ): Prisma__RateClient<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Rate.
     * @param {RateUpdateArgs} args - Arguments to update one Rate.
     * @example
     * // Update one Rate
     * const rate = await prisma.rate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RateUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RateUpdateArgs<ExtArgs>>
    ): Prisma__RateClient<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Rates.
     * @param {RateDeleteManyArgs} args - Arguments to filter Rates to delete.
     * @example
     * // Delete a few Rates
     * const { count } = await prisma.rate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RateDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RateDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rates
     * const rate = await prisma.rate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RateUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RateUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Rate.
     * @param {RateUpsertArgs} args - Arguments to update or create a Rate.
     * @example
     * // Update or create a Rate
     * const rate = await prisma.rate.upsert({
     *   create: {
     *     // ... data to create a Rate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rate we want to update
     *   }
     * })
    **/
    upsert<T extends RateUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RateUpsertArgs<ExtArgs>>
    ): Prisma__RateClient<$Result.GetResult<Prisma.$RatePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Rates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateCountArgs} args - Arguments to filter Rates to count.
     * @example
     * // Count the number of Rates
     * const count = await prisma.rate.count({
     *   where: {
     *     // ... the filter for the Rates we want to count
     *   }
     * })
    **/
    count<T extends RateCountArgs>(
      args?: Subset<T, RateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RateAggregateArgs>(args: Subset<T, RateAggregateArgs>): Prisma.PrismaPromise<GetRateAggregateType<T>>

    /**
     * Group by Rate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RateGroupByArgs['orderBy'] }
        : { orderBy?: RateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Rate model
   */
  readonly fields: RateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Rate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    StudentOnCourse<T extends StudentOnCourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentOnCourseDefaultArgs<ExtArgs>>): Prisma__StudentOnCourseClient<$Result.GetResult<Prisma.$StudentOnCoursePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Rate model
   */ 
  interface RateFieldRefs {
    readonly studentId: FieldRef<"Rate", 'Int'>
    readonly courseId: FieldRef<"Rate", 'Int'>
    readonly rate: FieldRef<"Rate", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Rate findUnique
   */
  export type RateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateInclude<ExtArgs> | null
    /**
     * Filter, which Rate to fetch.
     */
    where: RateWhereUniqueInput
  }


  /**
   * Rate findUniqueOrThrow
   */
  export type RateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateInclude<ExtArgs> | null
    /**
     * Filter, which Rate to fetch.
     */
    where: RateWhereUniqueInput
  }


  /**
   * Rate findFirst
   */
  export type RateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateInclude<ExtArgs> | null
    /**
     * Filter, which Rate to fetch.
     */
    where?: RateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rates to fetch.
     */
    orderBy?: RateOrderByWithRelationInput | RateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rates.
     */
    cursor?: RateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rates.
     */
    distinct?: RateScalarFieldEnum | RateScalarFieldEnum[]
  }


  /**
   * Rate findFirstOrThrow
   */
  export type RateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateInclude<ExtArgs> | null
    /**
     * Filter, which Rate to fetch.
     */
    where?: RateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rates to fetch.
     */
    orderBy?: RateOrderByWithRelationInput | RateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rates.
     */
    cursor?: RateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rates.
     */
    distinct?: RateScalarFieldEnum | RateScalarFieldEnum[]
  }


  /**
   * Rate findMany
   */
  export type RateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateInclude<ExtArgs> | null
    /**
     * Filter, which Rates to fetch.
     */
    where?: RateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rates to fetch.
     */
    orderBy?: RateOrderByWithRelationInput | RateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rates.
     */
    cursor?: RateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rates.
     */
    skip?: number
    distinct?: RateScalarFieldEnum | RateScalarFieldEnum[]
  }


  /**
   * Rate create
   */
  export type RateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateInclude<ExtArgs> | null
    /**
     * The data needed to create a Rate.
     */
    data: XOR<RateCreateInput, RateUncheckedCreateInput>
  }


  /**
   * Rate createMany
   */
  export type RateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rates.
     */
    data: RateCreateManyInput | RateCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Rate update
   */
  export type RateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateInclude<ExtArgs> | null
    /**
     * The data needed to update a Rate.
     */
    data: XOR<RateUpdateInput, RateUncheckedUpdateInput>
    /**
     * Choose, which Rate to update.
     */
    where: RateWhereUniqueInput
  }


  /**
   * Rate updateMany
   */
  export type RateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rates.
     */
    data: XOR<RateUpdateManyMutationInput, RateUncheckedUpdateManyInput>
    /**
     * Filter which Rates to update
     */
    where?: RateWhereInput
  }


  /**
   * Rate upsert
   */
  export type RateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateInclude<ExtArgs> | null
    /**
     * The filter to search for the Rate to update in case it exists.
     */
    where: RateWhereUniqueInput
    /**
     * In case the Rate found by the `where` argument doesn't exist, create a new Rate with this data.
     */
    create: XOR<RateCreateInput, RateUncheckedCreateInput>
    /**
     * In case the Rate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RateUpdateInput, RateUncheckedUpdateInput>
  }


  /**
   * Rate delete
   */
  export type RateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateInclude<ExtArgs> | null
    /**
     * Filter which Rate to delete.
     */
    where: RateWhereUniqueInput
  }


  /**
   * Rate deleteMany
   */
  export type RateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rates to delete
     */
    where?: RateWhereInput
  }


  /**
   * Rate without action
   */
  export type RateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rate
     */
    select?: RateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RateInclude<ExtArgs> | null
  }



  /**
   * Model StudyLevel
   */

  export type AggregateStudyLevel = {
    _count: StudyLevelCountAggregateOutputType | null
    _avg: StudyLevelAvgAggregateOutputType | null
    _sum: StudyLevelSumAggregateOutputType | null
    _min: StudyLevelMinAggregateOutputType | null
    _max: StudyLevelMaxAggregateOutputType | null
  }

  export type StudyLevelAvgAggregateOutputType = {
    id: number | null
  }

  export type StudyLevelSumAggregateOutputType = {
    id: number | null
  }

  export type StudyLevelMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type StudyLevelMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type StudyLevelCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type StudyLevelAvgAggregateInputType = {
    id?: true
  }

  export type StudyLevelSumAggregateInputType = {
    id?: true
  }

  export type StudyLevelMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type StudyLevelMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type StudyLevelCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type StudyLevelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudyLevel to aggregate.
     */
    where?: StudyLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudyLevels to fetch.
     */
    orderBy?: StudyLevelOrderByWithRelationInput | StudyLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudyLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudyLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudyLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudyLevels
    **/
    _count?: true | StudyLevelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudyLevelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudyLevelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudyLevelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudyLevelMaxAggregateInputType
  }

  export type GetStudyLevelAggregateType<T extends StudyLevelAggregateArgs> = {
        [P in keyof T & keyof AggregateStudyLevel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudyLevel[P]>
      : GetScalarType<T[P], AggregateStudyLevel[P]>
  }




  export type StudyLevelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudyLevelWhereInput
    orderBy?: StudyLevelOrderByWithAggregationInput | StudyLevelOrderByWithAggregationInput[]
    by: StudyLevelScalarFieldEnum[] | StudyLevelScalarFieldEnum
    having?: StudyLevelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudyLevelCountAggregateInputType | true
    _avg?: StudyLevelAvgAggregateInputType
    _sum?: StudyLevelSumAggregateInputType
    _min?: StudyLevelMinAggregateInputType
    _max?: StudyLevelMaxAggregateInputType
  }

  export type StudyLevelGroupByOutputType = {
    id: number
    name: string
    _count: StudyLevelCountAggregateOutputType | null
    _avg: StudyLevelAvgAggregateOutputType | null
    _sum: StudyLevelSumAggregateOutputType | null
    _min: StudyLevelMinAggregateOutputType | null
    _max: StudyLevelMaxAggregateOutputType | null
  }

  type GetStudyLevelGroupByPayload<T extends StudyLevelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudyLevelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudyLevelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudyLevelGroupByOutputType[P]>
            : GetScalarType<T[P], StudyLevelGroupByOutputType[P]>
        }
      >
    >


  export type StudyLevelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    students?: boolean | StudyLevel$studentsArgs<ExtArgs>
    courses?: boolean | StudyLevel$coursesArgs<ExtArgs>
    _count?: boolean | StudyLevelCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studyLevel"]>

  export type StudyLevelSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type StudyLevelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | StudyLevel$studentsArgs<ExtArgs>
    courses?: boolean | StudyLevel$coursesArgs<ExtArgs>
    _count?: boolean | StudyLevelCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $StudyLevelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudyLevel"
    objects: {
      students: Prisma.$StudentPayload<ExtArgs>[]
      courses: Prisma.$CoursePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["studyLevel"]>
    composites: {}
  }


  type StudyLevelGetPayload<S extends boolean | null | undefined | StudyLevelDefaultArgs> = $Result.GetResult<Prisma.$StudyLevelPayload, S>

  type StudyLevelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StudyLevelFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StudyLevelCountAggregateInputType | true
    }

  export interface StudyLevelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudyLevel'], meta: { name: 'StudyLevel' } }
    /**
     * Find zero or one StudyLevel that matches the filter.
     * @param {StudyLevelFindUniqueArgs} args - Arguments to find a StudyLevel
     * @example
     * // Get one StudyLevel
     * const studyLevel = await prisma.studyLevel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StudyLevelFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StudyLevelFindUniqueArgs<ExtArgs>>
    ): Prisma__StudyLevelClient<$Result.GetResult<Prisma.$StudyLevelPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one StudyLevel that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StudyLevelFindUniqueOrThrowArgs} args - Arguments to find a StudyLevel
     * @example
     * // Get one StudyLevel
     * const studyLevel = await prisma.studyLevel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StudyLevelFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StudyLevelFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StudyLevelClient<$Result.GetResult<Prisma.$StudyLevelPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first StudyLevel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyLevelFindFirstArgs} args - Arguments to find a StudyLevel
     * @example
     * // Get one StudyLevel
     * const studyLevel = await prisma.studyLevel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StudyLevelFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StudyLevelFindFirstArgs<ExtArgs>>
    ): Prisma__StudyLevelClient<$Result.GetResult<Prisma.$StudyLevelPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first StudyLevel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyLevelFindFirstOrThrowArgs} args - Arguments to find a StudyLevel
     * @example
     * // Get one StudyLevel
     * const studyLevel = await prisma.studyLevel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StudyLevelFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StudyLevelFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StudyLevelClient<$Result.GetResult<Prisma.$StudyLevelPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more StudyLevels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyLevelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudyLevels
     * const studyLevels = await prisma.studyLevel.findMany()
     * 
     * // Get first 10 StudyLevels
     * const studyLevels = await prisma.studyLevel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studyLevelWithIdOnly = await prisma.studyLevel.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StudyLevelFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudyLevelFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyLevelPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a StudyLevel.
     * @param {StudyLevelCreateArgs} args - Arguments to create a StudyLevel.
     * @example
     * // Create one StudyLevel
     * const StudyLevel = await prisma.studyLevel.create({
     *   data: {
     *     // ... data to create a StudyLevel
     *   }
     * })
     * 
    **/
    create<T extends StudyLevelCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StudyLevelCreateArgs<ExtArgs>>
    ): Prisma__StudyLevelClient<$Result.GetResult<Prisma.$StudyLevelPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many StudyLevels.
     *     @param {StudyLevelCreateManyArgs} args - Arguments to create many StudyLevels.
     *     @example
     *     // Create many StudyLevels
     *     const studyLevel = await prisma.studyLevel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StudyLevelCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudyLevelCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a StudyLevel.
     * @param {StudyLevelDeleteArgs} args - Arguments to delete one StudyLevel.
     * @example
     * // Delete one StudyLevel
     * const StudyLevel = await prisma.studyLevel.delete({
     *   where: {
     *     // ... filter to delete one StudyLevel
     *   }
     * })
     * 
    **/
    delete<T extends StudyLevelDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StudyLevelDeleteArgs<ExtArgs>>
    ): Prisma__StudyLevelClient<$Result.GetResult<Prisma.$StudyLevelPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one StudyLevel.
     * @param {StudyLevelUpdateArgs} args - Arguments to update one StudyLevel.
     * @example
     * // Update one StudyLevel
     * const studyLevel = await prisma.studyLevel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StudyLevelUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StudyLevelUpdateArgs<ExtArgs>>
    ): Prisma__StudyLevelClient<$Result.GetResult<Prisma.$StudyLevelPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more StudyLevels.
     * @param {StudyLevelDeleteManyArgs} args - Arguments to filter StudyLevels to delete.
     * @example
     * // Delete a few StudyLevels
     * const { count } = await prisma.studyLevel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StudyLevelDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudyLevelDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudyLevels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyLevelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudyLevels
     * const studyLevel = await prisma.studyLevel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StudyLevelUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StudyLevelUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StudyLevel.
     * @param {StudyLevelUpsertArgs} args - Arguments to update or create a StudyLevel.
     * @example
     * // Update or create a StudyLevel
     * const studyLevel = await prisma.studyLevel.upsert({
     *   create: {
     *     // ... data to create a StudyLevel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudyLevel we want to update
     *   }
     * })
    **/
    upsert<T extends StudyLevelUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StudyLevelUpsertArgs<ExtArgs>>
    ): Prisma__StudyLevelClient<$Result.GetResult<Prisma.$StudyLevelPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of StudyLevels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyLevelCountArgs} args - Arguments to filter StudyLevels to count.
     * @example
     * // Count the number of StudyLevels
     * const count = await prisma.studyLevel.count({
     *   where: {
     *     // ... the filter for the StudyLevels we want to count
     *   }
     * })
    **/
    count<T extends StudyLevelCountArgs>(
      args?: Subset<T, StudyLevelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudyLevelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudyLevel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyLevelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudyLevelAggregateArgs>(args: Subset<T, StudyLevelAggregateArgs>): Prisma.PrismaPromise<GetStudyLevelAggregateType<T>>

    /**
     * Group by StudyLevel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyLevelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudyLevelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudyLevelGroupByArgs['orderBy'] }
        : { orderBy?: StudyLevelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudyLevelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudyLevelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudyLevel model
   */
  readonly fields: StudyLevelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudyLevel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudyLevelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    students<T extends StudyLevel$studentsArgs<ExtArgs> = {}>(args?: Subset<T, StudyLevel$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findMany'> | Null>;

    courses<T extends StudyLevel$coursesArgs<ExtArgs> = {}>(args?: Subset<T, StudyLevel$coursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the StudyLevel model
   */ 
  interface StudyLevelFieldRefs {
    readonly id: FieldRef<"StudyLevel", 'Int'>
    readonly name: FieldRef<"StudyLevel", 'String'>
  }
    

  // Custom InputTypes

  /**
   * StudyLevel findUnique
   */
  export type StudyLevelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyLevel
     */
    select?: StudyLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudyLevelInclude<ExtArgs> | null
    /**
     * Filter, which StudyLevel to fetch.
     */
    where: StudyLevelWhereUniqueInput
  }


  /**
   * StudyLevel findUniqueOrThrow
   */
  export type StudyLevelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyLevel
     */
    select?: StudyLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudyLevelInclude<ExtArgs> | null
    /**
     * Filter, which StudyLevel to fetch.
     */
    where: StudyLevelWhereUniqueInput
  }


  /**
   * StudyLevel findFirst
   */
  export type StudyLevelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyLevel
     */
    select?: StudyLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudyLevelInclude<ExtArgs> | null
    /**
     * Filter, which StudyLevel to fetch.
     */
    where?: StudyLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudyLevels to fetch.
     */
    orderBy?: StudyLevelOrderByWithRelationInput | StudyLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudyLevels.
     */
    cursor?: StudyLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudyLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudyLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudyLevels.
     */
    distinct?: StudyLevelScalarFieldEnum | StudyLevelScalarFieldEnum[]
  }


  /**
   * StudyLevel findFirstOrThrow
   */
  export type StudyLevelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyLevel
     */
    select?: StudyLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudyLevelInclude<ExtArgs> | null
    /**
     * Filter, which StudyLevel to fetch.
     */
    where?: StudyLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudyLevels to fetch.
     */
    orderBy?: StudyLevelOrderByWithRelationInput | StudyLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudyLevels.
     */
    cursor?: StudyLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudyLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudyLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudyLevels.
     */
    distinct?: StudyLevelScalarFieldEnum | StudyLevelScalarFieldEnum[]
  }


  /**
   * StudyLevel findMany
   */
  export type StudyLevelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyLevel
     */
    select?: StudyLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudyLevelInclude<ExtArgs> | null
    /**
     * Filter, which StudyLevels to fetch.
     */
    where?: StudyLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudyLevels to fetch.
     */
    orderBy?: StudyLevelOrderByWithRelationInput | StudyLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudyLevels.
     */
    cursor?: StudyLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudyLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudyLevels.
     */
    skip?: number
    distinct?: StudyLevelScalarFieldEnum | StudyLevelScalarFieldEnum[]
  }


  /**
   * StudyLevel create
   */
  export type StudyLevelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyLevel
     */
    select?: StudyLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudyLevelInclude<ExtArgs> | null
    /**
     * The data needed to create a StudyLevel.
     */
    data: XOR<StudyLevelCreateInput, StudyLevelUncheckedCreateInput>
  }


  /**
   * StudyLevel createMany
   */
  export type StudyLevelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudyLevels.
     */
    data: StudyLevelCreateManyInput | StudyLevelCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * StudyLevel update
   */
  export type StudyLevelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyLevel
     */
    select?: StudyLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudyLevelInclude<ExtArgs> | null
    /**
     * The data needed to update a StudyLevel.
     */
    data: XOR<StudyLevelUpdateInput, StudyLevelUncheckedUpdateInput>
    /**
     * Choose, which StudyLevel to update.
     */
    where: StudyLevelWhereUniqueInput
  }


  /**
   * StudyLevel updateMany
   */
  export type StudyLevelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudyLevels.
     */
    data: XOR<StudyLevelUpdateManyMutationInput, StudyLevelUncheckedUpdateManyInput>
    /**
     * Filter which StudyLevels to update
     */
    where?: StudyLevelWhereInput
  }


  /**
   * StudyLevel upsert
   */
  export type StudyLevelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyLevel
     */
    select?: StudyLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudyLevelInclude<ExtArgs> | null
    /**
     * The filter to search for the StudyLevel to update in case it exists.
     */
    where: StudyLevelWhereUniqueInput
    /**
     * In case the StudyLevel found by the `where` argument doesn't exist, create a new StudyLevel with this data.
     */
    create: XOR<StudyLevelCreateInput, StudyLevelUncheckedCreateInput>
    /**
     * In case the StudyLevel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudyLevelUpdateInput, StudyLevelUncheckedUpdateInput>
  }


  /**
   * StudyLevel delete
   */
  export type StudyLevelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyLevel
     */
    select?: StudyLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudyLevelInclude<ExtArgs> | null
    /**
     * Filter which StudyLevel to delete.
     */
    where: StudyLevelWhereUniqueInput
  }


  /**
   * StudyLevel deleteMany
   */
  export type StudyLevelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudyLevels to delete
     */
    where?: StudyLevelWhereInput
  }


  /**
   * StudyLevel.students
   */
  export type StudyLevel$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }


  /**
   * StudyLevel.courses
   */
  export type StudyLevel$coursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    cursor?: CourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }


  /**
   * StudyLevel without action
   */
  export type StudyLevelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyLevel
     */
    select?: StudyLevelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudyLevelInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    surname: 'surname',
    isVerified: 'isVerified'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AdminScalarFieldEnum: {
    userId: 'userId'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const ProfessorScalarFieldEnum: {
    userId: 'userId'
  };

  export type ProfessorScalarFieldEnum = (typeof ProfessorScalarFieldEnum)[keyof typeof ProfessorScalarFieldEnum]


  export const StudentScalarFieldEnum: {
    userId: 'userId',
    countryId: 'countryId',
    schoolId: 'schoolId',
    studyLevelId: 'studyLevelId'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const CountryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    tag: 'tag'
  };

  export type CountryScalarFieldEnum = (typeof CountryScalarFieldEnum)[keyof typeof CountryScalarFieldEnum]


  export const UniversityScalarFieldEnum: {
    id: 'id',
    name: 'name',
    countryId: 'countryId'
  };

  export type UniversityScalarFieldEnum = (typeof UniversityScalarFieldEnum)[keyof typeof UniversityScalarFieldEnum]


  export const SchoolScalarFieldEnum: {
    id: 'id',
    name: 'name',
    universityId: 'universityId'
  };

  export type SchoolScalarFieldEnum = (typeof SchoolScalarFieldEnum)[keyof typeof SchoolScalarFieldEnum]


  export const FieldOfStudyScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type FieldOfStudyScalarFieldEnum = (typeof FieldOfStudyScalarFieldEnum)[keyof typeof FieldOfStudyScalarFieldEnum]


  export const ProfessorOnFieldOfStudyScalarFieldEnum: {
    fieldOfStudyId: 'fieldOfStudyId',
    professorUserId: 'professorUserId'
  };

  export type ProfessorOnFieldOfStudyScalarFieldEnum = (typeof ProfessorOnFieldOfStudyScalarFieldEnum)[keyof typeof ProfessorOnFieldOfStudyScalarFieldEnum]


  export const StudentOnFieldOfStudyScalarFieldEnum: {
    studentUserId: 'studentUserId',
    fieldOfStudyId: 'fieldOfStudyId'
  };

  export type StudentOnFieldOfStudyScalarFieldEnum = (typeof StudentOnFieldOfStudyScalarFieldEnum)[keyof typeof StudentOnFieldOfStudyScalarFieldEnum]


  export const CourseScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    ects: 'ects',
    hoursOfLecture: 'hoursOfLecture',
    hoursOfLabs: 'hoursOfLabs',
    numberOfExams: 'numberOfExams',
    isAvailable: 'isAvailable',
    fieldOfStudyId: 'fieldOfStudyId',
    studyLevelId: 'studyLevelId'
  };

  export type CourseScalarFieldEnum = (typeof CourseScalarFieldEnum)[keyof typeof CourseScalarFieldEnum]


  export const StudentOnCourseScalarFieldEnum: {
    studentUserId: 'studentUserId',
    courseId: 'courseId'
  };

  export type StudentOnCourseScalarFieldEnum = (typeof StudentOnCourseScalarFieldEnum)[keyof typeof StudentOnCourseScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    content: 'content',
    date: 'date',
    studentUserId: 'studentUserId',
    courseId: 'courseId'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const RateScalarFieldEnum: {
    studentId: 'studentId',
    courseId: 'courseId',
    rate: 'rate'
  };

  export type RateScalarFieldEnum = (typeof RateScalarFieldEnum)[keyof typeof RateScalarFieldEnum]


  export const StudyLevelScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type StudyLevelScalarFieldEnum = (typeof StudyLevelScalarFieldEnum)[keyof typeof StudyLevelScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    surname?: StringFilter<"User"> | string
    isVerified?: BoolFilter<"User"> | boolean
    Admin?: XOR<AdminNullableRelationFilter, AdminWhereInput> | null
    Professor?: XOR<ProfessorNullableRelationFilter, ProfessorWhereInput> | null
    Student?: XOR<StudentNullableRelationFilter, StudentWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    isVerified?: SortOrder
    Admin?: AdminOrderByWithRelationInput
    Professor?: ProfessorOrderByWithRelationInput
    Student?: StudentOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    surname?: StringFilter<"User"> | string
    isVerified?: BoolFilter<"User"> | boolean
    Admin?: XOR<AdminNullableRelationFilter, AdminWhereInput> | null
    Professor?: XOR<ProfessorNullableRelationFilter, ProfessorWhereInput> | null
    Student?: XOR<StudentNullableRelationFilter, StudentWhereInput> | null
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    isVerified?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    surname?: StringWithAggregatesFilter<"User"> | string
    isVerified?: BoolWithAggregatesFilter<"User"> | boolean
  }

  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    userId?: IntFilter<"Admin"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AdminOrderByWithRelationInput = {
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    userId?: number
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "userId">

  export type AdminOrderByWithAggregationInput = {
    userId?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _avg?: AdminAvgOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
    _sum?: AdminSumOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    userId?: IntWithAggregatesFilter<"Admin"> | number
  }

  export type ProfessorWhereInput = {
    AND?: ProfessorWhereInput | ProfessorWhereInput[]
    OR?: ProfessorWhereInput[]
    NOT?: ProfessorWhereInput | ProfessorWhereInput[]
    userId?: IntFilter<"Professor"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    fieldsOfStudy?: ProfessorOnFieldOfStudyListRelationFilter
  }

  export type ProfessorOrderByWithRelationInput = {
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    fieldsOfStudy?: ProfessorOnFieldOfStudyOrderByRelationAggregateInput
  }

  export type ProfessorWhereUniqueInput = Prisma.AtLeast<{
    userId?: number
    AND?: ProfessorWhereInput | ProfessorWhereInput[]
    OR?: ProfessorWhereInput[]
    NOT?: ProfessorWhereInput | ProfessorWhereInput[]
    user?: XOR<UserRelationFilter, UserWhereInput>
    fieldsOfStudy?: ProfessorOnFieldOfStudyListRelationFilter
  }, "userId">

  export type ProfessorOrderByWithAggregationInput = {
    userId?: SortOrder
    _count?: ProfessorCountOrderByAggregateInput
    _avg?: ProfessorAvgOrderByAggregateInput
    _max?: ProfessorMaxOrderByAggregateInput
    _min?: ProfessorMinOrderByAggregateInput
    _sum?: ProfessorSumOrderByAggregateInput
  }

  export type ProfessorScalarWhereWithAggregatesInput = {
    AND?: ProfessorScalarWhereWithAggregatesInput | ProfessorScalarWhereWithAggregatesInput[]
    OR?: ProfessorScalarWhereWithAggregatesInput[]
    NOT?: ProfessorScalarWhereWithAggregatesInput | ProfessorScalarWhereWithAggregatesInput[]
    userId?: IntWithAggregatesFilter<"Professor"> | number
  }

  export type StudentWhereInput = {
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    userId?: IntFilter<"Student"> | number
    countryId?: IntFilter<"Student"> | number
    schoolId?: IntFilter<"Student"> | number
    studyLevelId?: IntFilter<"Student"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    country?: XOR<CountryRelationFilter, CountryWhereInput>
    School?: XOR<SchoolRelationFilter, SchoolWhereInput>
    StudyLevel?: XOR<StudyLevelRelationFilter, StudyLevelWhereInput>
    fieldsOfStudy?: StudentOnFieldOfStudyListRelationFilter
    courses?: StudentOnCourseListRelationFilter
    comments?: CommentListRelationFilter
  }

  export type StudentOrderByWithRelationInput = {
    userId?: SortOrder
    countryId?: SortOrder
    schoolId?: SortOrder
    studyLevelId?: SortOrder
    user?: UserOrderByWithRelationInput
    country?: CountryOrderByWithRelationInput
    School?: SchoolOrderByWithRelationInput
    StudyLevel?: StudyLevelOrderByWithRelationInput
    fieldsOfStudy?: StudentOnFieldOfStudyOrderByRelationAggregateInput
    courses?: StudentOnCourseOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
  }

  export type StudentWhereUniqueInput = Prisma.AtLeast<{
    userId?: number
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    countryId?: IntFilter<"Student"> | number
    schoolId?: IntFilter<"Student"> | number
    studyLevelId?: IntFilter<"Student"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    country?: XOR<CountryRelationFilter, CountryWhereInput>
    School?: XOR<SchoolRelationFilter, SchoolWhereInput>
    StudyLevel?: XOR<StudyLevelRelationFilter, StudyLevelWhereInput>
    fieldsOfStudy?: StudentOnFieldOfStudyListRelationFilter
    courses?: StudentOnCourseListRelationFilter
    comments?: CommentListRelationFilter
  }, "userId">

  export type StudentOrderByWithAggregationInput = {
    userId?: SortOrder
    countryId?: SortOrder
    schoolId?: SortOrder
    studyLevelId?: SortOrder
    _count?: StudentCountOrderByAggregateInput
    _avg?: StudentAvgOrderByAggregateInput
    _max?: StudentMaxOrderByAggregateInput
    _min?: StudentMinOrderByAggregateInput
    _sum?: StudentSumOrderByAggregateInput
  }

  export type StudentScalarWhereWithAggregatesInput = {
    AND?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    OR?: StudentScalarWhereWithAggregatesInput[]
    NOT?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    userId?: IntWithAggregatesFilter<"Student"> | number
    countryId?: IntWithAggregatesFilter<"Student"> | number
    schoolId?: IntWithAggregatesFilter<"Student"> | number
    studyLevelId?: IntWithAggregatesFilter<"Student"> | number
  }

  export type CountryWhereInput = {
    AND?: CountryWhereInput | CountryWhereInput[]
    OR?: CountryWhereInput[]
    NOT?: CountryWhereInput | CountryWhereInput[]
    id?: IntFilter<"Country"> | number
    name?: StringFilter<"Country"> | string
    tag?: StringFilter<"Country"> | string
    students?: StudentListRelationFilter
    universities?: UniversityListRelationFilter
  }

  export type CountryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    tag?: SortOrder
    students?: StudentOrderByRelationAggregateInput
    universities?: UniversityOrderByRelationAggregateInput
  }

  export type CountryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CountryWhereInput | CountryWhereInput[]
    OR?: CountryWhereInput[]
    NOT?: CountryWhereInput | CountryWhereInput[]
    name?: StringFilter<"Country"> | string
    tag?: StringFilter<"Country"> | string
    students?: StudentListRelationFilter
    universities?: UniversityListRelationFilter
  }, "id">

  export type CountryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    tag?: SortOrder
    _count?: CountryCountOrderByAggregateInput
    _avg?: CountryAvgOrderByAggregateInput
    _max?: CountryMaxOrderByAggregateInput
    _min?: CountryMinOrderByAggregateInput
    _sum?: CountrySumOrderByAggregateInput
  }

  export type CountryScalarWhereWithAggregatesInput = {
    AND?: CountryScalarWhereWithAggregatesInput | CountryScalarWhereWithAggregatesInput[]
    OR?: CountryScalarWhereWithAggregatesInput[]
    NOT?: CountryScalarWhereWithAggregatesInput | CountryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Country"> | number
    name?: StringWithAggregatesFilter<"Country"> | string
    tag?: StringWithAggregatesFilter<"Country"> | string
  }

  export type UniversityWhereInput = {
    AND?: UniversityWhereInput | UniversityWhereInput[]
    OR?: UniversityWhereInput[]
    NOT?: UniversityWhereInput | UniversityWhereInput[]
    id?: IntFilter<"University"> | number
    name?: StringFilter<"University"> | string
    countryId?: IntFilter<"University"> | number
    Country?: XOR<CountryRelationFilter, CountryWhereInput>
    schools?: SchoolListRelationFilter
  }

  export type UniversityOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    countryId?: SortOrder
    Country?: CountryOrderByWithRelationInput
    schools?: SchoolOrderByRelationAggregateInput
  }

  export type UniversityWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UniversityWhereInput | UniversityWhereInput[]
    OR?: UniversityWhereInput[]
    NOT?: UniversityWhereInput | UniversityWhereInput[]
    name?: StringFilter<"University"> | string
    countryId?: IntFilter<"University"> | number
    Country?: XOR<CountryRelationFilter, CountryWhereInput>
    schools?: SchoolListRelationFilter
  }, "id">

  export type UniversityOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    countryId?: SortOrder
    _count?: UniversityCountOrderByAggregateInput
    _avg?: UniversityAvgOrderByAggregateInput
    _max?: UniversityMaxOrderByAggregateInput
    _min?: UniversityMinOrderByAggregateInput
    _sum?: UniversitySumOrderByAggregateInput
  }

  export type UniversityScalarWhereWithAggregatesInput = {
    AND?: UniversityScalarWhereWithAggregatesInput | UniversityScalarWhereWithAggregatesInput[]
    OR?: UniversityScalarWhereWithAggregatesInput[]
    NOT?: UniversityScalarWhereWithAggregatesInput | UniversityScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"University"> | number
    name?: StringWithAggregatesFilter<"University"> | string
    countryId?: IntWithAggregatesFilter<"University"> | number
  }

  export type SchoolWhereInput = {
    AND?: SchoolWhereInput | SchoolWhereInput[]
    OR?: SchoolWhereInput[]
    NOT?: SchoolWhereInput | SchoolWhereInput[]
    id?: IntFilter<"School"> | number
    name?: StringFilter<"School"> | string
    universityId?: IntFilter<"School"> | number
    University?: XOR<UniversityRelationFilter, UniversityWhereInput>
    students?: StudentListRelationFilter
  }

  export type SchoolOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    universityId?: SortOrder
    University?: UniversityOrderByWithRelationInput
    students?: StudentOrderByRelationAggregateInput
  }

  export type SchoolWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SchoolWhereInput | SchoolWhereInput[]
    OR?: SchoolWhereInput[]
    NOT?: SchoolWhereInput | SchoolWhereInput[]
    name?: StringFilter<"School"> | string
    universityId?: IntFilter<"School"> | number
    University?: XOR<UniversityRelationFilter, UniversityWhereInput>
    students?: StudentListRelationFilter
  }, "id">

  export type SchoolOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    universityId?: SortOrder
    _count?: SchoolCountOrderByAggregateInput
    _avg?: SchoolAvgOrderByAggregateInput
    _max?: SchoolMaxOrderByAggregateInput
    _min?: SchoolMinOrderByAggregateInput
    _sum?: SchoolSumOrderByAggregateInput
  }

  export type SchoolScalarWhereWithAggregatesInput = {
    AND?: SchoolScalarWhereWithAggregatesInput | SchoolScalarWhereWithAggregatesInput[]
    OR?: SchoolScalarWhereWithAggregatesInput[]
    NOT?: SchoolScalarWhereWithAggregatesInput | SchoolScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"School"> | number
    name?: StringWithAggregatesFilter<"School"> | string
    universityId?: IntWithAggregatesFilter<"School"> | number
  }

  export type FieldOfStudyWhereInput = {
    AND?: FieldOfStudyWhereInput | FieldOfStudyWhereInput[]
    OR?: FieldOfStudyWhereInput[]
    NOT?: FieldOfStudyWhereInput | FieldOfStudyWhereInput[]
    id?: IntFilter<"FieldOfStudy"> | number
    name?: StringFilter<"FieldOfStudy"> | string
    professors?: ProfessorOnFieldOfStudyListRelationFilter
    students?: StudentOnFieldOfStudyListRelationFilter
    courses?: CourseListRelationFilter
  }

  export type FieldOfStudyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    professors?: ProfessorOnFieldOfStudyOrderByRelationAggregateInput
    students?: StudentOnFieldOfStudyOrderByRelationAggregateInput
    courses?: CourseOrderByRelationAggregateInput
  }

  export type FieldOfStudyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FieldOfStudyWhereInput | FieldOfStudyWhereInput[]
    OR?: FieldOfStudyWhereInput[]
    NOT?: FieldOfStudyWhereInput | FieldOfStudyWhereInput[]
    name?: StringFilter<"FieldOfStudy"> | string
    professors?: ProfessorOnFieldOfStudyListRelationFilter
    students?: StudentOnFieldOfStudyListRelationFilter
    courses?: CourseListRelationFilter
  }, "id">

  export type FieldOfStudyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: FieldOfStudyCountOrderByAggregateInput
    _avg?: FieldOfStudyAvgOrderByAggregateInput
    _max?: FieldOfStudyMaxOrderByAggregateInput
    _min?: FieldOfStudyMinOrderByAggregateInput
    _sum?: FieldOfStudySumOrderByAggregateInput
  }

  export type FieldOfStudyScalarWhereWithAggregatesInput = {
    AND?: FieldOfStudyScalarWhereWithAggregatesInput | FieldOfStudyScalarWhereWithAggregatesInput[]
    OR?: FieldOfStudyScalarWhereWithAggregatesInput[]
    NOT?: FieldOfStudyScalarWhereWithAggregatesInput | FieldOfStudyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FieldOfStudy"> | number
    name?: StringWithAggregatesFilter<"FieldOfStudy"> | string
  }

  export type ProfessorOnFieldOfStudyWhereInput = {
    AND?: ProfessorOnFieldOfStudyWhereInput | ProfessorOnFieldOfStudyWhereInput[]
    OR?: ProfessorOnFieldOfStudyWhereInput[]
    NOT?: ProfessorOnFieldOfStudyWhereInput | ProfessorOnFieldOfStudyWhereInput[]
    fieldOfStudyId?: IntFilter<"ProfessorOnFieldOfStudy"> | number
    professorUserId?: IntFilter<"ProfessorOnFieldOfStudy"> | number
    FieldOfStudy?: XOR<FieldOfStudyRelationFilter, FieldOfStudyWhereInput>
    Professor?: XOR<ProfessorRelationFilter, ProfessorWhereInput>
  }

  export type ProfessorOnFieldOfStudyOrderByWithRelationInput = {
    fieldOfStudyId?: SortOrder
    professorUserId?: SortOrder
    FieldOfStudy?: FieldOfStudyOrderByWithRelationInput
    Professor?: ProfessorOrderByWithRelationInput
  }

  export type ProfessorOnFieldOfStudyWhereUniqueInput = Prisma.AtLeast<{
    fieldOfStudyId_professorUserId?: ProfessorOnFieldOfStudyFieldOfStudyIdProfessorUserIdCompoundUniqueInput
    AND?: ProfessorOnFieldOfStudyWhereInput | ProfessorOnFieldOfStudyWhereInput[]
    OR?: ProfessorOnFieldOfStudyWhereInput[]
    NOT?: ProfessorOnFieldOfStudyWhereInput | ProfessorOnFieldOfStudyWhereInput[]
    fieldOfStudyId?: IntFilter<"ProfessorOnFieldOfStudy"> | number
    professorUserId?: IntFilter<"ProfessorOnFieldOfStudy"> | number
    FieldOfStudy?: XOR<FieldOfStudyRelationFilter, FieldOfStudyWhereInput>
    Professor?: XOR<ProfessorRelationFilter, ProfessorWhereInput>
  }, "fieldOfStudyId_professorUserId">

  export type ProfessorOnFieldOfStudyOrderByWithAggregationInput = {
    fieldOfStudyId?: SortOrder
    professorUserId?: SortOrder
    _count?: ProfessorOnFieldOfStudyCountOrderByAggregateInput
    _avg?: ProfessorOnFieldOfStudyAvgOrderByAggregateInput
    _max?: ProfessorOnFieldOfStudyMaxOrderByAggregateInput
    _min?: ProfessorOnFieldOfStudyMinOrderByAggregateInput
    _sum?: ProfessorOnFieldOfStudySumOrderByAggregateInput
  }

  export type ProfessorOnFieldOfStudyScalarWhereWithAggregatesInput = {
    AND?: ProfessorOnFieldOfStudyScalarWhereWithAggregatesInput | ProfessorOnFieldOfStudyScalarWhereWithAggregatesInput[]
    OR?: ProfessorOnFieldOfStudyScalarWhereWithAggregatesInput[]
    NOT?: ProfessorOnFieldOfStudyScalarWhereWithAggregatesInput | ProfessorOnFieldOfStudyScalarWhereWithAggregatesInput[]
    fieldOfStudyId?: IntWithAggregatesFilter<"ProfessorOnFieldOfStudy"> | number
    professorUserId?: IntWithAggregatesFilter<"ProfessorOnFieldOfStudy"> | number
  }

  export type StudentOnFieldOfStudyWhereInput = {
    AND?: StudentOnFieldOfStudyWhereInput | StudentOnFieldOfStudyWhereInput[]
    OR?: StudentOnFieldOfStudyWhereInput[]
    NOT?: StudentOnFieldOfStudyWhereInput | StudentOnFieldOfStudyWhereInput[]
    studentUserId?: IntFilter<"StudentOnFieldOfStudy"> | number
    fieldOfStudyId?: IntFilter<"StudentOnFieldOfStudy"> | number
    Student?: XOR<StudentRelationFilter, StudentWhereInput>
    FieldOfStudy?: XOR<FieldOfStudyRelationFilter, FieldOfStudyWhereInput>
  }

  export type StudentOnFieldOfStudyOrderByWithRelationInput = {
    studentUserId?: SortOrder
    fieldOfStudyId?: SortOrder
    Student?: StudentOrderByWithRelationInput
    FieldOfStudy?: FieldOfStudyOrderByWithRelationInput
  }

  export type StudentOnFieldOfStudyWhereUniqueInput = Prisma.AtLeast<{
    fieldOfStudyId_studentUserId?: StudentOnFieldOfStudyFieldOfStudyIdStudentUserIdCompoundUniqueInput
    AND?: StudentOnFieldOfStudyWhereInput | StudentOnFieldOfStudyWhereInput[]
    OR?: StudentOnFieldOfStudyWhereInput[]
    NOT?: StudentOnFieldOfStudyWhereInput | StudentOnFieldOfStudyWhereInput[]
    studentUserId?: IntFilter<"StudentOnFieldOfStudy"> | number
    fieldOfStudyId?: IntFilter<"StudentOnFieldOfStudy"> | number
    Student?: XOR<StudentRelationFilter, StudentWhereInput>
    FieldOfStudy?: XOR<FieldOfStudyRelationFilter, FieldOfStudyWhereInput>
  }, "fieldOfStudyId_studentUserId">

  export type StudentOnFieldOfStudyOrderByWithAggregationInput = {
    studentUserId?: SortOrder
    fieldOfStudyId?: SortOrder
    _count?: StudentOnFieldOfStudyCountOrderByAggregateInput
    _avg?: StudentOnFieldOfStudyAvgOrderByAggregateInput
    _max?: StudentOnFieldOfStudyMaxOrderByAggregateInput
    _min?: StudentOnFieldOfStudyMinOrderByAggregateInput
    _sum?: StudentOnFieldOfStudySumOrderByAggregateInput
  }

  export type StudentOnFieldOfStudyScalarWhereWithAggregatesInput = {
    AND?: StudentOnFieldOfStudyScalarWhereWithAggregatesInput | StudentOnFieldOfStudyScalarWhereWithAggregatesInput[]
    OR?: StudentOnFieldOfStudyScalarWhereWithAggregatesInput[]
    NOT?: StudentOnFieldOfStudyScalarWhereWithAggregatesInput | StudentOnFieldOfStudyScalarWhereWithAggregatesInput[]
    studentUserId?: IntWithAggregatesFilter<"StudentOnFieldOfStudy"> | number
    fieldOfStudyId?: IntWithAggregatesFilter<"StudentOnFieldOfStudy"> | number
  }

  export type CourseWhereInput = {
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    id?: IntFilter<"Course"> | number
    name?: StringFilter<"Course"> | string
    description?: StringFilter<"Course"> | string
    ects?: IntFilter<"Course"> | number
    hoursOfLecture?: FloatFilter<"Course"> | number
    hoursOfLabs?: FloatFilter<"Course"> | number
    numberOfExams?: IntFilter<"Course"> | number
    isAvailable?: BoolFilter<"Course"> | boolean
    fieldOfStudyId?: IntFilter<"Course"> | number
    studyLevelId?: IntFilter<"Course"> | number
    FieldOfStudy?: XOR<FieldOfStudyRelationFilter, FieldOfStudyWhereInput>
    StudyLevel?: XOR<StudyLevelRelationFilter, StudyLevelWhereInput>
    Students?: StudentOnCourseListRelationFilter
    Comments?: CommentListRelationFilter
  }

  export type CourseOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    ects?: SortOrder
    hoursOfLecture?: SortOrder
    hoursOfLabs?: SortOrder
    numberOfExams?: SortOrder
    isAvailable?: SortOrder
    fieldOfStudyId?: SortOrder
    studyLevelId?: SortOrder
    FieldOfStudy?: FieldOfStudyOrderByWithRelationInput
    StudyLevel?: StudyLevelOrderByWithRelationInput
    Students?: StudentOnCourseOrderByRelationAggregateInput
    Comments?: CommentOrderByRelationAggregateInput
  }

  export type CourseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    name?: StringFilter<"Course"> | string
    description?: StringFilter<"Course"> | string
    ects?: IntFilter<"Course"> | number
    hoursOfLecture?: FloatFilter<"Course"> | number
    hoursOfLabs?: FloatFilter<"Course"> | number
    numberOfExams?: IntFilter<"Course"> | number
    isAvailable?: BoolFilter<"Course"> | boolean
    fieldOfStudyId?: IntFilter<"Course"> | number
    studyLevelId?: IntFilter<"Course"> | number
    FieldOfStudy?: XOR<FieldOfStudyRelationFilter, FieldOfStudyWhereInput>
    StudyLevel?: XOR<StudyLevelRelationFilter, StudyLevelWhereInput>
    Students?: StudentOnCourseListRelationFilter
    Comments?: CommentListRelationFilter
  }, "id">

  export type CourseOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    ects?: SortOrder
    hoursOfLecture?: SortOrder
    hoursOfLabs?: SortOrder
    numberOfExams?: SortOrder
    isAvailable?: SortOrder
    fieldOfStudyId?: SortOrder
    studyLevelId?: SortOrder
    _count?: CourseCountOrderByAggregateInput
    _avg?: CourseAvgOrderByAggregateInput
    _max?: CourseMaxOrderByAggregateInput
    _min?: CourseMinOrderByAggregateInput
    _sum?: CourseSumOrderByAggregateInput
  }

  export type CourseScalarWhereWithAggregatesInput = {
    AND?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    OR?: CourseScalarWhereWithAggregatesInput[]
    NOT?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Course"> | number
    name?: StringWithAggregatesFilter<"Course"> | string
    description?: StringWithAggregatesFilter<"Course"> | string
    ects?: IntWithAggregatesFilter<"Course"> | number
    hoursOfLecture?: FloatWithAggregatesFilter<"Course"> | number
    hoursOfLabs?: FloatWithAggregatesFilter<"Course"> | number
    numberOfExams?: IntWithAggregatesFilter<"Course"> | number
    isAvailable?: BoolWithAggregatesFilter<"Course"> | boolean
    fieldOfStudyId?: IntWithAggregatesFilter<"Course"> | number
    studyLevelId?: IntWithAggregatesFilter<"Course"> | number
  }

  export type StudentOnCourseWhereInput = {
    AND?: StudentOnCourseWhereInput | StudentOnCourseWhereInput[]
    OR?: StudentOnCourseWhereInput[]
    NOT?: StudentOnCourseWhereInput | StudentOnCourseWhereInput[]
    studentUserId?: IntFilter<"StudentOnCourse"> | number
    courseId?: IntFilter<"StudentOnCourse"> | number
    Student?: XOR<StudentRelationFilter, StudentWhereInput>
    Course?: XOR<CourseRelationFilter, CourseWhereInput>
    Rate?: XOR<RateNullableRelationFilter, RateWhereInput> | null
  }

  export type StudentOnCourseOrderByWithRelationInput = {
    studentUserId?: SortOrder
    courseId?: SortOrder
    Student?: StudentOrderByWithRelationInput
    Course?: CourseOrderByWithRelationInput
    Rate?: RateOrderByWithRelationInput
  }

  export type StudentOnCourseWhereUniqueInput = Prisma.AtLeast<{
    studentUserId_courseId?: StudentOnCourseStudentUserIdCourseIdCompoundUniqueInput
    AND?: StudentOnCourseWhereInput | StudentOnCourseWhereInput[]
    OR?: StudentOnCourseWhereInput[]
    NOT?: StudentOnCourseWhereInput | StudentOnCourseWhereInput[]
    studentUserId?: IntFilter<"StudentOnCourse"> | number
    courseId?: IntFilter<"StudentOnCourse"> | number
    Student?: XOR<StudentRelationFilter, StudentWhereInput>
    Course?: XOR<CourseRelationFilter, CourseWhereInput>
    Rate?: XOR<RateNullableRelationFilter, RateWhereInput> | null
  }, "studentUserId_courseId">

  export type StudentOnCourseOrderByWithAggregationInput = {
    studentUserId?: SortOrder
    courseId?: SortOrder
    _count?: StudentOnCourseCountOrderByAggregateInput
    _avg?: StudentOnCourseAvgOrderByAggregateInput
    _max?: StudentOnCourseMaxOrderByAggregateInput
    _min?: StudentOnCourseMinOrderByAggregateInput
    _sum?: StudentOnCourseSumOrderByAggregateInput
  }

  export type StudentOnCourseScalarWhereWithAggregatesInput = {
    AND?: StudentOnCourseScalarWhereWithAggregatesInput | StudentOnCourseScalarWhereWithAggregatesInput[]
    OR?: StudentOnCourseScalarWhereWithAggregatesInput[]
    NOT?: StudentOnCourseScalarWhereWithAggregatesInput | StudentOnCourseScalarWhereWithAggregatesInput[]
    studentUserId?: IntWithAggregatesFilter<"StudentOnCourse"> | number
    courseId?: IntWithAggregatesFilter<"StudentOnCourse"> | number
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: IntFilter<"Comment"> | number
    content?: StringFilter<"Comment"> | string
    date?: DateTimeFilter<"Comment"> | Date | string
    studentUserId?: IntFilter<"Comment"> | number
    courseId?: IntFilter<"Comment"> | number
    Student?: XOR<StudentRelationFilter, StudentWhereInput>
    Course?: XOR<CourseRelationFilter, CourseWhereInput>
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    date?: SortOrder
    studentUserId?: SortOrder
    courseId?: SortOrder
    Student?: StudentOrderByWithRelationInput
    Course?: CourseOrderByWithRelationInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    content?: StringFilter<"Comment"> | string
    date?: DateTimeFilter<"Comment"> | Date | string
    studentUserId?: IntFilter<"Comment"> | number
    courseId?: IntFilter<"Comment"> | number
    Student?: XOR<StudentRelationFilter, StudentWhereInput>
    Course?: XOR<CourseRelationFilter, CourseWhereInput>
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    date?: SortOrder
    studentUserId?: SortOrder
    courseId?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _avg?: CommentAvgOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
    _sum?: CommentSumOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Comment"> | number
    content?: StringWithAggregatesFilter<"Comment"> | string
    date?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    studentUserId?: IntWithAggregatesFilter<"Comment"> | number
    courseId?: IntWithAggregatesFilter<"Comment"> | number
  }

  export type RateWhereInput = {
    AND?: RateWhereInput | RateWhereInput[]
    OR?: RateWhereInput[]
    NOT?: RateWhereInput | RateWhereInput[]
    studentId?: IntFilter<"Rate"> | number
    courseId?: IntFilter<"Rate"> | number
    rate?: IntFilter<"Rate"> | number
    StudentOnCourse?: XOR<StudentOnCourseRelationFilter, StudentOnCourseWhereInput>
  }

  export type RateOrderByWithRelationInput = {
    studentId?: SortOrder
    courseId?: SortOrder
    rate?: SortOrder
    StudentOnCourse?: StudentOnCourseOrderByWithRelationInput
  }

  export type RateWhereUniqueInput = Prisma.AtLeast<{
    rateId?: RateRateIdCompoundUniqueInput
    AND?: RateWhereInput | RateWhereInput[]
    OR?: RateWhereInput[]
    NOT?: RateWhereInput | RateWhereInput[]
    studentId?: IntFilter<"Rate"> | number
    courseId?: IntFilter<"Rate"> | number
    rate?: IntFilter<"Rate"> | number
    StudentOnCourse?: XOR<StudentOnCourseRelationFilter, StudentOnCourseWhereInput>
  }, "rateId">

  export type RateOrderByWithAggregationInput = {
    studentId?: SortOrder
    courseId?: SortOrder
    rate?: SortOrder
    _count?: RateCountOrderByAggregateInput
    _avg?: RateAvgOrderByAggregateInput
    _max?: RateMaxOrderByAggregateInput
    _min?: RateMinOrderByAggregateInput
    _sum?: RateSumOrderByAggregateInput
  }

  export type RateScalarWhereWithAggregatesInput = {
    AND?: RateScalarWhereWithAggregatesInput | RateScalarWhereWithAggregatesInput[]
    OR?: RateScalarWhereWithAggregatesInput[]
    NOT?: RateScalarWhereWithAggregatesInput | RateScalarWhereWithAggregatesInput[]
    studentId?: IntWithAggregatesFilter<"Rate"> | number
    courseId?: IntWithAggregatesFilter<"Rate"> | number
    rate?: IntWithAggregatesFilter<"Rate"> | number
  }

  export type StudyLevelWhereInput = {
    AND?: StudyLevelWhereInput | StudyLevelWhereInput[]
    OR?: StudyLevelWhereInput[]
    NOT?: StudyLevelWhereInput | StudyLevelWhereInput[]
    id?: IntFilter<"StudyLevel"> | number
    name?: StringFilter<"StudyLevel"> | string
    students?: StudentListRelationFilter
    courses?: CourseListRelationFilter
  }

  export type StudyLevelOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    students?: StudentOrderByRelationAggregateInput
    courses?: CourseOrderByRelationAggregateInput
  }

  export type StudyLevelWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StudyLevelWhereInput | StudyLevelWhereInput[]
    OR?: StudyLevelWhereInput[]
    NOT?: StudyLevelWhereInput | StudyLevelWhereInput[]
    name?: StringFilter<"StudyLevel"> | string
    students?: StudentListRelationFilter
    courses?: CourseListRelationFilter
  }, "id">

  export type StudyLevelOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: StudyLevelCountOrderByAggregateInput
    _avg?: StudyLevelAvgOrderByAggregateInput
    _max?: StudyLevelMaxOrderByAggregateInput
    _min?: StudyLevelMinOrderByAggregateInput
    _sum?: StudyLevelSumOrderByAggregateInput
  }

  export type StudyLevelScalarWhereWithAggregatesInput = {
    AND?: StudyLevelScalarWhereWithAggregatesInput | StudyLevelScalarWhereWithAggregatesInput[]
    OR?: StudyLevelScalarWhereWithAggregatesInput[]
    NOT?: StudyLevelScalarWhereWithAggregatesInput | StudyLevelScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StudyLevel"> | number
    name?: StringWithAggregatesFilter<"StudyLevel"> | string
  }

  export type UserCreateInput = {
    email: string
    password: string
    name: string
    surname: string
    isVerified?: boolean
    Admin?: AdminCreateNestedOneWithoutUserInput
    Professor?: ProfessorCreateNestedOneWithoutUserInput
    Student?: StudentCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    name: string
    surname: string
    isVerified?: boolean
    Admin?: AdminUncheckedCreateNestedOneWithoutUserInput
    Professor?: ProfessorUncheckedCreateNestedOneWithoutUserInput
    Student?: StudentUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    Admin?: AdminUpdateOneWithoutUserNestedInput
    Professor?: ProfessorUpdateOneWithoutUserNestedInput
    Student?: StudentUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    Admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
    Professor?: ProfessorUncheckedUpdateOneWithoutUserNestedInput
    Student?: StudentUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
    name: string
    surname: string
    isVerified?: boolean
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AdminCreateInput = {
    user: UserCreateNestedOneWithoutAdminInput
  }

  export type AdminUncheckedCreateInput = {
    userId: number
  }

  export type AdminUpdateInput = {
    user?: UserUpdateOneRequiredWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type AdminCreateManyInput = {
    userId: number
  }

  export type AdminUpdateManyMutationInput = {

  }

  export type AdminUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ProfessorCreateInput = {
    user: UserCreateNestedOneWithoutProfessorInput
    fieldsOfStudy?: ProfessorOnFieldOfStudyCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorUncheckedCreateInput = {
    userId: number
    fieldsOfStudy?: ProfessorOnFieldOfStudyUncheckedCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorUpdateInput = {
    user?: UserUpdateOneRequiredWithoutProfessorNestedInput
    fieldsOfStudy?: ProfessorOnFieldOfStudyUpdateManyWithoutProfessorNestedInput
  }

  export type ProfessorUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    fieldsOfStudy?: ProfessorOnFieldOfStudyUncheckedUpdateManyWithoutProfessorNestedInput
  }

  export type ProfessorCreateManyInput = {
    userId: number
  }

  export type ProfessorUpdateManyMutationInput = {

  }

  export type ProfessorUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type StudentCreateInput = {
    user: UserCreateNestedOneWithoutStudentInput
    country: CountryCreateNestedOneWithoutStudentsInput
    School: SchoolCreateNestedOneWithoutStudentsInput
    StudyLevel: StudyLevelCreateNestedOneWithoutStudentsInput
    fieldsOfStudy?: StudentOnFieldOfStudyCreateNestedManyWithoutStudentInput
    courses?: StudentOnCourseCreateNestedManyWithoutStudentInput
    comments?: CommentCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateInput = {
    userId: number
    countryId: number
    schoolId: number
    studyLevelId: number
    fieldsOfStudy?: StudentOnFieldOfStudyUncheckedCreateNestedManyWithoutStudentInput
    courses?: StudentOnCourseUncheckedCreateNestedManyWithoutStudentInput
    comments?: CommentUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentUpdateInput = {
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
    country?: CountryUpdateOneRequiredWithoutStudentsNestedInput
    School?: SchoolUpdateOneRequiredWithoutStudentsNestedInput
    StudyLevel?: StudyLevelUpdateOneRequiredWithoutStudentsNestedInput
    fieldsOfStudy?: StudentOnFieldOfStudyUpdateManyWithoutStudentNestedInput
    courses?: StudentOnCourseUpdateManyWithoutStudentNestedInput
    comments?: CommentUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    countryId?: IntFieldUpdateOperationsInput | number
    schoolId?: IntFieldUpdateOperationsInput | number
    studyLevelId?: IntFieldUpdateOperationsInput | number
    fieldsOfStudy?: StudentOnFieldOfStudyUncheckedUpdateManyWithoutStudentNestedInput
    courses?: StudentOnCourseUncheckedUpdateManyWithoutStudentNestedInput
    comments?: CommentUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentCreateManyInput = {
    userId: number
    countryId: number
    schoolId: number
    studyLevelId: number
  }

  export type StudentUpdateManyMutationInput = {

  }

  export type StudentUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    countryId?: IntFieldUpdateOperationsInput | number
    schoolId?: IntFieldUpdateOperationsInput | number
    studyLevelId?: IntFieldUpdateOperationsInput | number
  }

  export type CountryCreateInput = {
    name: string
    tag: string
    students?: StudentCreateNestedManyWithoutCountryInput
    universities?: UniversityCreateNestedManyWithoutCountryInput
  }

  export type CountryUncheckedCreateInput = {
    id?: number
    name: string
    tag: string
    students?: StudentUncheckedCreateNestedManyWithoutCountryInput
    universities?: UniversityUncheckedCreateNestedManyWithoutCountryInput
  }

  export type CountryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    students?: StudentUpdateManyWithoutCountryNestedInput
    universities?: UniversityUpdateManyWithoutCountryNestedInput
  }

  export type CountryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    students?: StudentUncheckedUpdateManyWithoutCountryNestedInput
    universities?: UniversityUncheckedUpdateManyWithoutCountryNestedInput
  }

  export type CountryCreateManyInput = {
    id?: number
    name: string
    tag: string
  }

  export type CountryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
  }

  export type CountryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
  }

  export type UniversityCreateInput = {
    name: string
    Country: CountryCreateNestedOneWithoutUniversitiesInput
    schools?: SchoolCreateNestedManyWithoutUniversityInput
  }

  export type UniversityUncheckedCreateInput = {
    id?: number
    name: string
    countryId: number
    schools?: SchoolUncheckedCreateNestedManyWithoutUniversityInput
  }

  export type UniversityUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    Country?: CountryUpdateOneRequiredWithoutUniversitiesNestedInput
    schools?: SchoolUpdateManyWithoutUniversityNestedInput
  }

  export type UniversityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    countryId?: IntFieldUpdateOperationsInput | number
    schools?: SchoolUncheckedUpdateManyWithoutUniversityNestedInput
  }

  export type UniversityCreateManyInput = {
    id?: number
    name: string
    countryId: number
  }

  export type UniversityUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UniversityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    countryId?: IntFieldUpdateOperationsInput | number
  }

  export type SchoolCreateInput = {
    name: string
    University: UniversityCreateNestedOneWithoutSchoolsInput
    students?: StudentCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateInput = {
    id?: number
    name: string
    universityId: number
    students?: StudentUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    University?: UniversityUpdateOneRequiredWithoutSchoolsNestedInput
    students?: StudentUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    universityId?: IntFieldUpdateOperationsInput | number
    students?: StudentUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolCreateManyInput = {
    id?: number
    name: string
    universityId: number
  }

  export type SchoolUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SchoolUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    universityId?: IntFieldUpdateOperationsInput | number
  }

  export type FieldOfStudyCreateInput = {
    name: string
    professors?: ProfessorOnFieldOfStudyCreateNestedManyWithoutFieldOfStudyInput
    students?: StudentOnFieldOfStudyCreateNestedManyWithoutFieldOfStudyInput
    courses?: CourseCreateNestedManyWithoutFieldOfStudyInput
  }

  export type FieldOfStudyUncheckedCreateInput = {
    id?: number
    name: string
    professors?: ProfessorOnFieldOfStudyUncheckedCreateNestedManyWithoutFieldOfStudyInput
    students?: StudentOnFieldOfStudyUncheckedCreateNestedManyWithoutFieldOfStudyInput
    courses?: CourseUncheckedCreateNestedManyWithoutFieldOfStudyInput
  }

  export type FieldOfStudyUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    professors?: ProfessorOnFieldOfStudyUpdateManyWithoutFieldOfStudyNestedInput
    students?: StudentOnFieldOfStudyUpdateManyWithoutFieldOfStudyNestedInput
    courses?: CourseUpdateManyWithoutFieldOfStudyNestedInput
  }

  export type FieldOfStudyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    professors?: ProfessorOnFieldOfStudyUncheckedUpdateManyWithoutFieldOfStudyNestedInput
    students?: StudentOnFieldOfStudyUncheckedUpdateManyWithoutFieldOfStudyNestedInput
    courses?: CourseUncheckedUpdateManyWithoutFieldOfStudyNestedInput
  }

  export type FieldOfStudyCreateManyInput = {
    id?: number
    name: string
  }

  export type FieldOfStudyUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type FieldOfStudyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ProfessorOnFieldOfStudyCreateInput = {
    FieldOfStudy: FieldOfStudyCreateNestedOneWithoutProfessorsInput
    Professor: ProfessorCreateNestedOneWithoutFieldsOfStudyInput
  }

  export type ProfessorOnFieldOfStudyUncheckedCreateInput = {
    fieldOfStudyId: number
    professorUserId: number
  }

  export type ProfessorOnFieldOfStudyUpdateInput = {
    FieldOfStudy?: FieldOfStudyUpdateOneRequiredWithoutProfessorsNestedInput
    Professor?: ProfessorUpdateOneRequiredWithoutFieldsOfStudyNestedInput
  }

  export type ProfessorOnFieldOfStudyUncheckedUpdateInput = {
    fieldOfStudyId?: IntFieldUpdateOperationsInput | number
    professorUserId?: IntFieldUpdateOperationsInput | number
  }

  export type ProfessorOnFieldOfStudyCreateManyInput = {
    fieldOfStudyId: number
    professorUserId: number
  }

  export type ProfessorOnFieldOfStudyUpdateManyMutationInput = {

  }

  export type ProfessorOnFieldOfStudyUncheckedUpdateManyInput = {
    fieldOfStudyId?: IntFieldUpdateOperationsInput | number
    professorUserId?: IntFieldUpdateOperationsInput | number
  }

  export type StudentOnFieldOfStudyCreateInput = {
    Student: StudentCreateNestedOneWithoutFieldsOfStudyInput
    FieldOfStudy: FieldOfStudyCreateNestedOneWithoutStudentsInput
  }

  export type StudentOnFieldOfStudyUncheckedCreateInput = {
    studentUserId: number
    fieldOfStudyId: number
  }

  export type StudentOnFieldOfStudyUpdateInput = {
    Student?: StudentUpdateOneRequiredWithoutFieldsOfStudyNestedInput
    FieldOfStudy?: FieldOfStudyUpdateOneRequiredWithoutStudentsNestedInput
  }

  export type StudentOnFieldOfStudyUncheckedUpdateInput = {
    studentUserId?: IntFieldUpdateOperationsInput | number
    fieldOfStudyId?: IntFieldUpdateOperationsInput | number
  }

  export type StudentOnFieldOfStudyCreateManyInput = {
    studentUserId: number
    fieldOfStudyId: number
  }

  export type StudentOnFieldOfStudyUpdateManyMutationInput = {

  }

  export type StudentOnFieldOfStudyUncheckedUpdateManyInput = {
    studentUserId?: IntFieldUpdateOperationsInput | number
    fieldOfStudyId?: IntFieldUpdateOperationsInput | number
  }

  export type CourseCreateInput = {
    name: string
    description: string
    ects: number
    hoursOfLecture: number
    hoursOfLabs: number
    numberOfExams: number
    isAvailable?: boolean
    FieldOfStudy: FieldOfStudyCreateNestedOneWithoutCoursesInput
    StudyLevel: StudyLevelCreateNestedOneWithoutCoursesInput
    Students?: StudentOnCourseCreateNestedManyWithoutCourseInput
    Comments?: CommentCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    ects: number
    hoursOfLecture: number
    hoursOfLabs: number
    numberOfExams: number
    isAvailable?: boolean
    fieldOfStudyId: number
    studyLevelId: number
    Students?: StudentOnCourseUncheckedCreateNestedManyWithoutCourseInput
    Comments?: CommentUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ects?: IntFieldUpdateOperationsInput | number
    hoursOfLecture?: FloatFieldUpdateOperationsInput | number
    hoursOfLabs?: FloatFieldUpdateOperationsInput | number
    numberOfExams?: IntFieldUpdateOperationsInput | number
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    FieldOfStudy?: FieldOfStudyUpdateOneRequiredWithoutCoursesNestedInput
    StudyLevel?: StudyLevelUpdateOneRequiredWithoutCoursesNestedInput
    Students?: StudentOnCourseUpdateManyWithoutCourseNestedInput
    Comments?: CommentUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ects?: IntFieldUpdateOperationsInput | number
    hoursOfLecture?: FloatFieldUpdateOperationsInput | number
    hoursOfLabs?: FloatFieldUpdateOperationsInput | number
    numberOfExams?: IntFieldUpdateOperationsInput | number
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    fieldOfStudyId?: IntFieldUpdateOperationsInput | number
    studyLevelId?: IntFieldUpdateOperationsInput | number
    Students?: StudentOnCourseUncheckedUpdateManyWithoutCourseNestedInput
    Comments?: CommentUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseCreateManyInput = {
    id?: number
    name: string
    description: string
    ects: number
    hoursOfLecture: number
    hoursOfLabs: number
    numberOfExams: number
    isAvailable?: boolean
    fieldOfStudyId: number
    studyLevelId: number
  }

  export type CourseUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ects?: IntFieldUpdateOperationsInput | number
    hoursOfLecture?: FloatFieldUpdateOperationsInput | number
    hoursOfLabs?: FloatFieldUpdateOperationsInput | number
    numberOfExams?: IntFieldUpdateOperationsInput | number
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CourseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ects?: IntFieldUpdateOperationsInput | number
    hoursOfLecture?: FloatFieldUpdateOperationsInput | number
    hoursOfLabs?: FloatFieldUpdateOperationsInput | number
    numberOfExams?: IntFieldUpdateOperationsInput | number
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    fieldOfStudyId?: IntFieldUpdateOperationsInput | number
    studyLevelId?: IntFieldUpdateOperationsInput | number
  }

  export type StudentOnCourseCreateInput = {
    Student: StudentCreateNestedOneWithoutCoursesInput
    Course: CourseCreateNestedOneWithoutStudentsInput
    Rate?: RateCreateNestedOneWithoutStudentOnCourseInput
  }

  export type StudentOnCourseUncheckedCreateInput = {
    studentUserId: number
    courseId: number
    Rate?: RateUncheckedCreateNestedOneWithoutStudentOnCourseInput
  }

  export type StudentOnCourseUpdateInput = {
    Student?: StudentUpdateOneRequiredWithoutCoursesNestedInput
    Course?: CourseUpdateOneRequiredWithoutStudentsNestedInput
    Rate?: RateUpdateOneWithoutStudentOnCourseNestedInput
  }

  export type StudentOnCourseUncheckedUpdateInput = {
    studentUserId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    Rate?: RateUncheckedUpdateOneWithoutStudentOnCourseNestedInput
  }

  export type StudentOnCourseCreateManyInput = {
    studentUserId: number
    courseId: number
  }

  export type StudentOnCourseUpdateManyMutationInput = {

  }

  export type StudentOnCourseUncheckedUpdateManyInput = {
    studentUserId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentCreateInput = {
    content: string
    date: Date | string
    Student: StudentCreateNestedOneWithoutCommentsInput
    Course: CourseCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateInput = {
    id?: number
    content: string
    date: Date | string
    studentUserId: number
    courseId: number
  }

  export type CommentUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    Student?: StudentUpdateOneRequiredWithoutCommentsNestedInput
    Course?: CourseUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    studentUserId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentCreateManyInput = {
    id?: number
    content: string
    date: Date | string
    studentUserId: number
    courseId: number
  }

  export type CommentUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    studentUserId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
  }

  export type RateCreateInput = {
    rate: number
    StudentOnCourse: StudentOnCourseCreateNestedOneWithoutRateInput
  }

  export type RateUncheckedCreateInput = {
    studentId: number
    courseId: number
    rate: number
  }

  export type RateUpdateInput = {
    rate?: IntFieldUpdateOperationsInput | number
    StudentOnCourse?: StudentOnCourseUpdateOneRequiredWithoutRateNestedInput
  }

  export type RateUncheckedUpdateInput = {
    studentId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    rate?: IntFieldUpdateOperationsInput | number
  }

  export type RateCreateManyInput = {
    studentId: number
    courseId: number
    rate: number
  }

  export type RateUpdateManyMutationInput = {
    rate?: IntFieldUpdateOperationsInput | number
  }

  export type RateUncheckedUpdateManyInput = {
    studentId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    rate?: IntFieldUpdateOperationsInput | number
  }

  export type StudyLevelCreateInput = {
    name: string
    students?: StudentCreateNestedManyWithoutStudyLevelInput
    courses?: CourseCreateNestedManyWithoutStudyLevelInput
  }

  export type StudyLevelUncheckedCreateInput = {
    id?: number
    name: string
    students?: StudentUncheckedCreateNestedManyWithoutStudyLevelInput
    courses?: CourseUncheckedCreateNestedManyWithoutStudyLevelInput
  }

  export type StudyLevelUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    students?: StudentUpdateManyWithoutStudyLevelNestedInput
    courses?: CourseUpdateManyWithoutStudyLevelNestedInput
  }

  export type StudyLevelUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    students?: StudentUncheckedUpdateManyWithoutStudyLevelNestedInput
    courses?: CourseUncheckedUpdateManyWithoutStudyLevelNestedInput
  }

  export type StudyLevelCreateManyInput = {
    id?: number
    name: string
  }

  export type StudyLevelUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type StudyLevelUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type AdminNullableRelationFilter = {
    is?: AdminWhereInput | null
    isNot?: AdminWhereInput | null
  }

  export type ProfessorNullableRelationFilter = {
    is?: ProfessorWhereInput | null
    isNot?: ProfessorWhereInput | null
  }

  export type StudentNullableRelationFilter = {
    is?: StudentWhereInput | null
    isNot?: StudentWhereInput | null
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    isVerified?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    isVerified?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    isVerified?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AdminCountOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type AdminAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type AdminSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type ProfessorOnFieldOfStudyListRelationFilter = {
    every?: ProfessorOnFieldOfStudyWhereInput
    some?: ProfessorOnFieldOfStudyWhereInput
    none?: ProfessorOnFieldOfStudyWhereInput
  }

  export type ProfessorOnFieldOfStudyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfessorCountOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type ProfessorAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type ProfessorMaxOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type ProfessorMinOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type ProfessorSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type CountryRelationFilter = {
    is?: CountryWhereInput
    isNot?: CountryWhereInput
  }

  export type SchoolRelationFilter = {
    is?: SchoolWhereInput
    isNot?: SchoolWhereInput
  }

  export type StudyLevelRelationFilter = {
    is?: StudyLevelWhereInput
    isNot?: StudyLevelWhereInput
  }

  export type StudentOnFieldOfStudyListRelationFilter = {
    every?: StudentOnFieldOfStudyWhereInput
    some?: StudentOnFieldOfStudyWhereInput
    none?: StudentOnFieldOfStudyWhereInput
  }

  export type StudentOnCourseListRelationFilter = {
    every?: StudentOnCourseWhereInput
    some?: StudentOnCourseWhereInput
    none?: StudentOnCourseWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type StudentOnFieldOfStudyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentOnCourseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentCountOrderByAggregateInput = {
    userId?: SortOrder
    countryId?: SortOrder
    schoolId?: SortOrder
    studyLevelId?: SortOrder
  }

  export type StudentAvgOrderByAggregateInput = {
    userId?: SortOrder
    countryId?: SortOrder
    schoolId?: SortOrder
    studyLevelId?: SortOrder
  }

  export type StudentMaxOrderByAggregateInput = {
    userId?: SortOrder
    countryId?: SortOrder
    schoolId?: SortOrder
    studyLevelId?: SortOrder
  }

  export type StudentMinOrderByAggregateInput = {
    userId?: SortOrder
    countryId?: SortOrder
    schoolId?: SortOrder
    studyLevelId?: SortOrder
  }

  export type StudentSumOrderByAggregateInput = {
    userId?: SortOrder
    countryId?: SortOrder
    schoolId?: SortOrder
    studyLevelId?: SortOrder
  }

  export type StudentListRelationFilter = {
    every?: StudentWhereInput
    some?: StudentWhereInput
    none?: StudentWhereInput
  }

  export type UniversityListRelationFilter = {
    every?: UniversityWhereInput
    some?: UniversityWhereInput
    none?: UniversityWhereInput
  }

  export type StudentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UniversityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CountryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    tag?: SortOrder
  }

  export type CountryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CountryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    tag?: SortOrder
  }

  export type CountryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    tag?: SortOrder
  }

  export type CountrySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SchoolListRelationFilter = {
    every?: SchoolWhereInput
    some?: SchoolWhereInput
    none?: SchoolWhereInput
  }

  export type SchoolOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UniversityCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    countryId?: SortOrder
  }

  export type UniversityAvgOrderByAggregateInput = {
    id?: SortOrder
    countryId?: SortOrder
  }

  export type UniversityMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    countryId?: SortOrder
  }

  export type UniversityMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    countryId?: SortOrder
  }

  export type UniversitySumOrderByAggregateInput = {
    id?: SortOrder
    countryId?: SortOrder
  }

  export type UniversityRelationFilter = {
    is?: UniversityWhereInput
    isNot?: UniversityWhereInput
  }

  export type SchoolCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    universityId?: SortOrder
  }

  export type SchoolAvgOrderByAggregateInput = {
    id?: SortOrder
    universityId?: SortOrder
  }

  export type SchoolMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    universityId?: SortOrder
  }

  export type SchoolMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    universityId?: SortOrder
  }

  export type SchoolSumOrderByAggregateInput = {
    id?: SortOrder
    universityId?: SortOrder
  }

  export type CourseListRelationFilter = {
    every?: CourseWhereInput
    some?: CourseWhereInput
    none?: CourseWhereInput
  }

  export type CourseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FieldOfStudyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type FieldOfStudyAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FieldOfStudyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type FieldOfStudyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type FieldOfStudySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FieldOfStudyRelationFilter = {
    is?: FieldOfStudyWhereInput
    isNot?: FieldOfStudyWhereInput
  }

  export type ProfessorRelationFilter = {
    is?: ProfessorWhereInput
    isNot?: ProfessorWhereInput
  }

  export type ProfessorOnFieldOfStudyFieldOfStudyIdProfessorUserIdCompoundUniqueInput = {
    fieldOfStudyId: number
    professorUserId: number
  }

  export type ProfessorOnFieldOfStudyCountOrderByAggregateInput = {
    fieldOfStudyId?: SortOrder
    professorUserId?: SortOrder
  }

  export type ProfessorOnFieldOfStudyAvgOrderByAggregateInput = {
    fieldOfStudyId?: SortOrder
    professorUserId?: SortOrder
  }

  export type ProfessorOnFieldOfStudyMaxOrderByAggregateInput = {
    fieldOfStudyId?: SortOrder
    professorUserId?: SortOrder
  }

  export type ProfessorOnFieldOfStudyMinOrderByAggregateInput = {
    fieldOfStudyId?: SortOrder
    professorUserId?: SortOrder
  }

  export type ProfessorOnFieldOfStudySumOrderByAggregateInput = {
    fieldOfStudyId?: SortOrder
    professorUserId?: SortOrder
  }

  export type StudentRelationFilter = {
    is?: StudentWhereInput
    isNot?: StudentWhereInput
  }

  export type StudentOnFieldOfStudyFieldOfStudyIdStudentUserIdCompoundUniqueInput = {
    fieldOfStudyId: number
    studentUserId: number
  }

  export type StudentOnFieldOfStudyCountOrderByAggregateInput = {
    studentUserId?: SortOrder
    fieldOfStudyId?: SortOrder
  }

  export type StudentOnFieldOfStudyAvgOrderByAggregateInput = {
    studentUserId?: SortOrder
    fieldOfStudyId?: SortOrder
  }

  export type StudentOnFieldOfStudyMaxOrderByAggregateInput = {
    studentUserId?: SortOrder
    fieldOfStudyId?: SortOrder
  }

  export type StudentOnFieldOfStudyMinOrderByAggregateInput = {
    studentUserId?: SortOrder
    fieldOfStudyId?: SortOrder
  }

  export type StudentOnFieldOfStudySumOrderByAggregateInput = {
    studentUserId?: SortOrder
    fieldOfStudyId?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type CourseCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    ects?: SortOrder
    hoursOfLecture?: SortOrder
    hoursOfLabs?: SortOrder
    numberOfExams?: SortOrder
    isAvailable?: SortOrder
    fieldOfStudyId?: SortOrder
    studyLevelId?: SortOrder
  }

  export type CourseAvgOrderByAggregateInput = {
    id?: SortOrder
    ects?: SortOrder
    hoursOfLecture?: SortOrder
    hoursOfLabs?: SortOrder
    numberOfExams?: SortOrder
    fieldOfStudyId?: SortOrder
    studyLevelId?: SortOrder
  }

  export type CourseMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    ects?: SortOrder
    hoursOfLecture?: SortOrder
    hoursOfLabs?: SortOrder
    numberOfExams?: SortOrder
    isAvailable?: SortOrder
    fieldOfStudyId?: SortOrder
    studyLevelId?: SortOrder
  }

  export type CourseMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    ects?: SortOrder
    hoursOfLecture?: SortOrder
    hoursOfLabs?: SortOrder
    numberOfExams?: SortOrder
    isAvailable?: SortOrder
    fieldOfStudyId?: SortOrder
    studyLevelId?: SortOrder
  }

  export type CourseSumOrderByAggregateInput = {
    id?: SortOrder
    ects?: SortOrder
    hoursOfLecture?: SortOrder
    hoursOfLabs?: SortOrder
    numberOfExams?: SortOrder
    fieldOfStudyId?: SortOrder
    studyLevelId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type CourseRelationFilter = {
    is?: CourseWhereInput
    isNot?: CourseWhereInput
  }

  export type RateNullableRelationFilter = {
    is?: RateWhereInput | null
    isNot?: RateWhereInput | null
  }

  export type StudentOnCourseStudentUserIdCourseIdCompoundUniqueInput = {
    studentUserId: number
    courseId: number
  }

  export type StudentOnCourseCountOrderByAggregateInput = {
    studentUserId?: SortOrder
    courseId?: SortOrder
  }

  export type StudentOnCourseAvgOrderByAggregateInput = {
    studentUserId?: SortOrder
    courseId?: SortOrder
  }

  export type StudentOnCourseMaxOrderByAggregateInput = {
    studentUserId?: SortOrder
    courseId?: SortOrder
  }

  export type StudentOnCourseMinOrderByAggregateInput = {
    studentUserId?: SortOrder
    courseId?: SortOrder
  }

  export type StudentOnCourseSumOrderByAggregateInput = {
    studentUserId?: SortOrder
    courseId?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    date?: SortOrder
    studentUserId?: SortOrder
    courseId?: SortOrder
  }

  export type CommentAvgOrderByAggregateInput = {
    id?: SortOrder
    studentUserId?: SortOrder
    courseId?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    date?: SortOrder
    studentUserId?: SortOrder
    courseId?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    date?: SortOrder
    studentUserId?: SortOrder
    courseId?: SortOrder
  }

  export type CommentSumOrderByAggregateInput = {
    id?: SortOrder
    studentUserId?: SortOrder
    courseId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StudentOnCourseRelationFilter = {
    is?: StudentOnCourseWhereInput
    isNot?: StudentOnCourseWhereInput
  }

  export type RateRateIdCompoundUniqueInput = {
    studentId: number
    courseId: number
  }

  export type RateCountOrderByAggregateInput = {
    studentId?: SortOrder
    courseId?: SortOrder
    rate?: SortOrder
  }

  export type RateAvgOrderByAggregateInput = {
    studentId?: SortOrder
    courseId?: SortOrder
    rate?: SortOrder
  }

  export type RateMaxOrderByAggregateInput = {
    studentId?: SortOrder
    courseId?: SortOrder
    rate?: SortOrder
  }

  export type RateMinOrderByAggregateInput = {
    studentId?: SortOrder
    courseId?: SortOrder
    rate?: SortOrder
  }

  export type RateSumOrderByAggregateInput = {
    studentId?: SortOrder
    courseId?: SortOrder
    rate?: SortOrder
  }

  export type StudyLevelCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type StudyLevelAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StudyLevelMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type StudyLevelMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type StudyLevelSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AdminCreateNestedOneWithoutUserInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    connect?: AdminWhereUniqueInput
  }

  export type ProfessorCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfessorCreateWithoutUserInput, ProfessorUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutUserInput
    connect?: ProfessorWhereUniqueInput
  }

  export type StudentCreateNestedOneWithoutUserInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput
    connect?: StudentWhereUniqueInput
  }

  export type AdminUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    connect?: AdminWhereUniqueInput
  }

  export type ProfessorUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfessorCreateWithoutUserInput, ProfessorUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutUserInput
    connect?: ProfessorWhereUniqueInput
  }

  export type StudentUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput
    connect?: StudentWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type AdminUpdateOneWithoutUserNestedInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    upsert?: AdminUpsertWithoutUserInput
    disconnect?: AdminWhereInput | boolean
    delete?: AdminWhereInput | boolean
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutUserInput, AdminUpdateWithoutUserInput>, AdminUncheckedUpdateWithoutUserInput>
  }

  export type ProfessorUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfessorCreateWithoutUserInput, ProfessorUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutUserInput
    upsert?: ProfessorUpsertWithoutUserInput
    disconnect?: ProfessorWhereInput | boolean
    delete?: ProfessorWhereInput | boolean
    connect?: ProfessorWhereUniqueInput
    update?: XOR<XOR<ProfessorUpdateToOneWithWhereWithoutUserInput, ProfessorUpdateWithoutUserInput>, ProfessorUncheckedUpdateWithoutUserInput>
  }

  export type StudentUpdateOneWithoutUserNestedInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput
    upsert?: StudentUpsertWithoutUserInput
    disconnect?: StudentWhereInput | boolean
    delete?: StudentWhereInput | boolean
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutUserInput, StudentUpdateWithoutUserInput>, StudentUncheckedUpdateWithoutUserInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AdminUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput
    upsert?: AdminUpsertWithoutUserInput
    disconnect?: AdminWhereInput | boolean
    delete?: AdminWhereInput | boolean
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutUserInput, AdminUpdateWithoutUserInput>, AdminUncheckedUpdateWithoutUserInput>
  }

  export type ProfessorUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfessorCreateWithoutUserInput, ProfessorUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutUserInput
    upsert?: ProfessorUpsertWithoutUserInput
    disconnect?: ProfessorWhereInput | boolean
    delete?: ProfessorWhereInput | boolean
    connect?: ProfessorWhereUniqueInput
    update?: XOR<XOR<ProfessorUpdateToOneWithWhereWithoutUserInput, ProfessorUpdateWithoutUserInput>, ProfessorUncheckedUpdateWithoutUserInput>
  }

  export type StudentUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput
    upsert?: StudentUpsertWithoutUserInput
    disconnect?: StudentWhereInput | boolean
    delete?: StudentWhereInput | boolean
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutUserInput, StudentUpdateWithoutUserInput>, StudentUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutAdminInput = {
    create?: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAdminNestedInput = {
    create?: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminInput
    upsert?: UserUpsertWithoutAdminInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAdminInput, UserUpdateWithoutAdminInput>, UserUncheckedUpdateWithoutAdminInput>
  }

  export type UserCreateNestedOneWithoutProfessorInput = {
    create?: XOR<UserCreateWithoutProfessorInput, UserUncheckedCreateWithoutProfessorInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfessorInput
    connect?: UserWhereUniqueInput
  }

  export type ProfessorOnFieldOfStudyCreateNestedManyWithoutProfessorInput = {
    create?: XOR<ProfessorOnFieldOfStudyCreateWithoutProfessorInput, ProfessorOnFieldOfStudyUncheckedCreateWithoutProfessorInput> | ProfessorOnFieldOfStudyCreateWithoutProfessorInput[] | ProfessorOnFieldOfStudyUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: ProfessorOnFieldOfStudyCreateOrConnectWithoutProfessorInput | ProfessorOnFieldOfStudyCreateOrConnectWithoutProfessorInput[]
    createMany?: ProfessorOnFieldOfStudyCreateManyProfessorInputEnvelope
    connect?: ProfessorOnFieldOfStudyWhereUniqueInput | ProfessorOnFieldOfStudyWhereUniqueInput[]
  }

  export type ProfessorOnFieldOfStudyUncheckedCreateNestedManyWithoutProfessorInput = {
    create?: XOR<ProfessorOnFieldOfStudyCreateWithoutProfessorInput, ProfessorOnFieldOfStudyUncheckedCreateWithoutProfessorInput> | ProfessorOnFieldOfStudyCreateWithoutProfessorInput[] | ProfessorOnFieldOfStudyUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: ProfessorOnFieldOfStudyCreateOrConnectWithoutProfessorInput | ProfessorOnFieldOfStudyCreateOrConnectWithoutProfessorInput[]
    createMany?: ProfessorOnFieldOfStudyCreateManyProfessorInputEnvelope
    connect?: ProfessorOnFieldOfStudyWhereUniqueInput | ProfessorOnFieldOfStudyWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutProfessorNestedInput = {
    create?: XOR<UserCreateWithoutProfessorInput, UserUncheckedCreateWithoutProfessorInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfessorInput
    upsert?: UserUpsertWithoutProfessorInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfessorInput, UserUpdateWithoutProfessorInput>, UserUncheckedUpdateWithoutProfessorInput>
  }

  export type ProfessorOnFieldOfStudyUpdateManyWithoutProfessorNestedInput = {
    create?: XOR<ProfessorOnFieldOfStudyCreateWithoutProfessorInput, ProfessorOnFieldOfStudyUncheckedCreateWithoutProfessorInput> | ProfessorOnFieldOfStudyCreateWithoutProfessorInput[] | ProfessorOnFieldOfStudyUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: ProfessorOnFieldOfStudyCreateOrConnectWithoutProfessorInput | ProfessorOnFieldOfStudyCreateOrConnectWithoutProfessorInput[]
    upsert?: ProfessorOnFieldOfStudyUpsertWithWhereUniqueWithoutProfessorInput | ProfessorOnFieldOfStudyUpsertWithWhereUniqueWithoutProfessorInput[]
    createMany?: ProfessorOnFieldOfStudyCreateManyProfessorInputEnvelope
    set?: ProfessorOnFieldOfStudyWhereUniqueInput | ProfessorOnFieldOfStudyWhereUniqueInput[]
    disconnect?: ProfessorOnFieldOfStudyWhereUniqueInput | ProfessorOnFieldOfStudyWhereUniqueInput[]
    delete?: ProfessorOnFieldOfStudyWhereUniqueInput | ProfessorOnFieldOfStudyWhereUniqueInput[]
    connect?: ProfessorOnFieldOfStudyWhereUniqueInput | ProfessorOnFieldOfStudyWhereUniqueInput[]
    update?: ProfessorOnFieldOfStudyUpdateWithWhereUniqueWithoutProfessorInput | ProfessorOnFieldOfStudyUpdateWithWhereUniqueWithoutProfessorInput[]
    updateMany?: ProfessorOnFieldOfStudyUpdateManyWithWhereWithoutProfessorInput | ProfessorOnFieldOfStudyUpdateManyWithWhereWithoutProfessorInput[]
    deleteMany?: ProfessorOnFieldOfStudyScalarWhereInput | ProfessorOnFieldOfStudyScalarWhereInput[]
  }

  export type ProfessorOnFieldOfStudyUncheckedUpdateManyWithoutProfessorNestedInput = {
    create?: XOR<ProfessorOnFieldOfStudyCreateWithoutProfessorInput, ProfessorOnFieldOfStudyUncheckedCreateWithoutProfessorInput> | ProfessorOnFieldOfStudyCreateWithoutProfessorInput[] | ProfessorOnFieldOfStudyUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: ProfessorOnFieldOfStudyCreateOrConnectWithoutProfessorInput | ProfessorOnFieldOfStudyCreateOrConnectWithoutProfessorInput[]
    upsert?: ProfessorOnFieldOfStudyUpsertWithWhereUniqueWithoutProfessorInput | ProfessorOnFieldOfStudyUpsertWithWhereUniqueWithoutProfessorInput[]
    createMany?: ProfessorOnFieldOfStudyCreateManyProfessorInputEnvelope
    set?: ProfessorOnFieldOfStudyWhereUniqueInput | ProfessorOnFieldOfStudyWhereUniqueInput[]
    disconnect?: ProfessorOnFieldOfStudyWhereUniqueInput | ProfessorOnFieldOfStudyWhereUniqueInput[]
    delete?: ProfessorOnFieldOfStudyWhereUniqueInput | ProfessorOnFieldOfStudyWhereUniqueInput[]
    connect?: ProfessorOnFieldOfStudyWhereUniqueInput | ProfessorOnFieldOfStudyWhereUniqueInput[]
    update?: ProfessorOnFieldOfStudyUpdateWithWhereUniqueWithoutProfessorInput | ProfessorOnFieldOfStudyUpdateWithWhereUniqueWithoutProfessorInput[]
    updateMany?: ProfessorOnFieldOfStudyUpdateManyWithWhereWithoutProfessorInput | ProfessorOnFieldOfStudyUpdateManyWithWhereWithoutProfessorInput[]
    deleteMany?: ProfessorOnFieldOfStudyScalarWhereInput | ProfessorOnFieldOfStudyScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutStudentInput = {
    create?: XOR<UserCreateWithoutStudentInput, UserUncheckedCreateWithoutStudentInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentInput
    connect?: UserWhereUniqueInput
  }

  export type CountryCreateNestedOneWithoutStudentsInput = {
    create?: XOR<CountryCreateWithoutStudentsInput, CountryUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: CountryCreateOrConnectWithoutStudentsInput
    connect?: CountryWhereUniqueInput
  }

  export type SchoolCreateNestedOneWithoutStudentsInput = {
    create?: XOR<SchoolCreateWithoutStudentsInput, SchoolUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutStudentsInput
    connect?: SchoolWhereUniqueInput
  }

  export type StudyLevelCreateNestedOneWithoutStudentsInput = {
    create?: XOR<StudyLevelCreateWithoutStudentsInput, StudyLevelUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: StudyLevelCreateOrConnectWithoutStudentsInput
    connect?: StudyLevelWhereUniqueInput
  }

  export type StudentOnFieldOfStudyCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentOnFieldOfStudyCreateWithoutStudentInput, StudentOnFieldOfStudyUncheckedCreateWithoutStudentInput> | StudentOnFieldOfStudyCreateWithoutStudentInput[] | StudentOnFieldOfStudyUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentOnFieldOfStudyCreateOrConnectWithoutStudentInput | StudentOnFieldOfStudyCreateOrConnectWithoutStudentInput[]
    createMany?: StudentOnFieldOfStudyCreateManyStudentInputEnvelope
    connect?: StudentOnFieldOfStudyWhereUniqueInput | StudentOnFieldOfStudyWhereUniqueInput[]
  }

  export type StudentOnCourseCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentOnCourseCreateWithoutStudentInput, StudentOnCourseUncheckedCreateWithoutStudentInput> | StudentOnCourseCreateWithoutStudentInput[] | StudentOnCourseUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentOnCourseCreateOrConnectWithoutStudentInput | StudentOnCourseCreateOrConnectWithoutStudentInput[]
    createMany?: StudentOnCourseCreateManyStudentInputEnvelope
    connect?: StudentOnCourseWhereUniqueInput | StudentOnCourseWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutStudentInput = {
    create?: XOR<CommentCreateWithoutStudentInput, CommentUncheckedCreateWithoutStudentInput> | CommentCreateWithoutStudentInput[] | CommentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutStudentInput | CommentCreateOrConnectWithoutStudentInput[]
    createMany?: CommentCreateManyStudentInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type StudentOnFieldOfStudyUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentOnFieldOfStudyCreateWithoutStudentInput, StudentOnFieldOfStudyUncheckedCreateWithoutStudentInput> | StudentOnFieldOfStudyCreateWithoutStudentInput[] | StudentOnFieldOfStudyUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentOnFieldOfStudyCreateOrConnectWithoutStudentInput | StudentOnFieldOfStudyCreateOrConnectWithoutStudentInput[]
    createMany?: StudentOnFieldOfStudyCreateManyStudentInputEnvelope
    connect?: StudentOnFieldOfStudyWhereUniqueInput | StudentOnFieldOfStudyWhereUniqueInput[]
  }

  export type StudentOnCourseUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentOnCourseCreateWithoutStudentInput, StudentOnCourseUncheckedCreateWithoutStudentInput> | StudentOnCourseCreateWithoutStudentInput[] | StudentOnCourseUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentOnCourseCreateOrConnectWithoutStudentInput | StudentOnCourseCreateOrConnectWithoutStudentInput[]
    createMany?: StudentOnCourseCreateManyStudentInputEnvelope
    connect?: StudentOnCourseWhereUniqueInput | StudentOnCourseWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<CommentCreateWithoutStudentInput, CommentUncheckedCreateWithoutStudentInput> | CommentCreateWithoutStudentInput[] | CommentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutStudentInput | CommentCreateOrConnectWithoutStudentInput[]
    createMany?: CommentCreateManyStudentInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutStudentNestedInput = {
    create?: XOR<UserCreateWithoutStudentInput, UserUncheckedCreateWithoutStudentInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentInput
    upsert?: UserUpsertWithoutStudentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStudentInput, UserUpdateWithoutStudentInput>, UserUncheckedUpdateWithoutStudentInput>
  }

  export type CountryUpdateOneRequiredWithoutStudentsNestedInput = {
    create?: XOR<CountryCreateWithoutStudentsInput, CountryUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: CountryCreateOrConnectWithoutStudentsInput
    upsert?: CountryUpsertWithoutStudentsInput
    connect?: CountryWhereUniqueInput
    update?: XOR<XOR<CountryUpdateToOneWithWhereWithoutStudentsInput, CountryUpdateWithoutStudentsInput>, CountryUncheckedUpdateWithoutStudentsInput>
  }

  export type SchoolUpdateOneRequiredWithoutStudentsNestedInput = {
    create?: XOR<SchoolCreateWithoutStudentsInput, SchoolUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutStudentsInput
    upsert?: SchoolUpsertWithoutStudentsInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutStudentsInput, SchoolUpdateWithoutStudentsInput>, SchoolUncheckedUpdateWithoutStudentsInput>
  }

  export type StudyLevelUpdateOneRequiredWithoutStudentsNestedInput = {
    create?: XOR<StudyLevelCreateWithoutStudentsInput, StudyLevelUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: StudyLevelCreateOrConnectWithoutStudentsInput
    upsert?: StudyLevelUpsertWithoutStudentsInput
    connect?: StudyLevelWhereUniqueInput
    update?: XOR<XOR<StudyLevelUpdateToOneWithWhereWithoutStudentsInput, StudyLevelUpdateWithoutStudentsInput>, StudyLevelUncheckedUpdateWithoutStudentsInput>
  }

  export type StudentOnFieldOfStudyUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentOnFieldOfStudyCreateWithoutStudentInput, StudentOnFieldOfStudyUncheckedCreateWithoutStudentInput> | StudentOnFieldOfStudyCreateWithoutStudentInput[] | StudentOnFieldOfStudyUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentOnFieldOfStudyCreateOrConnectWithoutStudentInput | StudentOnFieldOfStudyCreateOrConnectWithoutStudentInput[]
    upsert?: StudentOnFieldOfStudyUpsertWithWhereUniqueWithoutStudentInput | StudentOnFieldOfStudyUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentOnFieldOfStudyCreateManyStudentInputEnvelope
    set?: StudentOnFieldOfStudyWhereUniqueInput | StudentOnFieldOfStudyWhereUniqueInput[]
    disconnect?: StudentOnFieldOfStudyWhereUniqueInput | StudentOnFieldOfStudyWhereUniqueInput[]
    delete?: StudentOnFieldOfStudyWhereUniqueInput | StudentOnFieldOfStudyWhereUniqueInput[]
    connect?: StudentOnFieldOfStudyWhereUniqueInput | StudentOnFieldOfStudyWhereUniqueInput[]
    update?: StudentOnFieldOfStudyUpdateWithWhereUniqueWithoutStudentInput | StudentOnFieldOfStudyUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentOnFieldOfStudyUpdateManyWithWhereWithoutStudentInput | StudentOnFieldOfStudyUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentOnFieldOfStudyScalarWhereInput | StudentOnFieldOfStudyScalarWhereInput[]
  }

  export type StudentOnCourseUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentOnCourseCreateWithoutStudentInput, StudentOnCourseUncheckedCreateWithoutStudentInput> | StudentOnCourseCreateWithoutStudentInput[] | StudentOnCourseUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentOnCourseCreateOrConnectWithoutStudentInput | StudentOnCourseCreateOrConnectWithoutStudentInput[]
    upsert?: StudentOnCourseUpsertWithWhereUniqueWithoutStudentInput | StudentOnCourseUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentOnCourseCreateManyStudentInputEnvelope
    set?: StudentOnCourseWhereUniqueInput | StudentOnCourseWhereUniqueInput[]
    disconnect?: StudentOnCourseWhereUniqueInput | StudentOnCourseWhereUniqueInput[]
    delete?: StudentOnCourseWhereUniqueInput | StudentOnCourseWhereUniqueInput[]
    connect?: StudentOnCourseWhereUniqueInput | StudentOnCourseWhereUniqueInput[]
    update?: StudentOnCourseUpdateWithWhereUniqueWithoutStudentInput | StudentOnCourseUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentOnCourseUpdateManyWithWhereWithoutStudentInput | StudentOnCourseUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentOnCourseScalarWhereInput | StudentOnCourseScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutStudentNestedInput = {
    create?: XOR<CommentCreateWithoutStudentInput, CommentUncheckedCreateWithoutStudentInput> | CommentCreateWithoutStudentInput[] | CommentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutStudentInput | CommentCreateOrConnectWithoutStudentInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutStudentInput | CommentUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: CommentCreateManyStudentInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutStudentInput | CommentUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutStudentInput | CommentUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type StudentOnFieldOfStudyUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentOnFieldOfStudyCreateWithoutStudentInput, StudentOnFieldOfStudyUncheckedCreateWithoutStudentInput> | StudentOnFieldOfStudyCreateWithoutStudentInput[] | StudentOnFieldOfStudyUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentOnFieldOfStudyCreateOrConnectWithoutStudentInput | StudentOnFieldOfStudyCreateOrConnectWithoutStudentInput[]
    upsert?: StudentOnFieldOfStudyUpsertWithWhereUniqueWithoutStudentInput | StudentOnFieldOfStudyUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentOnFieldOfStudyCreateManyStudentInputEnvelope
    set?: StudentOnFieldOfStudyWhereUniqueInput | StudentOnFieldOfStudyWhereUniqueInput[]
    disconnect?: StudentOnFieldOfStudyWhereUniqueInput | StudentOnFieldOfStudyWhereUniqueInput[]
    delete?: StudentOnFieldOfStudyWhereUniqueInput | StudentOnFieldOfStudyWhereUniqueInput[]
    connect?: StudentOnFieldOfStudyWhereUniqueInput | StudentOnFieldOfStudyWhereUniqueInput[]
    update?: StudentOnFieldOfStudyUpdateWithWhereUniqueWithoutStudentInput | StudentOnFieldOfStudyUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentOnFieldOfStudyUpdateManyWithWhereWithoutStudentInput | StudentOnFieldOfStudyUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentOnFieldOfStudyScalarWhereInput | StudentOnFieldOfStudyScalarWhereInput[]
  }

  export type StudentOnCourseUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentOnCourseCreateWithoutStudentInput, StudentOnCourseUncheckedCreateWithoutStudentInput> | StudentOnCourseCreateWithoutStudentInput[] | StudentOnCourseUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentOnCourseCreateOrConnectWithoutStudentInput | StudentOnCourseCreateOrConnectWithoutStudentInput[]
    upsert?: StudentOnCourseUpsertWithWhereUniqueWithoutStudentInput | StudentOnCourseUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentOnCourseCreateManyStudentInputEnvelope
    set?: StudentOnCourseWhereUniqueInput | StudentOnCourseWhereUniqueInput[]
    disconnect?: StudentOnCourseWhereUniqueInput | StudentOnCourseWhereUniqueInput[]
    delete?: StudentOnCourseWhereUniqueInput | StudentOnCourseWhereUniqueInput[]
    connect?: StudentOnCourseWhereUniqueInput | StudentOnCourseWhereUniqueInput[]
    update?: StudentOnCourseUpdateWithWhereUniqueWithoutStudentInput | StudentOnCourseUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentOnCourseUpdateManyWithWhereWithoutStudentInput | StudentOnCourseUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentOnCourseScalarWhereInput | StudentOnCourseScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<CommentCreateWithoutStudentInput, CommentUncheckedCreateWithoutStudentInput> | CommentCreateWithoutStudentInput[] | CommentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutStudentInput | CommentCreateOrConnectWithoutStudentInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutStudentInput | CommentUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: CommentCreateManyStudentInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutStudentInput | CommentUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutStudentInput | CommentUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type StudentCreateNestedManyWithoutCountryInput = {
    create?: XOR<StudentCreateWithoutCountryInput, StudentUncheckedCreateWithoutCountryInput> | StudentCreateWithoutCountryInput[] | StudentUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutCountryInput | StudentCreateOrConnectWithoutCountryInput[]
    createMany?: StudentCreateManyCountryInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type UniversityCreateNestedManyWithoutCountryInput = {
    create?: XOR<UniversityCreateWithoutCountryInput, UniversityUncheckedCreateWithoutCountryInput> | UniversityCreateWithoutCountryInput[] | UniversityUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: UniversityCreateOrConnectWithoutCountryInput | UniversityCreateOrConnectWithoutCountryInput[]
    createMany?: UniversityCreateManyCountryInputEnvelope
    connect?: UniversityWhereUniqueInput | UniversityWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutCountryInput = {
    create?: XOR<StudentCreateWithoutCountryInput, StudentUncheckedCreateWithoutCountryInput> | StudentCreateWithoutCountryInput[] | StudentUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutCountryInput | StudentCreateOrConnectWithoutCountryInput[]
    createMany?: StudentCreateManyCountryInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type UniversityUncheckedCreateNestedManyWithoutCountryInput = {
    create?: XOR<UniversityCreateWithoutCountryInput, UniversityUncheckedCreateWithoutCountryInput> | UniversityCreateWithoutCountryInput[] | UniversityUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: UniversityCreateOrConnectWithoutCountryInput | UniversityCreateOrConnectWithoutCountryInput[]
    createMany?: UniversityCreateManyCountryInputEnvelope
    connect?: UniversityWhereUniqueInput | UniversityWhereUniqueInput[]
  }

  export type StudentUpdateManyWithoutCountryNestedInput = {
    create?: XOR<StudentCreateWithoutCountryInput, StudentUncheckedCreateWithoutCountryInput> | StudentCreateWithoutCountryInput[] | StudentUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutCountryInput | StudentCreateOrConnectWithoutCountryInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutCountryInput | StudentUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: StudentCreateManyCountryInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutCountryInput | StudentUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutCountryInput | StudentUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type UniversityUpdateManyWithoutCountryNestedInput = {
    create?: XOR<UniversityCreateWithoutCountryInput, UniversityUncheckedCreateWithoutCountryInput> | UniversityCreateWithoutCountryInput[] | UniversityUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: UniversityCreateOrConnectWithoutCountryInput | UniversityCreateOrConnectWithoutCountryInput[]
    upsert?: UniversityUpsertWithWhereUniqueWithoutCountryInput | UniversityUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: UniversityCreateManyCountryInputEnvelope
    set?: UniversityWhereUniqueInput | UniversityWhereUniqueInput[]
    disconnect?: UniversityWhereUniqueInput | UniversityWhereUniqueInput[]
    delete?: UniversityWhereUniqueInput | UniversityWhereUniqueInput[]
    connect?: UniversityWhereUniqueInput | UniversityWhereUniqueInput[]
    update?: UniversityUpdateWithWhereUniqueWithoutCountryInput | UniversityUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: UniversityUpdateManyWithWhereWithoutCountryInput | UniversityUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: UniversityScalarWhereInput | UniversityScalarWhereInput[]
  }

  export type StudentUncheckedUpdateManyWithoutCountryNestedInput = {
    create?: XOR<StudentCreateWithoutCountryInput, StudentUncheckedCreateWithoutCountryInput> | StudentCreateWithoutCountryInput[] | StudentUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutCountryInput | StudentCreateOrConnectWithoutCountryInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutCountryInput | StudentUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: StudentCreateManyCountryInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutCountryInput | StudentUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutCountryInput | StudentUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type UniversityUncheckedUpdateManyWithoutCountryNestedInput = {
    create?: XOR<UniversityCreateWithoutCountryInput, UniversityUncheckedCreateWithoutCountryInput> | UniversityCreateWithoutCountryInput[] | UniversityUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: UniversityCreateOrConnectWithoutCountryInput | UniversityCreateOrConnectWithoutCountryInput[]
    upsert?: UniversityUpsertWithWhereUniqueWithoutCountryInput | UniversityUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: UniversityCreateManyCountryInputEnvelope
    set?: UniversityWhereUniqueInput | UniversityWhereUniqueInput[]
    disconnect?: UniversityWhereUniqueInput | UniversityWhereUniqueInput[]
    delete?: UniversityWhereUniqueInput | UniversityWhereUniqueInput[]
    connect?: UniversityWhereUniqueInput | UniversityWhereUniqueInput[]
    update?: UniversityUpdateWithWhereUniqueWithoutCountryInput | UniversityUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: UniversityUpdateManyWithWhereWithoutCountryInput | UniversityUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: UniversityScalarWhereInput | UniversityScalarWhereInput[]
  }

  export type CountryCreateNestedOneWithoutUniversitiesInput = {
    create?: XOR<CountryCreateWithoutUniversitiesInput, CountryUncheckedCreateWithoutUniversitiesInput>
    connectOrCreate?: CountryCreateOrConnectWithoutUniversitiesInput
    connect?: CountryWhereUniqueInput
  }

  export type SchoolCreateNestedManyWithoutUniversityInput = {
    create?: XOR<SchoolCreateWithoutUniversityInput, SchoolUncheckedCreateWithoutUniversityInput> | SchoolCreateWithoutUniversityInput[] | SchoolUncheckedCreateWithoutUniversityInput[]
    connectOrCreate?: SchoolCreateOrConnectWithoutUniversityInput | SchoolCreateOrConnectWithoutUniversityInput[]
    createMany?: SchoolCreateManyUniversityInputEnvelope
    connect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
  }

  export type SchoolUncheckedCreateNestedManyWithoutUniversityInput = {
    create?: XOR<SchoolCreateWithoutUniversityInput, SchoolUncheckedCreateWithoutUniversityInput> | SchoolCreateWithoutUniversityInput[] | SchoolUncheckedCreateWithoutUniversityInput[]
    connectOrCreate?: SchoolCreateOrConnectWithoutUniversityInput | SchoolCreateOrConnectWithoutUniversityInput[]
    createMany?: SchoolCreateManyUniversityInputEnvelope
    connect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
  }

  export type CountryUpdateOneRequiredWithoutUniversitiesNestedInput = {
    create?: XOR<CountryCreateWithoutUniversitiesInput, CountryUncheckedCreateWithoutUniversitiesInput>
    connectOrCreate?: CountryCreateOrConnectWithoutUniversitiesInput
    upsert?: CountryUpsertWithoutUniversitiesInput
    connect?: CountryWhereUniqueInput
    update?: XOR<XOR<CountryUpdateToOneWithWhereWithoutUniversitiesInput, CountryUpdateWithoutUniversitiesInput>, CountryUncheckedUpdateWithoutUniversitiesInput>
  }

  export type SchoolUpdateManyWithoutUniversityNestedInput = {
    create?: XOR<SchoolCreateWithoutUniversityInput, SchoolUncheckedCreateWithoutUniversityInput> | SchoolCreateWithoutUniversityInput[] | SchoolUncheckedCreateWithoutUniversityInput[]
    connectOrCreate?: SchoolCreateOrConnectWithoutUniversityInput | SchoolCreateOrConnectWithoutUniversityInput[]
    upsert?: SchoolUpsertWithWhereUniqueWithoutUniversityInput | SchoolUpsertWithWhereUniqueWithoutUniversityInput[]
    createMany?: SchoolCreateManyUniversityInputEnvelope
    set?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    disconnect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    delete?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    connect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    update?: SchoolUpdateWithWhereUniqueWithoutUniversityInput | SchoolUpdateWithWhereUniqueWithoutUniversityInput[]
    updateMany?: SchoolUpdateManyWithWhereWithoutUniversityInput | SchoolUpdateManyWithWhereWithoutUniversityInput[]
    deleteMany?: SchoolScalarWhereInput | SchoolScalarWhereInput[]
  }

  export type SchoolUncheckedUpdateManyWithoutUniversityNestedInput = {
    create?: XOR<SchoolCreateWithoutUniversityInput, SchoolUncheckedCreateWithoutUniversityInput> | SchoolCreateWithoutUniversityInput[] | SchoolUncheckedCreateWithoutUniversityInput[]
    connectOrCreate?: SchoolCreateOrConnectWithoutUniversityInput | SchoolCreateOrConnectWithoutUniversityInput[]
    upsert?: SchoolUpsertWithWhereUniqueWithoutUniversityInput | SchoolUpsertWithWhereUniqueWithoutUniversityInput[]
    createMany?: SchoolCreateManyUniversityInputEnvelope
    set?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    disconnect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    delete?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    connect?: SchoolWhereUniqueInput | SchoolWhereUniqueInput[]
    update?: SchoolUpdateWithWhereUniqueWithoutUniversityInput | SchoolUpdateWithWhereUniqueWithoutUniversityInput[]
    updateMany?: SchoolUpdateManyWithWhereWithoutUniversityInput | SchoolUpdateManyWithWhereWithoutUniversityInput[]
    deleteMany?: SchoolScalarWhereInput | SchoolScalarWhereInput[]
  }

  export type UniversityCreateNestedOneWithoutSchoolsInput = {
    create?: XOR<UniversityCreateWithoutSchoolsInput, UniversityUncheckedCreateWithoutSchoolsInput>
    connectOrCreate?: UniversityCreateOrConnectWithoutSchoolsInput
    connect?: UniversityWhereUniqueInput
  }

  export type StudentCreateNestedManyWithoutSchoolInput = {
    create?: XOR<StudentCreateWithoutSchoolInput, StudentUncheckedCreateWithoutSchoolInput> | StudentCreateWithoutSchoolInput[] | StudentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutSchoolInput | StudentCreateOrConnectWithoutSchoolInput[]
    createMany?: StudentCreateManySchoolInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<StudentCreateWithoutSchoolInput, StudentUncheckedCreateWithoutSchoolInput> | StudentCreateWithoutSchoolInput[] | StudentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutSchoolInput | StudentCreateOrConnectWithoutSchoolInput[]
    createMany?: StudentCreateManySchoolInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type UniversityUpdateOneRequiredWithoutSchoolsNestedInput = {
    create?: XOR<UniversityCreateWithoutSchoolsInput, UniversityUncheckedCreateWithoutSchoolsInput>
    connectOrCreate?: UniversityCreateOrConnectWithoutSchoolsInput
    upsert?: UniversityUpsertWithoutSchoolsInput
    connect?: UniversityWhereUniqueInput
    update?: XOR<XOR<UniversityUpdateToOneWithWhereWithoutSchoolsInput, UniversityUpdateWithoutSchoolsInput>, UniversityUncheckedUpdateWithoutSchoolsInput>
  }

  export type StudentUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<StudentCreateWithoutSchoolInput, StudentUncheckedCreateWithoutSchoolInput> | StudentCreateWithoutSchoolInput[] | StudentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutSchoolInput | StudentCreateOrConnectWithoutSchoolInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutSchoolInput | StudentUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: StudentCreateManySchoolInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutSchoolInput | StudentUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutSchoolInput | StudentUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type StudentUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<StudentCreateWithoutSchoolInput, StudentUncheckedCreateWithoutSchoolInput> | StudentCreateWithoutSchoolInput[] | StudentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutSchoolInput | StudentCreateOrConnectWithoutSchoolInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutSchoolInput | StudentUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: StudentCreateManySchoolInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutSchoolInput | StudentUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutSchoolInput | StudentUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type ProfessorOnFieldOfStudyCreateNestedManyWithoutFieldOfStudyInput = {
    create?: XOR<ProfessorOnFieldOfStudyCreateWithoutFieldOfStudyInput, ProfessorOnFieldOfStudyUncheckedCreateWithoutFieldOfStudyInput> | ProfessorOnFieldOfStudyCreateWithoutFieldOfStudyInput[] | ProfessorOnFieldOfStudyUncheckedCreateWithoutFieldOfStudyInput[]
    connectOrCreate?: ProfessorOnFieldOfStudyCreateOrConnectWithoutFieldOfStudyInput | ProfessorOnFieldOfStudyCreateOrConnectWithoutFieldOfStudyInput[]
    createMany?: ProfessorOnFieldOfStudyCreateManyFieldOfStudyInputEnvelope
    connect?: ProfessorOnFieldOfStudyWhereUniqueInput | ProfessorOnFieldOfStudyWhereUniqueInput[]
  }

  export type StudentOnFieldOfStudyCreateNestedManyWithoutFieldOfStudyInput = {
    create?: XOR<StudentOnFieldOfStudyCreateWithoutFieldOfStudyInput, StudentOnFieldOfStudyUncheckedCreateWithoutFieldOfStudyInput> | StudentOnFieldOfStudyCreateWithoutFieldOfStudyInput[] | StudentOnFieldOfStudyUncheckedCreateWithoutFieldOfStudyInput[]
    connectOrCreate?: StudentOnFieldOfStudyCreateOrConnectWithoutFieldOfStudyInput | StudentOnFieldOfStudyCreateOrConnectWithoutFieldOfStudyInput[]
    createMany?: StudentOnFieldOfStudyCreateManyFieldOfStudyInputEnvelope
    connect?: StudentOnFieldOfStudyWhereUniqueInput | StudentOnFieldOfStudyWhereUniqueInput[]
  }

  export type CourseCreateNestedManyWithoutFieldOfStudyInput = {
    create?: XOR<CourseCreateWithoutFieldOfStudyInput, CourseUncheckedCreateWithoutFieldOfStudyInput> | CourseCreateWithoutFieldOfStudyInput[] | CourseUncheckedCreateWithoutFieldOfStudyInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutFieldOfStudyInput | CourseCreateOrConnectWithoutFieldOfStudyInput[]
    createMany?: CourseCreateManyFieldOfStudyInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type ProfessorOnFieldOfStudyUncheckedCreateNestedManyWithoutFieldOfStudyInput = {
    create?: XOR<ProfessorOnFieldOfStudyCreateWithoutFieldOfStudyInput, ProfessorOnFieldOfStudyUncheckedCreateWithoutFieldOfStudyInput> | ProfessorOnFieldOfStudyCreateWithoutFieldOfStudyInput[] | ProfessorOnFieldOfStudyUncheckedCreateWithoutFieldOfStudyInput[]
    connectOrCreate?: ProfessorOnFieldOfStudyCreateOrConnectWithoutFieldOfStudyInput | ProfessorOnFieldOfStudyCreateOrConnectWithoutFieldOfStudyInput[]
    createMany?: ProfessorOnFieldOfStudyCreateManyFieldOfStudyInputEnvelope
    connect?: ProfessorOnFieldOfStudyWhereUniqueInput | ProfessorOnFieldOfStudyWhereUniqueInput[]
  }

  export type StudentOnFieldOfStudyUncheckedCreateNestedManyWithoutFieldOfStudyInput = {
    create?: XOR<StudentOnFieldOfStudyCreateWithoutFieldOfStudyInput, StudentOnFieldOfStudyUncheckedCreateWithoutFieldOfStudyInput> | StudentOnFieldOfStudyCreateWithoutFieldOfStudyInput[] | StudentOnFieldOfStudyUncheckedCreateWithoutFieldOfStudyInput[]
    connectOrCreate?: StudentOnFieldOfStudyCreateOrConnectWithoutFieldOfStudyInput | StudentOnFieldOfStudyCreateOrConnectWithoutFieldOfStudyInput[]
    createMany?: StudentOnFieldOfStudyCreateManyFieldOfStudyInputEnvelope
    connect?: StudentOnFieldOfStudyWhereUniqueInput | StudentOnFieldOfStudyWhereUniqueInput[]
  }

  export type CourseUncheckedCreateNestedManyWithoutFieldOfStudyInput = {
    create?: XOR<CourseCreateWithoutFieldOfStudyInput, CourseUncheckedCreateWithoutFieldOfStudyInput> | CourseCreateWithoutFieldOfStudyInput[] | CourseUncheckedCreateWithoutFieldOfStudyInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutFieldOfStudyInput | CourseCreateOrConnectWithoutFieldOfStudyInput[]
    createMany?: CourseCreateManyFieldOfStudyInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type ProfessorOnFieldOfStudyUpdateManyWithoutFieldOfStudyNestedInput = {
    create?: XOR<ProfessorOnFieldOfStudyCreateWithoutFieldOfStudyInput, ProfessorOnFieldOfStudyUncheckedCreateWithoutFieldOfStudyInput> | ProfessorOnFieldOfStudyCreateWithoutFieldOfStudyInput[] | ProfessorOnFieldOfStudyUncheckedCreateWithoutFieldOfStudyInput[]
    connectOrCreate?: ProfessorOnFieldOfStudyCreateOrConnectWithoutFieldOfStudyInput | ProfessorOnFieldOfStudyCreateOrConnectWithoutFieldOfStudyInput[]
    upsert?: ProfessorOnFieldOfStudyUpsertWithWhereUniqueWithoutFieldOfStudyInput | ProfessorOnFieldOfStudyUpsertWithWhereUniqueWithoutFieldOfStudyInput[]
    createMany?: ProfessorOnFieldOfStudyCreateManyFieldOfStudyInputEnvelope
    set?: ProfessorOnFieldOfStudyWhereUniqueInput | ProfessorOnFieldOfStudyWhereUniqueInput[]
    disconnect?: ProfessorOnFieldOfStudyWhereUniqueInput | ProfessorOnFieldOfStudyWhereUniqueInput[]
    delete?: ProfessorOnFieldOfStudyWhereUniqueInput | ProfessorOnFieldOfStudyWhereUniqueInput[]
    connect?: ProfessorOnFieldOfStudyWhereUniqueInput | ProfessorOnFieldOfStudyWhereUniqueInput[]
    update?: ProfessorOnFieldOfStudyUpdateWithWhereUniqueWithoutFieldOfStudyInput | ProfessorOnFieldOfStudyUpdateWithWhereUniqueWithoutFieldOfStudyInput[]
    updateMany?: ProfessorOnFieldOfStudyUpdateManyWithWhereWithoutFieldOfStudyInput | ProfessorOnFieldOfStudyUpdateManyWithWhereWithoutFieldOfStudyInput[]
    deleteMany?: ProfessorOnFieldOfStudyScalarWhereInput | ProfessorOnFieldOfStudyScalarWhereInput[]
  }

  export type StudentOnFieldOfStudyUpdateManyWithoutFieldOfStudyNestedInput = {
    create?: XOR<StudentOnFieldOfStudyCreateWithoutFieldOfStudyInput, StudentOnFieldOfStudyUncheckedCreateWithoutFieldOfStudyInput> | StudentOnFieldOfStudyCreateWithoutFieldOfStudyInput[] | StudentOnFieldOfStudyUncheckedCreateWithoutFieldOfStudyInput[]
    connectOrCreate?: StudentOnFieldOfStudyCreateOrConnectWithoutFieldOfStudyInput | StudentOnFieldOfStudyCreateOrConnectWithoutFieldOfStudyInput[]
    upsert?: StudentOnFieldOfStudyUpsertWithWhereUniqueWithoutFieldOfStudyInput | StudentOnFieldOfStudyUpsertWithWhereUniqueWithoutFieldOfStudyInput[]
    createMany?: StudentOnFieldOfStudyCreateManyFieldOfStudyInputEnvelope
    set?: StudentOnFieldOfStudyWhereUniqueInput | StudentOnFieldOfStudyWhereUniqueInput[]
    disconnect?: StudentOnFieldOfStudyWhereUniqueInput | StudentOnFieldOfStudyWhereUniqueInput[]
    delete?: StudentOnFieldOfStudyWhereUniqueInput | StudentOnFieldOfStudyWhereUniqueInput[]
    connect?: StudentOnFieldOfStudyWhereUniqueInput | StudentOnFieldOfStudyWhereUniqueInput[]
    update?: StudentOnFieldOfStudyUpdateWithWhereUniqueWithoutFieldOfStudyInput | StudentOnFieldOfStudyUpdateWithWhereUniqueWithoutFieldOfStudyInput[]
    updateMany?: StudentOnFieldOfStudyUpdateManyWithWhereWithoutFieldOfStudyInput | StudentOnFieldOfStudyUpdateManyWithWhereWithoutFieldOfStudyInput[]
    deleteMany?: StudentOnFieldOfStudyScalarWhereInput | StudentOnFieldOfStudyScalarWhereInput[]
  }

  export type CourseUpdateManyWithoutFieldOfStudyNestedInput = {
    create?: XOR<CourseCreateWithoutFieldOfStudyInput, CourseUncheckedCreateWithoutFieldOfStudyInput> | CourseCreateWithoutFieldOfStudyInput[] | CourseUncheckedCreateWithoutFieldOfStudyInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutFieldOfStudyInput | CourseCreateOrConnectWithoutFieldOfStudyInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutFieldOfStudyInput | CourseUpsertWithWhereUniqueWithoutFieldOfStudyInput[]
    createMany?: CourseCreateManyFieldOfStudyInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutFieldOfStudyInput | CourseUpdateWithWhereUniqueWithoutFieldOfStudyInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutFieldOfStudyInput | CourseUpdateManyWithWhereWithoutFieldOfStudyInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type ProfessorOnFieldOfStudyUncheckedUpdateManyWithoutFieldOfStudyNestedInput = {
    create?: XOR<ProfessorOnFieldOfStudyCreateWithoutFieldOfStudyInput, ProfessorOnFieldOfStudyUncheckedCreateWithoutFieldOfStudyInput> | ProfessorOnFieldOfStudyCreateWithoutFieldOfStudyInput[] | ProfessorOnFieldOfStudyUncheckedCreateWithoutFieldOfStudyInput[]
    connectOrCreate?: ProfessorOnFieldOfStudyCreateOrConnectWithoutFieldOfStudyInput | ProfessorOnFieldOfStudyCreateOrConnectWithoutFieldOfStudyInput[]
    upsert?: ProfessorOnFieldOfStudyUpsertWithWhereUniqueWithoutFieldOfStudyInput | ProfessorOnFieldOfStudyUpsertWithWhereUniqueWithoutFieldOfStudyInput[]
    createMany?: ProfessorOnFieldOfStudyCreateManyFieldOfStudyInputEnvelope
    set?: ProfessorOnFieldOfStudyWhereUniqueInput | ProfessorOnFieldOfStudyWhereUniqueInput[]
    disconnect?: ProfessorOnFieldOfStudyWhereUniqueInput | ProfessorOnFieldOfStudyWhereUniqueInput[]
    delete?: ProfessorOnFieldOfStudyWhereUniqueInput | ProfessorOnFieldOfStudyWhereUniqueInput[]
    connect?: ProfessorOnFieldOfStudyWhereUniqueInput | ProfessorOnFieldOfStudyWhereUniqueInput[]
    update?: ProfessorOnFieldOfStudyUpdateWithWhereUniqueWithoutFieldOfStudyInput | ProfessorOnFieldOfStudyUpdateWithWhereUniqueWithoutFieldOfStudyInput[]
    updateMany?: ProfessorOnFieldOfStudyUpdateManyWithWhereWithoutFieldOfStudyInput | ProfessorOnFieldOfStudyUpdateManyWithWhereWithoutFieldOfStudyInput[]
    deleteMany?: ProfessorOnFieldOfStudyScalarWhereInput | ProfessorOnFieldOfStudyScalarWhereInput[]
  }

  export type StudentOnFieldOfStudyUncheckedUpdateManyWithoutFieldOfStudyNestedInput = {
    create?: XOR<StudentOnFieldOfStudyCreateWithoutFieldOfStudyInput, StudentOnFieldOfStudyUncheckedCreateWithoutFieldOfStudyInput> | StudentOnFieldOfStudyCreateWithoutFieldOfStudyInput[] | StudentOnFieldOfStudyUncheckedCreateWithoutFieldOfStudyInput[]
    connectOrCreate?: StudentOnFieldOfStudyCreateOrConnectWithoutFieldOfStudyInput | StudentOnFieldOfStudyCreateOrConnectWithoutFieldOfStudyInput[]
    upsert?: StudentOnFieldOfStudyUpsertWithWhereUniqueWithoutFieldOfStudyInput | StudentOnFieldOfStudyUpsertWithWhereUniqueWithoutFieldOfStudyInput[]
    createMany?: StudentOnFieldOfStudyCreateManyFieldOfStudyInputEnvelope
    set?: StudentOnFieldOfStudyWhereUniqueInput | StudentOnFieldOfStudyWhereUniqueInput[]
    disconnect?: StudentOnFieldOfStudyWhereUniqueInput | StudentOnFieldOfStudyWhereUniqueInput[]
    delete?: StudentOnFieldOfStudyWhereUniqueInput | StudentOnFieldOfStudyWhereUniqueInput[]
    connect?: StudentOnFieldOfStudyWhereUniqueInput | StudentOnFieldOfStudyWhereUniqueInput[]
    update?: StudentOnFieldOfStudyUpdateWithWhereUniqueWithoutFieldOfStudyInput | StudentOnFieldOfStudyUpdateWithWhereUniqueWithoutFieldOfStudyInput[]
    updateMany?: StudentOnFieldOfStudyUpdateManyWithWhereWithoutFieldOfStudyInput | StudentOnFieldOfStudyUpdateManyWithWhereWithoutFieldOfStudyInput[]
    deleteMany?: StudentOnFieldOfStudyScalarWhereInput | StudentOnFieldOfStudyScalarWhereInput[]
  }

  export type CourseUncheckedUpdateManyWithoutFieldOfStudyNestedInput = {
    create?: XOR<CourseCreateWithoutFieldOfStudyInput, CourseUncheckedCreateWithoutFieldOfStudyInput> | CourseCreateWithoutFieldOfStudyInput[] | CourseUncheckedCreateWithoutFieldOfStudyInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutFieldOfStudyInput | CourseCreateOrConnectWithoutFieldOfStudyInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutFieldOfStudyInput | CourseUpsertWithWhereUniqueWithoutFieldOfStudyInput[]
    createMany?: CourseCreateManyFieldOfStudyInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutFieldOfStudyInput | CourseUpdateWithWhereUniqueWithoutFieldOfStudyInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutFieldOfStudyInput | CourseUpdateManyWithWhereWithoutFieldOfStudyInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type FieldOfStudyCreateNestedOneWithoutProfessorsInput = {
    create?: XOR<FieldOfStudyCreateWithoutProfessorsInput, FieldOfStudyUncheckedCreateWithoutProfessorsInput>
    connectOrCreate?: FieldOfStudyCreateOrConnectWithoutProfessorsInput
    connect?: FieldOfStudyWhereUniqueInput
  }

  export type ProfessorCreateNestedOneWithoutFieldsOfStudyInput = {
    create?: XOR<ProfessorCreateWithoutFieldsOfStudyInput, ProfessorUncheckedCreateWithoutFieldsOfStudyInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutFieldsOfStudyInput
    connect?: ProfessorWhereUniqueInput
  }

  export type FieldOfStudyUpdateOneRequiredWithoutProfessorsNestedInput = {
    create?: XOR<FieldOfStudyCreateWithoutProfessorsInput, FieldOfStudyUncheckedCreateWithoutProfessorsInput>
    connectOrCreate?: FieldOfStudyCreateOrConnectWithoutProfessorsInput
    upsert?: FieldOfStudyUpsertWithoutProfessorsInput
    connect?: FieldOfStudyWhereUniqueInput
    update?: XOR<XOR<FieldOfStudyUpdateToOneWithWhereWithoutProfessorsInput, FieldOfStudyUpdateWithoutProfessorsInput>, FieldOfStudyUncheckedUpdateWithoutProfessorsInput>
  }

  export type ProfessorUpdateOneRequiredWithoutFieldsOfStudyNestedInput = {
    create?: XOR<ProfessorCreateWithoutFieldsOfStudyInput, ProfessorUncheckedCreateWithoutFieldsOfStudyInput>
    connectOrCreate?: ProfessorCreateOrConnectWithoutFieldsOfStudyInput
    upsert?: ProfessorUpsertWithoutFieldsOfStudyInput
    connect?: ProfessorWhereUniqueInput
    update?: XOR<XOR<ProfessorUpdateToOneWithWhereWithoutFieldsOfStudyInput, ProfessorUpdateWithoutFieldsOfStudyInput>, ProfessorUncheckedUpdateWithoutFieldsOfStudyInput>
  }

  export type StudentCreateNestedOneWithoutFieldsOfStudyInput = {
    create?: XOR<StudentCreateWithoutFieldsOfStudyInput, StudentUncheckedCreateWithoutFieldsOfStudyInput>
    connectOrCreate?: StudentCreateOrConnectWithoutFieldsOfStudyInput
    connect?: StudentWhereUniqueInput
  }

  export type FieldOfStudyCreateNestedOneWithoutStudentsInput = {
    create?: XOR<FieldOfStudyCreateWithoutStudentsInput, FieldOfStudyUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: FieldOfStudyCreateOrConnectWithoutStudentsInput
    connect?: FieldOfStudyWhereUniqueInput
  }

  export type StudentUpdateOneRequiredWithoutFieldsOfStudyNestedInput = {
    create?: XOR<StudentCreateWithoutFieldsOfStudyInput, StudentUncheckedCreateWithoutFieldsOfStudyInput>
    connectOrCreate?: StudentCreateOrConnectWithoutFieldsOfStudyInput
    upsert?: StudentUpsertWithoutFieldsOfStudyInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutFieldsOfStudyInput, StudentUpdateWithoutFieldsOfStudyInput>, StudentUncheckedUpdateWithoutFieldsOfStudyInput>
  }

  export type FieldOfStudyUpdateOneRequiredWithoutStudentsNestedInput = {
    create?: XOR<FieldOfStudyCreateWithoutStudentsInput, FieldOfStudyUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: FieldOfStudyCreateOrConnectWithoutStudentsInput
    upsert?: FieldOfStudyUpsertWithoutStudentsInput
    connect?: FieldOfStudyWhereUniqueInput
    update?: XOR<XOR<FieldOfStudyUpdateToOneWithWhereWithoutStudentsInput, FieldOfStudyUpdateWithoutStudentsInput>, FieldOfStudyUncheckedUpdateWithoutStudentsInput>
  }

  export type FieldOfStudyCreateNestedOneWithoutCoursesInput = {
    create?: XOR<FieldOfStudyCreateWithoutCoursesInput, FieldOfStudyUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: FieldOfStudyCreateOrConnectWithoutCoursesInput
    connect?: FieldOfStudyWhereUniqueInput
  }

  export type StudyLevelCreateNestedOneWithoutCoursesInput = {
    create?: XOR<StudyLevelCreateWithoutCoursesInput, StudyLevelUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: StudyLevelCreateOrConnectWithoutCoursesInput
    connect?: StudyLevelWhereUniqueInput
  }

  export type StudentOnCourseCreateNestedManyWithoutCourseInput = {
    create?: XOR<StudentOnCourseCreateWithoutCourseInput, StudentOnCourseUncheckedCreateWithoutCourseInput> | StudentOnCourseCreateWithoutCourseInput[] | StudentOnCourseUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: StudentOnCourseCreateOrConnectWithoutCourseInput | StudentOnCourseCreateOrConnectWithoutCourseInput[]
    createMany?: StudentOnCourseCreateManyCourseInputEnvelope
    connect?: StudentOnCourseWhereUniqueInput | StudentOnCourseWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutCourseInput = {
    create?: XOR<CommentCreateWithoutCourseInput, CommentUncheckedCreateWithoutCourseInput> | CommentCreateWithoutCourseInput[] | CommentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutCourseInput | CommentCreateOrConnectWithoutCourseInput[]
    createMany?: CommentCreateManyCourseInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type StudentOnCourseUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<StudentOnCourseCreateWithoutCourseInput, StudentOnCourseUncheckedCreateWithoutCourseInput> | StudentOnCourseCreateWithoutCourseInput[] | StudentOnCourseUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: StudentOnCourseCreateOrConnectWithoutCourseInput | StudentOnCourseCreateOrConnectWithoutCourseInput[]
    createMany?: StudentOnCourseCreateManyCourseInputEnvelope
    connect?: StudentOnCourseWhereUniqueInput | StudentOnCourseWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<CommentCreateWithoutCourseInput, CommentUncheckedCreateWithoutCourseInput> | CommentCreateWithoutCourseInput[] | CommentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutCourseInput | CommentCreateOrConnectWithoutCourseInput[]
    createMany?: CommentCreateManyCourseInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FieldOfStudyUpdateOneRequiredWithoutCoursesNestedInput = {
    create?: XOR<FieldOfStudyCreateWithoutCoursesInput, FieldOfStudyUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: FieldOfStudyCreateOrConnectWithoutCoursesInput
    upsert?: FieldOfStudyUpsertWithoutCoursesInput
    connect?: FieldOfStudyWhereUniqueInput
    update?: XOR<XOR<FieldOfStudyUpdateToOneWithWhereWithoutCoursesInput, FieldOfStudyUpdateWithoutCoursesInput>, FieldOfStudyUncheckedUpdateWithoutCoursesInput>
  }

  export type StudyLevelUpdateOneRequiredWithoutCoursesNestedInput = {
    create?: XOR<StudyLevelCreateWithoutCoursesInput, StudyLevelUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: StudyLevelCreateOrConnectWithoutCoursesInput
    upsert?: StudyLevelUpsertWithoutCoursesInput
    connect?: StudyLevelWhereUniqueInput
    update?: XOR<XOR<StudyLevelUpdateToOneWithWhereWithoutCoursesInput, StudyLevelUpdateWithoutCoursesInput>, StudyLevelUncheckedUpdateWithoutCoursesInput>
  }

  export type StudentOnCourseUpdateManyWithoutCourseNestedInput = {
    create?: XOR<StudentOnCourseCreateWithoutCourseInput, StudentOnCourseUncheckedCreateWithoutCourseInput> | StudentOnCourseCreateWithoutCourseInput[] | StudentOnCourseUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: StudentOnCourseCreateOrConnectWithoutCourseInput | StudentOnCourseCreateOrConnectWithoutCourseInput[]
    upsert?: StudentOnCourseUpsertWithWhereUniqueWithoutCourseInput | StudentOnCourseUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: StudentOnCourseCreateManyCourseInputEnvelope
    set?: StudentOnCourseWhereUniqueInput | StudentOnCourseWhereUniqueInput[]
    disconnect?: StudentOnCourseWhereUniqueInput | StudentOnCourseWhereUniqueInput[]
    delete?: StudentOnCourseWhereUniqueInput | StudentOnCourseWhereUniqueInput[]
    connect?: StudentOnCourseWhereUniqueInput | StudentOnCourseWhereUniqueInput[]
    update?: StudentOnCourseUpdateWithWhereUniqueWithoutCourseInput | StudentOnCourseUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: StudentOnCourseUpdateManyWithWhereWithoutCourseInput | StudentOnCourseUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: StudentOnCourseScalarWhereInput | StudentOnCourseScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutCourseNestedInput = {
    create?: XOR<CommentCreateWithoutCourseInput, CommentUncheckedCreateWithoutCourseInput> | CommentCreateWithoutCourseInput[] | CommentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutCourseInput | CommentCreateOrConnectWithoutCourseInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutCourseInput | CommentUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: CommentCreateManyCourseInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutCourseInput | CommentUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutCourseInput | CommentUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type StudentOnCourseUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<StudentOnCourseCreateWithoutCourseInput, StudentOnCourseUncheckedCreateWithoutCourseInput> | StudentOnCourseCreateWithoutCourseInput[] | StudentOnCourseUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: StudentOnCourseCreateOrConnectWithoutCourseInput | StudentOnCourseCreateOrConnectWithoutCourseInput[]
    upsert?: StudentOnCourseUpsertWithWhereUniqueWithoutCourseInput | StudentOnCourseUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: StudentOnCourseCreateManyCourseInputEnvelope
    set?: StudentOnCourseWhereUniqueInput | StudentOnCourseWhereUniqueInput[]
    disconnect?: StudentOnCourseWhereUniqueInput | StudentOnCourseWhereUniqueInput[]
    delete?: StudentOnCourseWhereUniqueInput | StudentOnCourseWhereUniqueInput[]
    connect?: StudentOnCourseWhereUniqueInput | StudentOnCourseWhereUniqueInput[]
    update?: StudentOnCourseUpdateWithWhereUniqueWithoutCourseInput | StudentOnCourseUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: StudentOnCourseUpdateManyWithWhereWithoutCourseInput | StudentOnCourseUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: StudentOnCourseScalarWhereInput | StudentOnCourseScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<CommentCreateWithoutCourseInput, CommentUncheckedCreateWithoutCourseInput> | CommentCreateWithoutCourseInput[] | CommentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutCourseInput | CommentCreateOrConnectWithoutCourseInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutCourseInput | CommentUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: CommentCreateManyCourseInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutCourseInput | CommentUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutCourseInput | CommentUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type StudentCreateNestedOneWithoutCoursesInput = {
    create?: XOR<StudentCreateWithoutCoursesInput, StudentUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: StudentCreateOrConnectWithoutCoursesInput
    connect?: StudentWhereUniqueInput
  }

  export type CourseCreateNestedOneWithoutStudentsInput = {
    create?: XOR<CourseCreateWithoutStudentsInput, CourseUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutStudentsInput
    connect?: CourseWhereUniqueInput
  }

  export type RateCreateNestedOneWithoutStudentOnCourseInput = {
    create?: XOR<RateCreateWithoutStudentOnCourseInput, RateUncheckedCreateWithoutStudentOnCourseInput>
    connectOrCreate?: RateCreateOrConnectWithoutStudentOnCourseInput
    connect?: RateWhereUniqueInput
  }

  export type RateUncheckedCreateNestedOneWithoutStudentOnCourseInput = {
    create?: XOR<RateCreateWithoutStudentOnCourseInput, RateUncheckedCreateWithoutStudentOnCourseInput>
    connectOrCreate?: RateCreateOrConnectWithoutStudentOnCourseInput
    connect?: RateWhereUniqueInput
  }

  export type StudentUpdateOneRequiredWithoutCoursesNestedInput = {
    create?: XOR<StudentCreateWithoutCoursesInput, StudentUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: StudentCreateOrConnectWithoutCoursesInput
    upsert?: StudentUpsertWithoutCoursesInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutCoursesInput, StudentUpdateWithoutCoursesInput>, StudentUncheckedUpdateWithoutCoursesInput>
  }

  export type CourseUpdateOneRequiredWithoutStudentsNestedInput = {
    create?: XOR<CourseCreateWithoutStudentsInput, CourseUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutStudentsInput
    upsert?: CourseUpsertWithoutStudentsInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutStudentsInput, CourseUpdateWithoutStudentsInput>, CourseUncheckedUpdateWithoutStudentsInput>
  }

  export type RateUpdateOneWithoutStudentOnCourseNestedInput = {
    create?: XOR<RateCreateWithoutStudentOnCourseInput, RateUncheckedCreateWithoutStudentOnCourseInput>
    connectOrCreate?: RateCreateOrConnectWithoutStudentOnCourseInput
    upsert?: RateUpsertWithoutStudentOnCourseInput
    disconnect?: RateWhereInput | boolean
    delete?: RateWhereInput | boolean
    connect?: RateWhereUniqueInput
    update?: XOR<XOR<RateUpdateToOneWithWhereWithoutStudentOnCourseInput, RateUpdateWithoutStudentOnCourseInput>, RateUncheckedUpdateWithoutStudentOnCourseInput>
  }

  export type RateUncheckedUpdateOneWithoutStudentOnCourseNestedInput = {
    create?: XOR<RateCreateWithoutStudentOnCourseInput, RateUncheckedCreateWithoutStudentOnCourseInput>
    connectOrCreate?: RateCreateOrConnectWithoutStudentOnCourseInput
    upsert?: RateUpsertWithoutStudentOnCourseInput
    disconnect?: RateWhereInput | boolean
    delete?: RateWhereInput | boolean
    connect?: RateWhereUniqueInput
    update?: XOR<XOR<RateUpdateToOneWithWhereWithoutStudentOnCourseInput, RateUpdateWithoutStudentOnCourseInput>, RateUncheckedUpdateWithoutStudentOnCourseInput>
  }

  export type StudentCreateNestedOneWithoutCommentsInput = {
    create?: XOR<StudentCreateWithoutCommentsInput, StudentUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutCommentsInput
    connect?: StudentWhereUniqueInput
  }

  export type CourseCreateNestedOneWithoutCommentsInput = {
    create?: XOR<CourseCreateWithoutCommentsInput, CourseUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutCommentsInput
    connect?: CourseWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StudentUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<StudentCreateWithoutCommentsInput, StudentUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutCommentsInput
    upsert?: StudentUpsertWithoutCommentsInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutCommentsInput, StudentUpdateWithoutCommentsInput>, StudentUncheckedUpdateWithoutCommentsInput>
  }

  export type CourseUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<CourseCreateWithoutCommentsInput, CourseUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutCommentsInput
    upsert?: CourseUpsertWithoutCommentsInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutCommentsInput, CourseUpdateWithoutCommentsInput>, CourseUncheckedUpdateWithoutCommentsInput>
  }

  export type StudentOnCourseCreateNestedOneWithoutRateInput = {
    create?: XOR<StudentOnCourseCreateWithoutRateInput, StudentOnCourseUncheckedCreateWithoutRateInput>
    connectOrCreate?: StudentOnCourseCreateOrConnectWithoutRateInput
    connect?: StudentOnCourseWhereUniqueInput
  }

  export type StudentOnCourseUpdateOneRequiredWithoutRateNestedInput = {
    create?: XOR<StudentOnCourseCreateWithoutRateInput, StudentOnCourseUncheckedCreateWithoutRateInput>
    connectOrCreate?: StudentOnCourseCreateOrConnectWithoutRateInput
    upsert?: StudentOnCourseUpsertWithoutRateInput
    connect?: StudentOnCourseWhereUniqueInput
    update?: XOR<XOR<StudentOnCourseUpdateToOneWithWhereWithoutRateInput, StudentOnCourseUpdateWithoutRateInput>, StudentOnCourseUncheckedUpdateWithoutRateInput>
  }

  export type StudentCreateNestedManyWithoutStudyLevelInput = {
    create?: XOR<StudentCreateWithoutStudyLevelInput, StudentUncheckedCreateWithoutStudyLevelInput> | StudentCreateWithoutStudyLevelInput[] | StudentUncheckedCreateWithoutStudyLevelInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutStudyLevelInput | StudentCreateOrConnectWithoutStudyLevelInput[]
    createMany?: StudentCreateManyStudyLevelInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type CourseCreateNestedManyWithoutStudyLevelInput = {
    create?: XOR<CourseCreateWithoutStudyLevelInput, CourseUncheckedCreateWithoutStudyLevelInput> | CourseCreateWithoutStudyLevelInput[] | CourseUncheckedCreateWithoutStudyLevelInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutStudyLevelInput | CourseCreateOrConnectWithoutStudyLevelInput[]
    createMany?: CourseCreateManyStudyLevelInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutStudyLevelInput = {
    create?: XOR<StudentCreateWithoutStudyLevelInput, StudentUncheckedCreateWithoutStudyLevelInput> | StudentCreateWithoutStudyLevelInput[] | StudentUncheckedCreateWithoutStudyLevelInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutStudyLevelInput | StudentCreateOrConnectWithoutStudyLevelInput[]
    createMany?: StudentCreateManyStudyLevelInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type CourseUncheckedCreateNestedManyWithoutStudyLevelInput = {
    create?: XOR<CourseCreateWithoutStudyLevelInput, CourseUncheckedCreateWithoutStudyLevelInput> | CourseCreateWithoutStudyLevelInput[] | CourseUncheckedCreateWithoutStudyLevelInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutStudyLevelInput | CourseCreateOrConnectWithoutStudyLevelInput[]
    createMany?: CourseCreateManyStudyLevelInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type StudentUpdateManyWithoutStudyLevelNestedInput = {
    create?: XOR<StudentCreateWithoutStudyLevelInput, StudentUncheckedCreateWithoutStudyLevelInput> | StudentCreateWithoutStudyLevelInput[] | StudentUncheckedCreateWithoutStudyLevelInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutStudyLevelInput | StudentCreateOrConnectWithoutStudyLevelInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutStudyLevelInput | StudentUpsertWithWhereUniqueWithoutStudyLevelInput[]
    createMany?: StudentCreateManyStudyLevelInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutStudyLevelInput | StudentUpdateWithWhereUniqueWithoutStudyLevelInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutStudyLevelInput | StudentUpdateManyWithWhereWithoutStudyLevelInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type CourseUpdateManyWithoutStudyLevelNestedInput = {
    create?: XOR<CourseCreateWithoutStudyLevelInput, CourseUncheckedCreateWithoutStudyLevelInput> | CourseCreateWithoutStudyLevelInput[] | CourseUncheckedCreateWithoutStudyLevelInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutStudyLevelInput | CourseCreateOrConnectWithoutStudyLevelInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutStudyLevelInput | CourseUpsertWithWhereUniqueWithoutStudyLevelInput[]
    createMany?: CourseCreateManyStudyLevelInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutStudyLevelInput | CourseUpdateWithWhereUniqueWithoutStudyLevelInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutStudyLevelInput | CourseUpdateManyWithWhereWithoutStudyLevelInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type StudentUncheckedUpdateManyWithoutStudyLevelNestedInput = {
    create?: XOR<StudentCreateWithoutStudyLevelInput, StudentUncheckedCreateWithoutStudyLevelInput> | StudentCreateWithoutStudyLevelInput[] | StudentUncheckedCreateWithoutStudyLevelInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutStudyLevelInput | StudentCreateOrConnectWithoutStudyLevelInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutStudyLevelInput | StudentUpsertWithWhereUniqueWithoutStudyLevelInput[]
    createMany?: StudentCreateManyStudyLevelInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutStudyLevelInput | StudentUpdateWithWhereUniqueWithoutStudyLevelInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutStudyLevelInput | StudentUpdateManyWithWhereWithoutStudyLevelInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type CourseUncheckedUpdateManyWithoutStudyLevelNestedInput = {
    create?: XOR<CourseCreateWithoutStudyLevelInput, CourseUncheckedCreateWithoutStudyLevelInput> | CourseCreateWithoutStudyLevelInput[] | CourseUncheckedCreateWithoutStudyLevelInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutStudyLevelInput | CourseCreateOrConnectWithoutStudyLevelInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutStudyLevelInput | CourseUpsertWithWhereUniqueWithoutStudyLevelInput[]
    createMany?: CourseCreateManyStudyLevelInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutStudyLevelInput | CourseUpdateWithWhereUniqueWithoutStudyLevelInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutStudyLevelInput | CourseUpdateManyWithWhereWithoutStudyLevelInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type AdminCreateWithoutUserInput = {

  }

  export type AdminUncheckedCreateWithoutUserInput = {

  }

  export type AdminCreateOrConnectWithoutUserInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
  }

  export type ProfessorCreateWithoutUserInput = {
    fieldsOfStudy?: ProfessorOnFieldOfStudyCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorUncheckedCreateWithoutUserInput = {
    fieldsOfStudy?: ProfessorOnFieldOfStudyUncheckedCreateNestedManyWithoutProfessorInput
  }

  export type ProfessorCreateOrConnectWithoutUserInput = {
    where: ProfessorWhereUniqueInput
    create: XOR<ProfessorCreateWithoutUserInput, ProfessorUncheckedCreateWithoutUserInput>
  }

  export type StudentCreateWithoutUserInput = {
    country: CountryCreateNestedOneWithoutStudentsInput
    School: SchoolCreateNestedOneWithoutStudentsInput
    StudyLevel: StudyLevelCreateNestedOneWithoutStudentsInput
    fieldsOfStudy?: StudentOnFieldOfStudyCreateNestedManyWithoutStudentInput
    courses?: StudentOnCourseCreateNestedManyWithoutStudentInput
    comments?: CommentCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutUserInput = {
    countryId: number
    schoolId: number
    studyLevelId: number
    fieldsOfStudy?: StudentOnFieldOfStudyUncheckedCreateNestedManyWithoutStudentInput
    courses?: StudentOnCourseUncheckedCreateNestedManyWithoutStudentInput
    comments?: CommentUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutUserInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
  }

  export type AdminUpsertWithoutUserInput = {
    update: XOR<AdminUpdateWithoutUserInput, AdminUncheckedUpdateWithoutUserInput>
    create: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
    where?: AdminWhereInput
  }

  export type AdminUpdateToOneWithWhereWithoutUserInput = {
    where?: AdminWhereInput
    data: XOR<AdminUpdateWithoutUserInput, AdminUncheckedUpdateWithoutUserInput>
  }

  export type AdminUpdateWithoutUserInput = {

  }

  export type AdminUncheckedUpdateWithoutUserInput = {

  }

  export type ProfessorUpsertWithoutUserInput = {
    update: XOR<ProfessorUpdateWithoutUserInput, ProfessorUncheckedUpdateWithoutUserInput>
    create: XOR<ProfessorCreateWithoutUserInput, ProfessorUncheckedCreateWithoutUserInput>
    where?: ProfessorWhereInput
  }

  export type ProfessorUpdateToOneWithWhereWithoutUserInput = {
    where?: ProfessorWhereInput
    data: XOR<ProfessorUpdateWithoutUserInput, ProfessorUncheckedUpdateWithoutUserInput>
  }

  export type ProfessorUpdateWithoutUserInput = {
    fieldsOfStudy?: ProfessorOnFieldOfStudyUpdateManyWithoutProfessorNestedInput
  }

  export type ProfessorUncheckedUpdateWithoutUserInput = {
    fieldsOfStudy?: ProfessorOnFieldOfStudyUncheckedUpdateManyWithoutProfessorNestedInput
  }

  export type StudentUpsertWithoutUserInput = {
    update: XOR<StudentUpdateWithoutUserInput, StudentUncheckedUpdateWithoutUserInput>
    create: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutUserInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutUserInput, StudentUncheckedUpdateWithoutUserInput>
  }

  export type StudentUpdateWithoutUserInput = {
    country?: CountryUpdateOneRequiredWithoutStudentsNestedInput
    School?: SchoolUpdateOneRequiredWithoutStudentsNestedInput
    StudyLevel?: StudyLevelUpdateOneRequiredWithoutStudentsNestedInput
    fieldsOfStudy?: StudentOnFieldOfStudyUpdateManyWithoutStudentNestedInput
    courses?: StudentOnCourseUpdateManyWithoutStudentNestedInput
    comments?: CommentUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutUserInput = {
    countryId?: IntFieldUpdateOperationsInput | number
    schoolId?: IntFieldUpdateOperationsInput | number
    studyLevelId?: IntFieldUpdateOperationsInput | number
    fieldsOfStudy?: StudentOnFieldOfStudyUncheckedUpdateManyWithoutStudentNestedInput
    courses?: StudentOnCourseUncheckedUpdateManyWithoutStudentNestedInput
    comments?: CommentUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type UserCreateWithoutAdminInput = {
    email: string
    password: string
    name: string
    surname: string
    isVerified?: boolean
    Professor?: ProfessorCreateNestedOneWithoutUserInput
    Student?: StudentCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAdminInput = {
    id?: number
    email: string
    password: string
    name: string
    surname: string
    isVerified?: boolean
    Professor?: ProfessorUncheckedCreateNestedOneWithoutUserInput
    Student?: StudentUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAdminInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
  }

  export type UserUpsertWithoutAdminInput = {
    update: XOR<UserUpdateWithoutAdminInput, UserUncheckedUpdateWithoutAdminInput>
    create: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAdminInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAdminInput, UserUncheckedUpdateWithoutAdminInput>
  }

  export type UserUpdateWithoutAdminInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    Professor?: ProfessorUpdateOneWithoutUserNestedInput
    Student?: StudentUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    Professor?: ProfessorUncheckedUpdateOneWithoutUserNestedInput
    Student?: StudentUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutProfessorInput = {
    email: string
    password: string
    name: string
    surname: string
    isVerified?: boolean
    Admin?: AdminCreateNestedOneWithoutUserInput
    Student?: StudentCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfessorInput = {
    id?: number
    email: string
    password: string
    name: string
    surname: string
    isVerified?: boolean
    Admin?: AdminUncheckedCreateNestedOneWithoutUserInput
    Student?: StudentUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfessorInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfessorInput, UserUncheckedCreateWithoutProfessorInput>
  }

  export type ProfessorOnFieldOfStudyCreateWithoutProfessorInput = {
    FieldOfStudy: FieldOfStudyCreateNestedOneWithoutProfessorsInput
  }

  export type ProfessorOnFieldOfStudyUncheckedCreateWithoutProfessorInput = {
    fieldOfStudyId: number
  }

  export type ProfessorOnFieldOfStudyCreateOrConnectWithoutProfessorInput = {
    where: ProfessorOnFieldOfStudyWhereUniqueInput
    create: XOR<ProfessorOnFieldOfStudyCreateWithoutProfessorInput, ProfessorOnFieldOfStudyUncheckedCreateWithoutProfessorInput>
  }

  export type ProfessorOnFieldOfStudyCreateManyProfessorInputEnvelope = {
    data: ProfessorOnFieldOfStudyCreateManyProfessorInput | ProfessorOnFieldOfStudyCreateManyProfessorInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutProfessorInput = {
    update: XOR<UserUpdateWithoutProfessorInput, UserUncheckedUpdateWithoutProfessorInput>
    create: XOR<UserCreateWithoutProfessorInput, UserUncheckedCreateWithoutProfessorInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfessorInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfessorInput, UserUncheckedUpdateWithoutProfessorInput>
  }

  export type UserUpdateWithoutProfessorInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    Admin?: AdminUpdateOneWithoutUserNestedInput
    Student?: StudentUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfessorInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    Admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
    Student?: StudentUncheckedUpdateOneWithoutUserNestedInput
  }

  export type ProfessorOnFieldOfStudyUpsertWithWhereUniqueWithoutProfessorInput = {
    where: ProfessorOnFieldOfStudyWhereUniqueInput
    update: XOR<ProfessorOnFieldOfStudyUpdateWithoutProfessorInput, ProfessorOnFieldOfStudyUncheckedUpdateWithoutProfessorInput>
    create: XOR<ProfessorOnFieldOfStudyCreateWithoutProfessorInput, ProfessorOnFieldOfStudyUncheckedCreateWithoutProfessorInput>
  }

  export type ProfessorOnFieldOfStudyUpdateWithWhereUniqueWithoutProfessorInput = {
    where: ProfessorOnFieldOfStudyWhereUniqueInput
    data: XOR<ProfessorOnFieldOfStudyUpdateWithoutProfessorInput, ProfessorOnFieldOfStudyUncheckedUpdateWithoutProfessorInput>
  }

  export type ProfessorOnFieldOfStudyUpdateManyWithWhereWithoutProfessorInput = {
    where: ProfessorOnFieldOfStudyScalarWhereInput
    data: XOR<ProfessorOnFieldOfStudyUpdateManyMutationInput, ProfessorOnFieldOfStudyUncheckedUpdateManyWithoutProfessorInput>
  }

  export type ProfessorOnFieldOfStudyScalarWhereInput = {
    AND?: ProfessorOnFieldOfStudyScalarWhereInput | ProfessorOnFieldOfStudyScalarWhereInput[]
    OR?: ProfessorOnFieldOfStudyScalarWhereInput[]
    NOT?: ProfessorOnFieldOfStudyScalarWhereInput | ProfessorOnFieldOfStudyScalarWhereInput[]
    fieldOfStudyId?: IntFilter<"ProfessorOnFieldOfStudy"> | number
    professorUserId?: IntFilter<"ProfessorOnFieldOfStudy"> | number
  }

  export type UserCreateWithoutStudentInput = {
    email: string
    password: string
    name: string
    surname: string
    isVerified?: boolean
    Admin?: AdminCreateNestedOneWithoutUserInput
    Professor?: ProfessorCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStudentInput = {
    id?: number
    email: string
    password: string
    name: string
    surname: string
    isVerified?: boolean
    Admin?: AdminUncheckedCreateNestedOneWithoutUserInput
    Professor?: ProfessorUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStudentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStudentInput, UserUncheckedCreateWithoutStudentInput>
  }

  export type CountryCreateWithoutStudentsInput = {
    name: string
    tag: string
    universities?: UniversityCreateNestedManyWithoutCountryInput
  }

  export type CountryUncheckedCreateWithoutStudentsInput = {
    id?: number
    name: string
    tag: string
    universities?: UniversityUncheckedCreateNestedManyWithoutCountryInput
  }

  export type CountryCreateOrConnectWithoutStudentsInput = {
    where: CountryWhereUniqueInput
    create: XOR<CountryCreateWithoutStudentsInput, CountryUncheckedCreateWithoutStudentsInput>
  }

  export type SchoolCreateWithoutStudentsInput = {
    name: string
    University: UniversityCreateNestedOneWithoutSchoolsInput
  }

  export type SchoolUncheckedCreateWithoutStudentsInput = {
    id?: number
    name: string
    universityId: number
  }

  export type SchoolCreateOrConnectWithoutStudentsInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutStudentsInput, SchoolUncheckedCreateWithoutStudentsInput>
  }

  export type StudyLevelCreateWithoutStudentsInput = {
    name: string
    courses?: CourseCreateNestedManyWithoutStudyLevelInput
  }

  export type StudyLevelUncheckedCreateWithoutStudentsInput = {
    id?: number
    name: string
    courses?: CourseUncheckedCreateNestedManyWithoutStudyLevelInput
  }

  export type StudyLevelCreateOrConnectWithoutStudentsInput = {
    where: StudyLevelWhereUniqueInput
    create: XOR<StudyLevelCreateWithoutStudentsInput, StudyLevelUncheckedCreateWithoutStudentsInput>
  }

  export type StudentOnFieldOfStudyCreateWithoutStudentInput = {
    FieldOfStudy: FieldOfStudyCreateNestedOneWithoutStudentsInput
  }

  export type StudentOnFieldOfStudyUncheckedCreateWithoutStudentInput = {
    fieldOfStudyId: number
  }

  export type StudentOnFieldOfStudyCreateOrConnectWithoutStudentInput = {
    where: StudentOnFieldOfStudyWhereUniqueInput
    create: XOR<StudentOnFieldOfStudyCreateWithoutStudentInput, StudentOnFieldOfStudyUncheckedCreateWithoutStudentInput>
  }

  export type StudentOnFieldOfStudyCreateManyStudentInputEnvelope = {
    data: StudentOnFieldOfStudyCreateManyStudentInput | StudentOnFieldOfStudyCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type StudentOnCourseCreateWithoutStudentInput = {
    Course: CourseCreateNestedOneWithoutStudentsInput
    Rate?: RateCreateNestedOneWithoutStudentOnCourseInput
  }

  export type StudentOnCourseUncheckedCreateWithoutStudentInput = {
    courseId: number
    Rate?: RateUncheckedCreateNestedOneWithoutStudentOnCourseInput
  }

  export type StudentOnCourseCreateOrConnectWithoutStudentInput = {
    where: StudentOnCourseWhereUniqueInput
    create: XOR<StudentOnCourseCreateWithoutStudentInput, StudentOnCourseUncheckedCreateWithoutStudentInput>
  }

  export type StudentOnCourseCreateManyStudentInputEnvelope = {
    data: StudentOnCourseCreateManyStudentInput | StudentOnCourseCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutStudentInput = {
    content: string
    date: Date | string
    Course: CourseCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutStudentInput = {
    id?: number
    content: string
    date: Date | string
    courseId: number
  }

  export type CommentCreateOrConnectWithoutStudentInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutStudentInput, CommentUncheckedCreateWithoutStudentInput>
  }

  export type CommentCreateManyStudentInputEnvelope = {
    data: CommentCreateManyStudentInput | CommentCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutStudentInput = {
    update: XOR<UserUpdateWithoutStudentInput, UserUncheckedUpdateWithoutStudentInput>
    create: XOR<UserCreateWithoutStudentInput, UserUncheckedCreateWithoutStudentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStudentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStudentInput, UserUncheckedUpdateWithoutStudentInput>
  }

  export type UserUpdateWithoutStudentInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    Admin?: AdminUpdateOneWithoutUserNestedInput
    Professor?: ProfessorUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    Admin?: AdminUncheckedUpdateOneWithoutUserNestedInput
    Professor?: ProfessorUncheckedUpdateOneWithoutUserNestedInput
  }

  export type CountryUpsertWithoutStudentsInput = {
    update: XOR<CountryUpdateWithoutStudentsInput, CountryUncheckedUpdateWithoutStudentsInput>
    create: XOR<CountryCreateWithoutStudentsInput, CountryUncheckedCreateWithoutStudentsInput>
    where?: CountryWhereInput
  }

  export type CountryUpdateToOneWithWhereWithoutStudentsInput = {
    where?: CountryWhereInput
    data: XOR<CountryUpdateWithoutStudentsInput, CountryUncheckedUpdateWithoutStudentsInput>
  }

  export type CountryUpdateWithoutStudentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    universities?: UniversityUpdateManyWithoutCountryNestedInput
  }

  export type CountryUncheckedUpdateWithoutStudentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    universities?: UniversityUncheckedUpdateManyWithoutCountryNestedInput
  }

  export type SchoolUpsertWithoutStudentsInput = {
    update: XOR<SchoolUpdateWithoutStudentsInput, SchoolUncheckedUpdateWithoutStudentsInput>
    create: XOR<SchoolCreateWithoutStudentsInput, SchoolUncheckedCreateWithoutStudentsInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutStudentsInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutStudentsInput, SchoolUncheckedUpdateWithoutStudentsInput>
  }

  export type SchoolUpdateWithoutStudentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    University?: UniversityUpdateOneRequiredWithoutSchoolsNestedInput
  }

  export type SchoolUncheckedUpdateWithoutStudentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    universityId?: IntFieldUpdateOperationsInput | number
  }

  export type StudyLevelUpsertWithoutStudentsInput = {
    update: XOR<StudyLevelUpdateWithoutStudentsInput, StudyLevelUncheckedUpdateWithoutStudentsInput>
    create: XOR<StudyLevelCreateWithoutStudentsInput, StudyLevelUncheckedCreateWithoutStudentsInput>
    where?: StudyLevelWhereInput
  }

  export type StudyLevelUpdateToOneWithWhereWithoutStudentsInput = {
    where?: StudyLevelWhereInput
    data: XOR<StudyLevelUpdateWithoutStudentsInput, StudyLevelUncheckedUpdateWithoutStudentsInput>
  }

  export type StudyLevelUpdateWithoutStudentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    courses?: CourseUpdateManyWithoutStudyLevelNestedInput
  }

  export type StudyLevelUncheckedUpdateWithoutStudentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    courses?: CourseUncheckedUpdateManyWithoutStudyLevelNestedInput
  }

  export type StudentOnFieldOfStudyUpsertWithWhereUniqueWithoutStudentInput = {
    where: StudentOnFieldOfStudyWhereUniqueInput
    update: XOR<StudentOnFieldOfStudyUpdateWithoutStudentInput, StudentOnFieldOfStudyUncheckedUpdateWithoutStudentInput>
    create: XOR<StudentOnFieldOfStudyCreateWithoutStudentInput, StudentOnFieldOfStudyUncheckedCreateWithoutStudentInput>
  }

  export type StudentOnFieldOfStudyUpdateWithWhereUniqueWithoutStudentInput = {
    where: StudentOnFieldOfStudyWhereUniqueInput
    data: XOR<StudentOnFieldOfStudyUpdateWithoutStudentInput, StudentOnFieldOfStudyUncheckedUpdateWithoutStudentInput>
  }

  export type StudentOnFieldOfStudyUpdateManyWithWhereWithoutStudentInput = {
    where: StudentOnFieldOfStudyScalarWhereInput
    data: XOR<StudentOnFieldOfStudyUpdateManyMutationInput, StudentOnFieldOfStudyUncheckedUpdateManyWithoutStudentInput>
  }

  export type StudentOnFieldOfStudyScalarWhereInput = {
    AND?: StudentOnFieldOfStudyScalarWhereInput | StudentOnFieldOfStudyScalarWhereInput[]
    OR?: StudentOnFieldOfStudyScalarWhereInput[]
    NOT?: StudentOnFieldOfStudyScalarWhereInput | StudentOnFieldOfStudyScalarWhereInput[]
    studentUserId?: IntFilter<"StudentOnFieldOfStudy"> | number
    fieldOfStudyId?: IntFilter<"StudentOnFieldOfStudy"> | number
  }

  export type StudentOnCourseUpsertWithWhereUniqueWithoutStudentInput = {
    where: StudentOnCourseWhereUniqueInput
    update: XOR<StudentOnCourseUpdateWithoutStudentInput, StudentOnCourseUncheckedUpdateWithoutStudentInput>
    create: XOR<StudentOnCourseCreateWithoutStudentInput, StudentOnCourseUncheckedCreateWithoutStudentInput>
  }

  export type StudentOnCourseUpdateWithWhereUniqueWithoutStudentInput = {
    where: StudentOnCourseWhereUniqueInput
    data: XOR<StudentOnCourseUpdateWithoutStudentInput, StudentOnCourseUncheckedUpdateWithoutStudentInput>
  }

  export type StudentOnCourseUpdateManyWithWhereWithoutStudentInput = {
    where: StudentOnCourseScalarWhereInput
    data: XOR<StudentOnCourseUpdateManyMutationInput, StudentOnCourseUncheckedUpdateManyWithoutStudentInput>
  }

  export type StudentOnCourseScalarWhereInput = {
    AND?: StudentOnCourseScalarWhereInput | StudentOnCourseScalarWhereInput[]
    OR?: StudentOnCourseScalarWhereInput[]
    NOT?: StudentOnCourseScalarWhereInput | StudentOnCourseScalarWhereInput[]
    studentUserId?: IntFilter<"StudentOnCourse"> | number
    courseId?: IntFilter<"StudentOnCourse"> | number
  }

  export type CommentUpsertWithWhereUniqueWithoutStudentInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutStudentInput, CommentUncheckedUpdateWithoutStudentInput>
    create: XOR<CommentCreateWithoutStudentInput, CommentUncheckedCreateWithoutStudentInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutStudentInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutStudentInput, CommentUncheckedUpdateWithoutStudentInput>
  }

  export type CommentUpdateManyWithWhereWithoutStudentInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutStudentInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: IntFilter<"Comment"> | number
    content?: StringFilter<"Comment"> | string
    date?: DateTimeFilter<"Comment"> | Date | string
    studentUserId?: IntFilter<"Comment"> | number
    courseId?: IntFilter<"Comment"> | number
  }

  export type StudentCreateWithoutCountryInput = {
    user: UserCreateNestedOneWithoutStudentInput
    School: SchoolCreateNestedOneWithoutStudentsInput
    StudyLevel: StudyLevelCreateNestedOneWithoutStudentsInput
    fieldsOfStudy?: StudentOnFieldOfStudyCreateNestedManyWithoutStudentInput
    courses?: StudentOnCourseCreateNestedManyWithoutStudentInput
    comments?: CommentCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutCountryInput = {
    userId: number
    schoolId: number
    studyLevelId: number
    fieldsOfStudy?: StudentOnFieldOfStudyUncheckedCreateNestedManyWithoutStudentInput
    courses?: StudentOnCourseUncheckedCreateNestedManyWithoutStudentInput
    comments?: CommentUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutCountryInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutCountryInput, StudentUncheckedCreateWithoutCountryInput>
  }

  export type StudentCreateManyCountryInputEnvelope = {
    data: StudentCreateManyCountryInput | StudentCreateManyCountryInput[]
    skipDuplicates?: boolean
  }

  export type UniversityCreateWithoutCountryInput = {
    name: string
    schools?: SchoolCreateNestedManyWithoutUniversityInput
  }

  export type UniversityUncheckedCreateWithoutCountryInput = {
    id?: number
    name: string
    schools?: SchoolUncheckedCreateNestedManyWithoutUniversityInput
  }

  export type UniversityCreateOrConnectWithoutCountryInput = {
    where: UniversityWhereUniqueInput
    create: XOR<UniversityCreateWithoutCountryInput, UniversityUncheckedCreateWithoutCountryInput>
  }

  export type UniversityCreateManyCountryInputEnvelope = {
    data: UniversityCreateManyCountryInput | UniversityCreateManyCountryInput[]
    skipDuplicates?: boolean
  }

  export type StudentUpsertWithWhereUniqueWithoutCountryInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutCountryInput, StudentUncheckedUpdateWithoutCountryInput>
    create: XOR<StudentCreateWithoutCountryInput, StudentUncheckedCreateWithoutCountryInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutCountryInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutCountryInput, StudentUncheckedUpdateWithoutCountryInput>
  }

  export type StudentUpdateManyWithWhereWithoutCountryInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutCountryInput>
  }

  export type StudentScalarWhereInput = {
    AND?: StudentScalarWhereInput | StudentScalarWhereInput[]
    OR?: StudentScalarWhereInput[]
    NOT?: StudentScalarWhereInput | StudentScalarWhereInput[]
    userId?: IntFilter<"Student"> | number
    countryId?: IntFilter<"Student"> | number
    schoolId?: IntFilter<"Student"> | number
    studyLevelId?: IntFilter<"Student"> | number
  }

  export type UniversityUpsertWithWhereUniqueWithoutCountryInput = {
    where: UniversityWhereUniqueInput
    update: XOR<UniversityUpdateWithoutCountryInput, UniversityUncheckedUpdateWithoutCountryInput>
    create: XOR<UniversityCreateWithoutCountryInput, UniversityUncheckedCreateWithoutCountryInput>
  }

  export type UniversityUpdateWithWhereUniqueWithoutCountryInput = {
    where: UniversityWhereUniqueInput
    data: XOR<UniversityUpdateWithoutCountryInput, UniversityUncheckedUpdateWithoutCountryInput>
  }

  export type UniversityUpdateManyWithWhereWithoutCountryInput = {
    where: UniversityScalarWhereInput
    data: XOR<UniversityUpdateManyMutationInput, UniversityUncheckedUpdateManyWithoutCountryInput>
  }

  export type UniversityScalarWhereInput = {
    AND?: UniversityScalarWhereInput | UniversityScalarWhereInput[]
    OR?: UniversityScalarWhereInput[]
    NOT?: UniversityScalarWhereInput | UniversityScalarWhereInput[]
    id?: IntFilter<"University"> | number
    name?: StringFilter<"University"> | string
    countryId?: IntFilter<"University"> | number
  }

  export type CountryCreateWithoutUniversitiesInput = {
    name: string
    tag: string
    students?: StudentCreateNestedManyWithoutCountryInput
  }

  export type CountryUncheckedCreateWithoutUniversitiesInput = {
    id?: number
    name: string
    tag: string
    students?: StudentUncheckedCreateNestedManyWithoutCountryInput
  }

  export type CountryCreateOrConnectWithoutUniversitiesInput = {
    where: CountryWhereUniqueInput
    create: XOR<CountryCreateWithoutUniversitiesInput, CountryUncheckedCreateWithoutUniversitiesInput>
  }

  export type SchoolCreateWithoutUniversityInput = {
    name: string
    students?: StudentCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutUniversityInput = {
    id?: number
    name: string
    students?: StudentUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutUniversityInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutUniversityInput, SchoolUncheckedCreateWithoutUniversityInput>
  }

  export type SchoolCreateManyUniversityInputEnvelope = {
    data: SchoolCreateManyUniversityInput | SchoolCreateManyUniversityInput[]
    skipDuplicates?: boolean
  }

  export type CountryUpsertWithoutUniversitiesInput = {
    update: XOR<CountryUpdateWithoutUniversitiesInput, CountryUncheckedUpdateWithoutUniversitiesInput>
    create: XOR<CountryCreateWithoutUniversitiesInput, CountryUncheckedCreateWithoutUniversitiesInput>
    where?: CountryWhereInput
  }

  export type CountryUpdateToOneWithWhereWithoutUniversitiesInput = {
    where?: CountryWhereInput
    data: XOR<CountryUpdateWithoutUniversitiesInput, CountryUncheckedUpdateWithoutUniversitiesInput>
  }

  export type CountryUpdateWithoutUniversitiesInput = {
    name?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    students?: StudentUpdateManyWithoutCountryNestedInput
  }

  export type CountryUncheckedUpdateWithoutUniversitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    students?: StudentUncheckedUpdateManyWithoutCountryNestedInput
  }

  export type SchoolUpsertWithWhereUniqueWithoutUniversityInput = {
    where: SchoolWhereUniqueInput
    update: XOR<SchoolUpdateWithoutUniversityInput, SchoolUncheckedUpdateWithoutUniversityInput>
    create: XOR<SchoolCreateWithoutUniversityInput, SchoolUncheckedCreateWithoutUniversityInput>
  }

  export type SchoolUpdateWithWhereUniqueWithoutUniversityInput = {
    where: SchoolWhereUniqueInput
    data: XOR<SchoolUpdateWithoutUniversityInput, SchoolUncheckedUpdateWithoutUniversityInput>
  }

  export type SchoolUpdateManyWithWhereWithoutUniversityInput = {
    where: SchoolScalarWhereInput
    data: XOR<SchoolUpdateManyMutationInput, SchoolUncheckedUpdateManyWithoutUniversityInput>
  }

  export type SchoolScalarWhereInput = {
    AND?: SchoolScalarWhereInput | SchoolScalarWhereInput[]
    OR?: SchoolScalarWhereInput[]
    NOT?: SchoolScalarWhereInput | SchoolScalarWhereInput[]
    id?: IntFilter<"School"> | number
    name?: StringFilter<"School"> | string
    universityId?: IntFilter<"School"> | number
  }

  export type UniversityCreateWithoutSchoolsInput = {
    name: string
    Country: CountryCreateNestedOneWithoutUniversitiesInput
  }

  export type UniversityUncheckedCreateWithoutSchoolsInput = {
    id?: number
    name: string
    countryId: number
  }

  export type UniversityCreateOrConnectWithoutSchoolsInput = {
    where: UniversityWhereUniqueInput
    create: XOR<UniversityCreateWithoutSchoolsInput, UniversityUncheckedCreateWithoutSchoolsInput>
  }

  export type StudentCreateWithoutSchoolInput = {
    user: UserCreateNestedOneWithoutStudentInput
    country: CountryCreateNestedOneWithoutStudentsInput
    StudyLevel: StudyLevelCreateNestedOneWithoutStudentsInput
    fieldsOfStudy?: StudentOnFieldOfStudyCreateNestedManyWithoutStudentInput
    courses?: StudentOnCourseCreateNestedManyWithoutStudentInput
    comments?: CommentCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutSchoolInput = {
    userId: number
    countryId: number
    studyLevelId: number
    fieldsOfStudy?: StudentOnFieldOfStudyUncheckedCreateNestedManyWithoutStudentInput
    courses?: StudentOnCourseUncheckedCreateNestedManyWithoutStudentInput
    comments?: CommentUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutSchoolInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutSchoolInput, StudentUncheckedCreateWithoutSchoolInput>
  }

  export type StudentCreateManySchoolInputEnvelope = {
    data: StudentCreateManySchoolInput | StudentCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type UniversityUpsertWithoutSchoolsInput = {
    update: XOR<UniversityUpdateWithoutSchoolsInput, UniversityUncheckedUpdateWithoutSchoolsInput>
    create: XOR<UniversityCreateWithoutSchoolsInput, UniversityUncheckedCreateWithoutSchoolsInput>
    where?: UniversityWhereInput
  }

  export type UniversityUpdateToOneWithWhereWithoutSchoolsInput = {
    where?: UniversityWhereInput
    data: XOR<UniversityUpdateWithoutSchoolsInput, UniversityUncheckedUpdateWithoutSchoolsInput>
  }

  export type UniversityUpdateWithoutSchoolsInput = {
    name?: StringFieldUpdateOperationsInput | string
    Country?: CountryUpdateOneRequiredWithoutUniversitiesNestedInput
  }

  export type UniversityUncheckedUpdateWithoutSchoolsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    countryId?: IntFieldUpdateOperationsInput | number
  }

  export type StudentUpsertWithWhereUniqueWithoutSchoolInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutSchoolInput, StudentUncheckedUpdateWithoutSchoolInput>
    create: XOR<StudentCreateWithoutSchoolInput, StudentUncheckedCreateWithoutSchoolInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutSchoolInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutSchoolInput, StudentUncheckedUpdateWithoutSchoolInput>
  }

  export type StudentUpdateManyWithWhereWithoutSchoolInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutSchoolInput>
  }

  export type ProfessorOnFieldOfStudyCreateWithoutFieldOfStudyInput = {
    Professor: ProfessorCreateNestedOneWithoutFieldsOfStudyInput
  }

  export type ProfessorOnFieldOfStudyUncheckedCreateWithoutFieldOfStudyInput = {
    professorUserId: number
  }

  export type ProfessorOnFieldOfStudyCreateOrConnectWithoutFieldOfStudyInput = {
    where: ProfessorOnFieldOfStudyWhereUniqueInput
    create: XOR<ProfessorOnFieldOfStudyCreateWithoutFieldOfStudyInput, ProfessorOnFieldOfStudyUncheckedCreateWithoutFieldOfStudyInput>
  }

  export type ProfessorOnFieldOfStudyCreateManyFieldOfStudyInputEnvelope = {
    data: ProfessorOnFieldOfStudyCreateManyFieldOfStudyInput | ProfessorOnFieldOfStudyCreateManyFieldOfStudyInput[]
    skipDuplicates?: boolean
  }

  export type StudentOnFieldOfStudyCreateWithoutFieldOfStudyInput = {
    Student: StudentCreateNestedOneWithoutFieldsOfStudyInput
  }

  export type StudentOnFieldOfStudyUncheckedCreateWithoutFieldOfStudyInput = {
    studentUserId: number
  }

  export type StudentOnFieldOfStudyCreateOrConnectWithoutFieldOfStudyInput = {
    where: StudentOnFieldOfStudyWhereUniqueInput
    create: XOR<StudentOnFieldOfStudyCreateWithoutFieldOfStudyInput, StudentOnFieldOfStudyUncheckedCreateWithoutFieldOfStudyInput>
  }

  export type StudentOnFieldOfStudyCreateManyFieldOfStudyInputEnvelope = {
    data: StudentOnFieldOfStudyCreateManyFieldOfStudyInput | StudentOnFieldOfStudyCreateManyFieldOfStudyInput[]
    skipDuplicates?: boolean
  }

  export type CourseCreateWithoutFieldOfStudyInput = {
    name: string
    description: string
    ects: number
    hoursOfLecture: number
    hoursOfLabs: number
    numberOfExams: number
    isAvailable?: boolean
    StudyLevel: StudyLevelCreateNestedOneWithoutCoursesInput
    Students?: StudentOnCourseCreateNestedManyWithoutCourseInput
    Comments?: CommentCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutFieldOfStudyInput = {
    id?: number
    name: string
    description: string
    ects: number
    hoursOfLecture: number
    hoursOfLabs: number
    numberOfExams: number
    isAvailable?: boolean
    studyLevelId: number
    Students?: StudentOnCourseUncheckedCreateNestedManyWithoutCourseInput
    Comments?: CommentUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutFieldOfStudyInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutFieldOfStudyInput, CourseUncheckedCreateWithoutFieldOfStudyInput>
  }

  export type CourseCreateManyFieldOfStudyInputEnvelope = {
    data: CourseCreateManyFieldOfStudyInput | CourseCreateManyFieldOfStudyInput[]
    skipDuplicates?: boolean
  }

  export type ProfessorOnFieldOfStudyUpsertWithWhereUniqueWithoutFieldOfStudyInput = {
    where: ProfessorOnFieldOfStudyWhereUniqueInput
    update: XOR<ProfessorOnFieldOfStudyUpdateWithoutFieldOfStudyInput, ProfessorOnFieldOfStudyUncheckedUpdateWithoutFieldOfStudyInput>
    create: XOR<ProfessorOnFieldOfStudyCreateWithoutFieldOfStudyInput, ProfessorOnFieldOfStudyUncheckedCreateWithoutFieldOfStudyInput>
  }

  export type ProfessorOnFieldOfStudyUpdateWithWhereUniqueWithoutFieldOfStudyInput = {
    where: ProfessorOnFieldOfStudyWhereUniqueInput
    data: XOR<ProfessorOnFieldOfStudyUpdateWithoutFieldOfStudyInput, ProfessorOnFieldOfStudyUncheckedUpdateWithoutFieldOfStudyInput>
  }

  export type ProfessorOnFieldOfStudyUpdateManyWithWhereWithoutFieldOfStudyInput = {
    where: ProfessorOnFieldOfStudyScalarWhereInput
    data: XOR<ProfessorOnFieldOfStudyUpdateManyMutationInput, ProfessorOnFieldOfStudyUncheckedUpdateManyWithoutFieldOfStudyInput>
  }

  export type StudentOnFieldOfStudyUpsertWithWhereUniqueWithoutFieldOfStudyInput = {
    where: StudentOnFieldOfStudyWhereUniqueInput
    update: XOR<StudentOnFieldOfStudyUpdateWithoutFieldOfStudyInput, StudentOnFieldOfStudyUncheckedUpdateWithoutFieldOfStudyInput>
    create: XOR<StudentOnFieldOfStudyCreateWithoutFieldOfStudyInput, StudentOnFieldOfStudyUncheckedCreateWithoutFieldOfStudyInput>
  }

  export type StudentOnFieldOfStudyUpdateWithWhereUniqueWithoutFieldOfStudyInput = {
    where: StudentOnFieldOfStudyWhereUniqueInput
    data: XOR<StudentOnFieldOfStudyUpdateWithoutFieldOfStudyInput, StudentOnFieldOfStudyUncheckedUpdateWithoutFieldOfStudyInput>
  }

  export type StudentOnFieldOfStudyUpdateManyWithWhereWithoutFieldOfStudyInput = {
    where: StudentOnFieldOfStudyScalarWhereInput
    data: XOR<StudentOnFieldOfStudyUpdateManyMutationInput, StudentOnFieldOfStudyUncheckedUpdateManyWithoutFieldOfStudyInput>
  }

  export type CourseUpsertWithWhereUniqueWithoutFieldOfStudyInput = {
    where: CourseWhereUniqueInput
    update: XOR<CourseUpdateWithoutFieldOfStudyInput, CourseUncheckedUpdateWithoutFieldOfStudyInput>
    create: XOR<CourseCreateWithoutFieldOfStudyInput, CourseUncheckedCreateWithoutFieldOfStudyInput>
  }

  export type CourseUpdateWithWhereUniqueWithoutFieldOfStudyInput = {
    where: CourseWhereUniqueInput
    data: XOR<CourseUpdateWithoutFieldOfStudyInput, CourseUncheckedUpdateWithoutFieldOfStudyInput>
  }

  export type CourseUpdateManyWithWhereWithoutFieldOfStudyInput = {
    where: CourseScalarWhereInput
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyWithoutFieldOfStudyInput>
  }

  export type CourseScalarWhereInput = {
    AND?: CourseScalarWhereInput | CourseScalarWhereInput[]
    OR?: CourseScalarWhereInput[]
    NOT?: CourseScalarWhereInput | CourseScalarWhereInput[]
    id?: IntFilter<"Course"> | number
    name?: StringFilter<"Course"> | string
    description?: StringFilter<"Course"> | string
    ects?: IntFilter<"Course"> | number
    hoursOfLecture?: FloatFilter<"Course"> | number
    hoursOfLabs?: FloatFilter<"Course"> | number
    numberOfExams?: IntFilter<"Course"> | number
    isAvailable?: BoolFilter<"Course"> | boolean
    fieldOfStudyId?: IntFilter<"Course"> | number
    studyLevelId?: IntFilter<"Course"> | number
  }

  export type FieldOfStudyCreateWithoutProfessorsInput = {
    name: string
    students?: StudentOnFieldOfStudyCreateNestedManyWithoutFieldOfStudyInput
    courses?: CourseCreateNestedManyWithoutFieldOfStudyInput
  }

  export type FieldOfStudyUncheckedCreateWithoutProfessorsInput = {
    id?: number
    name: string
    students?: StudentOnFieldOfStudyUncheckedCreateNestedManyWithoutFieldOfStudyInput
    courses?: CourseUncheckedCreateNestedManyWithoutFieldOfStudyInput
  }

  export type FieldOfStudyCreateOrConnectWithoutProfessorsInput = {
    where: FieldOfStudyWhereUniqueInput
    create: XOR<FieldOfStudyCreateWithoutProfessorsInput, FieldOfStudyUncheckedCreateWithoutProfessorsInput>
  }

  export type ProfessorCreateWithoutFieldsOfStudyInput = {
    user: UserCreateNestedOneWithoutProfessorInput
  }

  export type ProfessorUncheckedCreateWithoutFieldsOfStudyInput = {
    userId: number
  }

  export type ProfessorCreateOrConnectWithoutFieldsOfStudyInput = {
    where: ProfessorWhereUniqueInput
    create: XOR<ProfessorCreateWithoutFieldsOfStudyInput, ProfessorUncheckedCreateWithoutFieldsOfStudyInput>
  }

  export type FieldOfStudyUpsertWithoutProfessorsInput = {
    update: XOR<FieldOfStudyUpdateWithoutProfessorsInput, FieldOfStudyUncheckedUpdateWithoutProfessorsInput>
    create: XOR<FieldOfStudyCreateWithoutProfessorsInput, FieldOfStudyUncheckedCreateWithoutProfessorsInput>
    where?: FieldOfStudyWhereInput
  }

  export type FieldOfStudyUpdateToOneWithWhereWithoutProfessorsInput = {
    where?: FieldOfStudyWhereInput
    data: XOR<FieldOfStudyUpdateWithoutProfessorsInput, FieldOfStudyUncheckedUpdateWithoutProfessorsInput>
  }

  export type FieldOfStudyUpdateWithoutProfessorsInput = {
    name?: StringFieldUpdateOperationsInput | string
    students?: StudentOnFieldOfStudyUpdateManyWithoutFieldOfStudyNestedInput
    courses?: CourseUpdateManyWithoutFieldOfStudyNestedInput
  }

  export type FieldOfStudyUncheckedUpdateWithoutProfessorsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    students?: StudentOnFieldOfStudyUncheckedUpdateManyWithoutFieldOfStudyNestedInput
    courses?: CourseUncheckedUpdateManyWithoutFieldOfStudyNestedInput
  }

  export type ProfessorUpsertWithoutFieldsOfStudyInput = {
    update: XOR<ProfessorUpdateWithoutFieldsOfStudyInput, ProfessorUncheckedUpdateWithoutFieldsOfStudyInput>
    create: XOR<ProfessorCreateWithoutFieldsOfStudyInput, ProfessorUncheckedCreateWithoutFieldsOfStudyInput>
    where?: ProfessorWhereInput
  }

  export type ProfessorUpdateToOneWithWhereWithoutFieldsOfStudyInput = {
    where?: ProfessorWhereInput
    data: XOR<ProfessorUpdateWithoutFieldsOfStudyInput, ProfessorUncheckedUpdateWithoutFieldsOfStudyInput>
  }

  export type ProfessorUpdateWithoutFieldsOfStudyInput = {
    user?: UserUpdateOneRequiredWithoutProfessorNestedInput
  }

  export type ProfessorUncheckedUpdateWithoutFieldsOfStudyInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type StudentCreateWithoutFieldsOfStudyInput = {
    user: UserCreateNestedOneWithoutStudentInput
    country: CountryCreateNestedOneWithoutStudentsInput
    School: SchoolCreateNestedOneWithoutStudentsInput
    StudyLevel: StudyLevelCreateNestedOneWithoutStudentsInput
    courses?: StudentOnCourseCreateNestedManyWithoutStudentInput
    comments?: CommentCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutFieldsOfStudyInput = {
    userId: number
    countryId: number
    schoolId: number
    studyLevelId: number
    courses?: StudentOnCourseUncheckedCreateNestedManyWithoutStudentInput
    comments?: CommentUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutFieldsOfStudyInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutFieldsOfStudyInput, StudentUncheckedCreateWithoutFieldsOfStudyInput>
  }

  export type FieldOfStudyCreateWithoutStudentsInput = {
    name: string
    professors?: ProfessorOnFieldOfStudyCreateNestedManyWithoutFieldOfStudyInput
    courses?: CourseCreateNestedManyWithoutFieldOfStudyInput
  }

  export type FieldOfStudyUncheckedCreateWithoutStudentsInput = {
    id?: number
    name: string
    professors?: ProfessorOnFieldOfStudyUncheckedCreateNestedManyWithoutFieldOfStudyInput
    courses?: CourseUncheckedCreateNestedManyWithoutFieldOfStudyInput
  }

  export type FieldOfStudyCreateOrConnectWithoutStudentsInput = {
    where: FieldOfStudyWhereUniqueInput
    create: XOR<FieldOfStudyCreateWithoutStudentsInput, FieldOfStudyUncheckedCreateWithoutStudentsInput>
  }

  export type StudentUpsertWithoutFieldsOfStudyInput = {
    update: XOR<StudentUpdateWithoutFieldsOfStudyInput, StudentUncheckedUpdateWithoutFieldsOfStudyInput>
    create: XOR<StudentCreateWithoutFieldsOfStudyInput, StudentUncheckedCreateWithoutFieldsOfStudyInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutFieldsOfStudyInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutFieldsOfStudyInput, StudentUncheckedUpdateWithoutFieldsOfStudyInput>
  }

  export type StudentUpdateWithoutFieldsOfStudyInput = {
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
    country?: CountryUpdateOneRequiredWithoutStudentsNestedInput
    School?: SchoolUpdateOneRequiredWithoutStudentsNestedInput
    StudyLevel?: StudyLevelUpdateOneRequiredWithoutStudentsNestedInput
    courses?: StudentOnCourseUpdateManyWithoutStudentNestedInput
    comments?: CommentUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutFieldsOfStudyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    countryId?: IntFieldUpdateOperationsInput | number
    schoolId?: IntFieldUpdateOperationsInput | number
    studyLevelId?: IntFieldUpdateOperationsInput | number
    courses?: StudentOnCourseUncheckedUpdateManyWithoutStudentNestedInput
    comments?: CommentUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type FieldOfStudyUpsertWithoutStudentsInput = {
    update: XOR<FieldOfStudyUpdateWithoutStudentsInput, FieldOfStudyUncheckedUpdateWithoutStudentsInput>
    create: XOR<FieldOfStudyCreateWithoutStudentsInput, FieldOfStudyUncheckedCreateWithoutStudentsInput>
    where?: FieldOfStudyWhereInput
  }

  export type FieldOfStudyUpdateToOneWithWhereWithoutStudentsInput = {
    where?: FieldOfStudyWhereInput
    data: XOR<FieldOfStudyUpdateWithoutStudentsInput, FieldOfStudyUncheckedUpdateWithoutStudentsInput>
  }

  export type FieldOfStudyUpdateWithoutStudentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    professors?: ProfessorOnFieldOfStudyUpdateManyWithoutFieldOfStudyNestedInput
    courses?: CourseUpdateManyWithoutFieldOfStudyNestedInput
  }

  export type FieldOfStudyUncheckedUpdateWithoutStudentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    professors?: ProfessorOnFieldOfStudyUncheckedUpdateManyWithoutFieldOfStudyNestedInput
    courses?: CourseUncheckedUpdateManyWithoutFieldOfStudyNestedInput
  }

  export type FieldOfStudyCreateWithoutCoursesInput = {
    name: string
    professors?: ProfessorOnFieldOfStudyCreateNestedManyWithoutFieldOfStudyInput
    students?: StudentOnFieldOfStudyCreateNestedManyWithoutFieldOfStudyInput
  }

  export type FieldOfStudyUncheckedCreateWithoutCoursesInput = {
    id?: number
    name: string
    professors?: ProfessorOnFieldOfStudyUncheckedCreateNestedManyWithoutFieldOfStudyInput
    students?: StudentOnFieldOfStudyUncheckedCreateNestedManyWithoutFieldOfStudyInput
  }

  export type FieldOfStudyCreateOrConnectWithoutCoursesInput = {
    where: FieldOfStudyWhereUniqueInput
    create: XOR<FieldOfStudyCreateWithoutCoursesInput, FieldOfStudyUncheckedCreateWithoutCoursesInput>
  }

  export type StudyLevelCreateWithoutCoursesInput = {
    name: string
    students?: StudentCreateNestedManyWithoutStudyLevelInput
  }

  export type StudyLevelUncheckedCreateWithoutCoursesInput = {
    id?: number
    name: string
    students?: StudentUncheckedCreateNestedManyWithoutStudyLevelInput
  }

  export type StudyLevelCreateOrConnectWithoutCoursesInput = {
    where: StudyLevelWhereUniqueInput
    create: XOR<StudyLevelCreateWithoutCoursesInput, StudyLevelUncheckedCreateWithoutCoursesInput>
  }

  export type StudentOnCourseCreateWithoutCourseInput = {
    Student: StudentCreateNestedOneWithoutCoursesInput
    Rate?: RateCreateNestedOneWithoutStudentOnCourseInput
  }

  export type StudentOnCourseUncheckedCreateWithoutCourseInput = {
    studentUserId: number
    Rate?: RateUncheckedCreateNestedOneWithoutStudentOnCourseInput
  }

  export type StudentOnCourseCreateOrConnectWithoutCourseInput = {
    where: StudentOnCourseWhereUniqueInput
    create: XOR<StudentOnCourseCreateWithoutCourseInput, StudentOnCourseUncheckedCreateWithoutCourseInput>
  }

  export type StudentOnCourseCreateManyCourseInputEnvelope = {
    data: StudentOnCourseCreateManyCourseInput | StudentOnCourseCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutCourseInput = {
    content: string
    date: Date | string
    Student: StudentCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutCourseInput = {
    id?: number
    content: string
    date: Date | string
    studentUserId: number
  }

  export type CommentCreateOrConnectWithoutCourseInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutCourseInput, CommentUncheckedCreateWithoutCourseInput>
  }

  export type CommentCreateManyCourseInputEnvelope = {
    data: CommentCreateManyCourseInput | CommentCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type FieldOfStudyUpsertWithoutCoursesInput = {
    update: XOR<FieldOfStudyUpdateWithoutCoursesInput, FieldOfStudyUncheckedUpdateWithoutCoursesInput>
    create: XOR<FieldOfStudyCreateWithoutCoursesInput, FieldOfStudyUncheckedCreateWithoutCoursesInput>
    where?: FieldOfStudyWhereInput
  }

  export type FieldOfStudyUpdateToOneWithWhereWithoutCoursesInput = {
    where?: FieldOfStudyWhereInput
    data: XOR<FieldOfStudyUpdateWithoutCoursesInput, FieldOfStudyUncheckedUpdateWithoutCoursesInput>
  }

  export type FieldOfStudyUpdateWithoutCoursesInput = {
    name?: StringFieldUpdateOperationsInput | string
    professors?: ProfessorOnFieldOfStudyUpdateManyWithoutFieldOfStudyNestedInput
    students?: StudentOnFieldOfStudyUpdateManyWithoutFieldOfStudyNestedInput
  }

  export type FieldOfStudyUncheckedUpdateWithoutCoursesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    professors?: ProfessorOnFieldOfStudyUncheckedUpdateManyWithoutFieldOfStudyNestedInput
    students?: StudentOnFieldOfStudyUncheckedUpdateManyWithoutFieldOfStudyNestedInput
  }

  export type StudyLevelUpsertWithoutCoursesInput = {
    update: XOR<StudyLevelUpdateWithoutCoursesInput, StudyLevelUncheckedUpdateWithoutCoursesInput>
    create: XOR<StudyLevelCreateWithoutCoursesInput, StudyLevelUncheckedCreateWithoutCoursesInput>
    where?: StudyLevelWhereInput
  }

  export type StudyLevelUpdateToOneWithWhereWithoutCoursesInput = {
    where?: StudyLevelWhereInput
    data: XOR<StudyLevelUpdateWithoutCoursesInput, StudyLevelUncheckedUpdateWithoutCoursesInput>
  }

  export type StudyLevelUpdateWithoutCoursesInput = {
    name?: StringFieldUpdateOperationsInput | string
    students?: StudentUpdateManyWithoutStudyLevelNestedInput
  }

  export type StudyLevelUncheckedUpdateWithoutCoursesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    students?: StudentUncheckedUpdateManyWithoutStudyLevelNestedInput
  }

  export type StudentOnCourseUpsertWithWhereUniqueWithoutCourseInput = {
    where: StudentOnCourseWhereUniqueInput
    update: XOR<StudentOnCourseUpdateWithoutCourseInput, StudentOnCourseUncheckedUpdateWithoutCourseInput>
    create: XOR<StudentOnCourseCreateWithoutCourseInput, StudentOnCourseUncheckedCreateWithoutCourseInput>
  }

  export type StudentOnCourseUpdateWithWhereUniqueWithoutCourseInput = {
    where: StudentOnCourseWhereUniqueInput
    data: XOR<StudentOnCourseUpdateWithoutCourseInput, StudentOnCourseUncheckedUpdateWithoutCourseInput>
  }

  export type StudentOnCourseUpdateManyWithWhereWithoutCourseInput = {
    where: StudentOnCourseScalarWhereInput
    data: XOR<StudentOnCourseUpdateManyMutationInput, StudentOnCourseUncheckedUpdateManyWithoutCourseInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutCourseInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutCourseInput, CommentUncheckedUpdateWithoutCourseInput>
    create: XOR<CommentCreateWithoutCourseInput, CommentUncheckedCreateWithoutCourseInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutCourseInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutCourseInput, CommentUncheckedUpdateWithoutCourseInput>
  }

  export type CommentUpdateManyWithWhereWithoutCourseInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutCourseInput>
  }

  export type StudentCreateWithoutCoursesInput = {
    user: UserCreateNestedOneWithoutStudentInput
    country: CountryCreateNestedOneWithoutStudentsInput
    School: SchoolCreateNestedOneWithoutStudentsInput
    StudyLevel: StudyLevelCreateNestedOneWithoutStudentsInput
    fieldsOfStudy?: StudentOnFieldOfStudyCreateNestedManyWithoutStudentInput
    comments?: CommentCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutCoursesInput = {
    userId: number
    countryId: number
    schoolId: number
    studyLevelId: number
    fieldsOfStudy?: StudentOnFieldOfStudyUncheckedCreateNestedManyWithoutStudentInput
    comments?: CommentUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutCoursesInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutCoursesInput, StudentUncheckedCreateWithoutCoursesInput>
  }

  export type CourseCreateWithoutStudentsInput = {
    name: string
    description: string
    ects: number
    hoursOfLecture: number
    hoursOfLabs: number
    numberOfExams: number
    isAvailable?: boolean
    FieldOfStudy: FieldOfStudyCreateNestedOneWithoutCoursesInput
    StudyLevel: StudyLevelCreateNestedOneWithoutCoursesInput
    Comments?: CommentCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutStudentsInput = {
    id?: number
    name: string
    description: string
    ects: number
    hoursOfLecture: number
    hoursOfLabs: number
    numberOfExams: number
    isAvailable?: boolean
    fieldOfStudyId: number
    studyLevelId: number
    Comments?: CommentUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutStudentsInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutStudentsInput, CourseUncheckedCreateWithoutStudentsInput>
  }

  export type RateCreateWithoutStudentOnCourseInput = {
    rate: number
  }

  export type RateUncheckedCreateWithoutStudentOnCourseInput = {
    rate: number
  }

  export type RateCreateOrConnectWithoutStudentOnCourseInput = {
    where: RateWhereUniqueInput
    create: XOR<RateCreateWithoutStudentOnCourseInput, RateUncheckedCreateWithoutStudentOnCourseInput>
  }

  export type StudentUpsertWithoutCoursesInput = {
    update: XOR<StudentUpdateWithoutCoursesInput, StudentUncheckedUpdateWithoutCoursesInput>
    create: XOR<StudentCreateWithoutCoursesInput, StudentUncheckedCreateWithoutCoursesInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutCoursesInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutCoursesInput, StudentUncheckedUpdateWithoutCoursesInput>
  }

  export type StudentUpdateWithoutCoursesInput = {
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
    country?: CountryUpdateOneRequiredWithoutStudentsNestedInput
    School?: SchoolUpdateOneRequiredWithoutStudentsNestedInput
    StudyLevel?: StudyLevelUpdateOneRequiredWithoutStudentsNestedInput
    fieldsOfStudy?: StudentOnFieldOfStudyUpdateManyWithoutStudentNestedInput
    comments?: CommentUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutCoursesInput = {
    userId?: IntFieldUpdateOperationsInput | number
    countryId?: IntFieldUpdateOperationsInput | number
    schoolId?: IntFieldUpdateOperationsInput | number
    studyLevelId?: IntFieldUpdateOperationsInput | number
    fieldsOfStudy?: StudentOnFieldOfStudyUncheckedUpdateManyWithoutStudentNestedInput
    comments?: CommentUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type CourseUpsertWithoutStudentsInput = {
    update: XOR<CourseUpdateWithoutStudentsInput, CourseUncheckedUpdateWithoutStudentsInput>
    create: XOR<CourseCreateWithoutStudentsInput, CourseUncheckedCreateWithoutStudentsInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutStudentsInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutStudentsInput, CourseUncheckedUpdateWithoutStudentsInput>
  }

  export type CourseUpdateWithoutStudentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ects?: IntFieldUpdateOperationsInput | number
    hoursOfLecture?: FloatFieldUpdateOperationsInput | number
    hoursOfLabs?: FloatFieldUpdateOperationsInput | number
    numberOfExams?: IntFieldUpdateOperationsInput | number
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    FieldOfStudy?: FieldOfStudyUpdateOneRequiredWithoutCoursesNestedInput
    StudyLevel?: StudyLevelUpdateOneRequiredWithoutCoursesNestedInput
    Comments?: CommentUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutStudentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ects?: IntFieldUpdateOperationsInput | number
    hoursOfLecture?: FloatFieldUpdateOperationsInput | number
    hoursOfLabs?: FloatFieldUpdateOperationsInput | number
    numberOfExams?: IntFieldUpdateOperationsInput | number
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    fieldOfStudyId?: IntFieldUpdateOperationsInput | number
    studyLevelId?: IntFieldUpdateOperationsInput | number
    Comments?: CommentUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type RateUpsertWithoutStudentOnCourseInput = {
    update: XOR<RateUpdateWithoutStudentOnCourseInput, RateUncheckedUpdateWithoutStudentOnCourseInput>
    create: XOR<RateCreateWithoutStudentOnCourseInput, RateUncheckedCreateWithoutStudentOnCourseInput>
    where?: RateWhereInput
  }

  export type RateUpdateToOneWithWhereWithoutStudentOnCourseInput = {
    where?: RateWhereInput
    data: XOR<RateUpdateWithoutStudentOnCourseInput, RateUncheckedUpdateWithoutStudentOnCourseInput>
  }

  export type RateUpdateWithoutStudentOnCourseInput = {
    rate?: IntFieldUpdateOperationsInput | number
  }

  export type RateUncheckedUpdateWithoutStudentOnCourseInput = {
    rate?: IntFieldUpdateOperationsInput | number
  }

  export type StudentCreateWithoutCommentsInput = {
    user: UserCreateNestedOneWithoutStudentInput
    country: CountryCreateNestedOneWithoutStudentsInput
    School: SchoolCreateNestedOneWithoutStudentsInput
    StudyLevel: StudyLevelCreateNestedOneWithoutStudentsInput
    fieldsOfStudy?: StudentOnFieldOfStudyCreateNestedManyWithoutStudentInput
    courses?: StudentOnCourseCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutCommentsInput = {
    userId: number
    countryId: number
    schoolId: number
    studyLevelId: number
    fieldsOfStudy?: StudentOnFieldOfStudyUncheckedCreateNestedManyWithoutStudentInput
    courses?: StudentOnCourseUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutCommentsInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutCommentsInput, StudentUncheckedCreateWithoutCommentsInput>
  }

  export type CourseCreateWithoutCommentsInput = {
    name: string
    description: string
    ects: number
    hoursOfLecture: number
    hoursOfLabs: number
    numberOfExams: number
    isAvailable?: boolean
    FieldOfStudy: FieldOfStudyCreateNestedOneWithoutCoursesInput
    StudyLevel: StudyLevelCreateNestedOneWithoutCoursesInput
    Students?: StudentOnCourseCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutCommentsInput = {
    id?: number
    name: string
    description: string
    ects: number
    hoursOfLecture: number
    hoursOfLabs: number
    numberOfExams: number
    isAvailable?: boolean
    fieldOfStudyId: number
    studyLevelId: number
    Students?: StudentOnCourseUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutCommentsInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutCommentsInput, CourseUncheckedCreateWithoutCommentsInput>
  }

  export type StudentUpsertWithoutCommentsInput = {
    update: XOR<StudentUpdateWithoutCommentsInput, StudentUncheckedUpdateWithoutCommentsInput>
    create: XOR<StudentCreateWithoutCommentsInput, StudentUncheckedCreateWithoutCommentsInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutCommentsInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutCommentsInput, StudentUncheckedUpdateWithoutCommentsInput>
  }

  export type StudentUpdateWithoutCommentsInput = {
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
    country?: CountryUpdateOneRequiredWithoutStudentsNestedInput
    School?: SchoolUpdateOneRequiredWithoutStudentsNestedInput
    StudyLevel?: StudyLevelUpdateOneRequiredWithoutStudentsNestedInput
    fieldsOfStudy?: StudentOnFieldOfStudyUpdateManyWithoutStudentNestedInput
    courses?: StudentOnCourseUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutCommentsInput = {
    userId?: IntFieldUpdateOperationsInput | number
    countryId?: IntFieldUpdateOperationsInput | number
    schoolId?: IntFieldUpdateOperationsInput | number
    studyLevelId?: IntFieldUpdateOperationsInput | number
    fieldsOfStudy?: StudentOnFieldOfStudyUncheckedUpdateManyWithoutStudentNestedInput
    courses?: StudentOnCourseUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type CourseUpsertWithoutCommentsInput = {
    update: XOR<CourseUpdateWithoutCommentsInput, CourseUncheckedUpdateWithoutCommentsInput>
    create: XOR<CourseCreateWithoutCommentsInput, CourseUncheckedCreateWithoutCommentsInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutCommentsInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutCommentsInput, CourseUncheckedUpdateWithoutCommentsInput>
  }

  export type CourseUpdateWithoutCommentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ects?: IntFieldUpdateOperationsInput | number
    hoursOfLecture?: FloatFieldUpdateOperationsInput | number
    hoursOfLabs?: FloatFieldUpdateOperationsInput | number
    numberOfExams?: IntFieldUpdateOperationsInput | number
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    FieldOfStudy?: FieldOfStudyUpdateOneRequiredWithoutCoursesNestedInput
    StudyLevel?: StudyLevelUpdateOneRequiredWithoutCoursesNestedInput
    Students?: StudentOnCourseUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ects?: IntFieldUpdateOperationsInput | number
    hoursOfLecture?: FloatFieldUpdateOperationsInput | number
    hoursOfLabs?: FloatFieldUpdateOperationsInput | number
    numberOfExams?: IntFieldUpdateOperationsInput | number
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    fieldOfStudyId?: IntFieldUpdateOperationsInput | number
    studyLevelId?: IntFieldUpdateOperationsInput | number
    Students?: StudentOnCourseUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type StudentOnCourseCreateWithoutRateInput = {
    Student: StudentCreateNestedOneWithoutCoursesInput
    Course: CourseCreateNestedOneWithoutStudentsInput
  }

  export type StudentOnCourseUncheckedCreateWithoutRateInput = {
    studentUserId: number
    courseId: number
  }

  export type StudentOnCourseCreateOrConnectWithoutRateInput = {
    where: StudentOnCourseWhereUniqueInput
    create: XOR<StudentOnCourseCreateWithoutRateInput, StudentOnCourseUncheckedCreateWithoutRateInput>
  }

  export type StudentOnCourseUpsertWithoutRateInput = {
    update: XOR<StudentOnCourseUpdateWithoutRateInput, StudentOnCourseUncheckedUpdateWithoutRateInput>
    create: XOR<StudentOnCourseCreateWithoutRateInput, StudentOnCourseUncheckedCreateWithoutRateInput>
    where?: StudentOnCourseWhereInput
  }

  export type StudentOnCourseUpdateToOneWithWhereWithoutRateInput = {
    where?: StudentOnCourseWhereInput
    data: XOR<StudentOnCourseUpdateWithoutRateInput, StudentOnCourseUncheckedUpdateWithoutRateInput>
  }

  export type StudentOnCourseUpdateWithoutRateInput = {
    Student?: StudentUpdateOneRequiredWithoutCoursesNestedInput
    Course?: CourseUpdateOneRequiredWithoutStudentsNestedInput
  }

  export type StudentOnCourseUncheckedUpdateWithoutRateInput = {
    studentUserId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
  }

  export type StudentCreateWithoutStudyLevelInput = {
    user: UserCreateNestedOneWithoutStudentInput
    country: CountryCreateNestedOneWithoutStudentsInput
    School: SchoolCreateNestedOneWithoutStudentsInput
    fieldsOfStudy?: StudentOnFieldOfStudyCreateNestedManyWithoutStudentInput
    courses?: StudentOnCourseCreateNestedManyWithoutStudentInput
    comments?: CommentCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutStudyLevelInput = {
    userId: number
    countryId: number
    schoolId: number
    fieldsOfStudy?: StudentOnFieldOfStudyUncheckedCreateNestedManyWithoutStudentInput
    courses?: StudentOnCourseUncheckedCreateNestedManyWithoutStudentInput
    comments?: CommentUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutStudyLevelInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutStudyLevelInput, StudentUncheckedCreateWithoutStudyLevelInput>
  }

  export type StudentCreateManyStudyLevelInputEnvelope = {
    data: StudentCreateManyStudyLevelInput | StudentCreateManyStudyLevelInput[]
    skipDuplicates?: boolean
  }

  export type CourseCreateWithoutStudyLevelInput = {
    name: string
    description: string
    ects: number
    hoursOfLecture: number
    hoursOfLabs: number
    numberOfExams: number
    isAvailable?: boolean
    FieldOfStudy: FieldOfStudyCreateNestedOneWithoutCoursesInput
    Students?: StudentOnCourseCreateNestedManyWithoutCourseInput
    Comments?: CommentCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutStudyLevelInput = {
    id?: number
    name: string
    description: string
    ects: number
    hoursOfLecture: number
    hoursOfLabs: number
    numberOfExams: number
    isAvailable?: boolean
    fieldOfStudyId: number
    Students?: StudentOnCourseUncheckedCreateNestedManyWithoutCourseInput
    Comments?: CommentUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutStudyLevelInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutStudyLevelInput, CourseUncheckedCreateWithoutStudyLevelInput>
  }

  export type CourseCreateManyStudyLevelInputEnvelope = {
    data: CourseCreateManyStudyLevelInput | CourseCreateManyStudyLevelInput[]
    skipDuplicates?: boolean
  }

  export type StudentUpsertWithWhereUniqueWithoutStudyLevelInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutStudyLevelInput, StudentUncheckedUpdateWithoutStudyLevelInput>
    create: XOR<StudentCreateWithoutStudyLevelInput, StudentUncheckedCreateWithoutStudyLevelInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutStudyLevelInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutStudyLevelInput, StudentUncheckedUpdateWithoutStudyLevelInput>
  }

  export type StudentUpdateManyWithWhereWithoutStudyLevelInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutStudyLevelInput>
  }

  export type CourseUpsertWithWhereUniqueWithoutStudyLevelInput = {
    where: CourseWhereUniqueInput
    update: XOR<CourseUpdateWithoutStudyLevelInput, CourseUncheckedUpdateWithoutStudyLevelInput>
    create: XOR<CourseCreateWithoutStudyLevelInput, CourseUncheckedCreateWithoutStudyLevelInput>
  }

  export type CourseUpdateWithWhereUniqueWithoutStudyLevelInput = {
    where: CourseWhereUniqueInput
    data: XOR<CourseUpdateWithoutStudyLevelInput, CourseUncheckedUpdateWithoutStudyLevelInput>
  }

  export type CourseUpdateManyWithWhereWithoutStudyLevelInput = {
    where: CourseScalarWhereInput
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyWithoutStudyLevelInput>
  }

  export type ProfessorOnFieldOfStudyCreateManyProfessorInput = {
    fieldOfStudyId: number
  }

  export type ProfessorOnFieldOfStudyUpdateWithoutProfessorInput = {
    FieldOfStudy?: FieldOfStudyUpdateOneRequiredWithoutProfessorsNestedInput
  }

  export type ProfessorOnFieldOfStudyUncheckedUpdateWithoutProfessorInput = {
    fieldOfStudyId?: IntFieldUpdateOperationsInput | number
  }

  export type ProfessorOnFieldOfStudyUncheckedUpdateManyWithoutProfessorInput = {
    fieldOfStudyId?: IntFieldUpdateOperationsInput | number
  }

  export type StudentOnFieldOfStudyCreateManyStudentInput = {
    fieldOfStudyId: number
  }

  export type StudentOnCourseCreateManyStudentInput = {
    courseId: number
  }

  export type CommentCreateManyStudentInput = {
    id?: number
    content: string
    date: Date | string
    courseId: number
  }

  export type StudentOnFieldOfStudyUpdateWithoutStudentInput = {
    FieldOfStudy?: FieldOfStudyUpdateOneRequiredWithoutStudentsNestedInput
  }

  export type StudentOnFieldOfStudyUncheckedUpdateWithoutStudentInput = {
    fieldOfStudyId?: IntFieldUpdateOperationsInput | number
  }

  export type StudentOnFieldOfStudyUncheckedUpdateManyWithoutStudentInput = {
    fieldOfStudyId?: IntFieldUpdateOperationsInput | number
  }

  export type StudentOnCourseUpdateWithoutStudentInput = {
    Course?: CourseUpdateOneRequiredWithoutStudentsNestedInput
    Rate?: RateUpdateOneWithoutStudentOnCourseNestedInput
  }

  export type StudentOnCourseUncheckedUpdateWithoutStudentInput = {
    courseId?: IntFieldUpdateOperationsInput | number
    Rate?: RateUncheckedUpdateOneWithoutStudentOnCourseNestedInput
  }

  export type StudentOnCourseUncheckedUpdateManyWithoutStudentInput = {
    courseId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUpdateWithoutStudentInput = {
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    Course?: CourseUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    courseId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    courseId?: IntFieldUpdateOperationsInput | number
  }

  export type StudentCreateManyCountryInput = {
    userId: number
    schoolId: number
    studyLevelId: number
  }

  export type UniversityCreateManyCountryInput = {
    id?: number
    name: string
  }

  export type StudentUpdateWithoutCountryInput = {
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
    School?: SchoolUpdateOneRequiredWithoutStudentsNestedInput
    StudyLevel?: StudyLevelUpdateOneRequiredWithoutStudentsNestedInput
    fieldsOfStudy?: StudentOnFieldOfStudyUpdateManyWithoutStudentNestedInput
    courses?: StudentOnCourseUpdateManyWithoutStudentNestedInput
    comments?: CommentUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutCountryInput = {
    userId?: IntFieldUpdateOperationsInput | number
    schoolId?: IntFieldUpdateOperationsInput | number
    studyLevelId?: IntFieldUpdateOperationsInput | number
    fieldsOfStudy?: StudentOnFieldOfStudyUncheckedUpdateManyWithoutStudentNestedInput
    courses?: StudentOnCourseUncheckedUpdateManyWithoutStudentNestedInput
    comments?: CommentUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateManyWithoutCountryInput = {
    userId?: IntFieldUpdateOperationsInput | number
    schoolId?: IntFieldUpdateOperationsInput | number
    studyLevelId?: IntFieldUpdateOperationsInput | number
  }

  export type UniversityUpdateWithoutCountryInput = {
    name?: StringFieldUpdateOperationsInput | string
    schools?: SchoolUpdateManyWithoutUniversityNestedInput
  }

  export type UniversityUncheckedUpdateWithoutCountryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    schools?: SchoolUncheckedUpdateManyWithoutUniversityNestedInput
  }

  export type UniversityUncheckedUpdateManyWithoutCountryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SchoolCreateManyUniversityInput = {
    id?: number
    name: string
  }

  export type SchoolUpdateWithoutUniversityInput = {
    name?: StringFieldUpdateOperationsInput | string
    students?: StudentUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutUniversityInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    students?: StudentUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateManyWithoutUniversityInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type StudentCreateManySchoolInput = {
    userId: number
    countryId: number
    studyLevelId: number
  }

  export type StudentUpdateWithoutSchoolInput = {
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
    country?: CountryUpdateOneRequiredWithoutStudentsNestedInput
    StudyLevel?: StudyLevelUpdateOneRequiredWithoutStudentsNestedInput
    fieldsOfStudy?: StudentOnFieldOfStudyUpdateManyWithoutStudentNestedInput
    courses?: StudentOnCourseUpdateManyWithoutStudentNestedInput
    comments?: CommentUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutSchoolInput = {
    userId?: IntFieldUpdateOperationsInput | number
    countryId?: IntFieldUpdateOperationsInput | number
    studyLevelId?: IntFieldUpdateOperationsInput | number
    fieldsOfStudy?: StudentOnFieldOfStudyUncheckedUpdateManyWithoutStudentNestedInput
    courses?: StudentOnCourseUncheckedUpdateManyWithoutStudentNestedInput
    comments?: CommentUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateManyWithoutSchoolInput = {
    userId?: IntFieldUpdateOperationsInput | number
    countryId?: IntFieldUpdateOperationsInput | number
    studyLevelId?: IntFieldUpdateOperationsInput | number
  }

  export type ProfessorOnFieldOfStudyCreateManyFieldOfStudyInput = {
    professorUserId: number
  }

  export type StudentOnFieldOfStudyCreateManyFieldOfStudyInput = {
    studentUserId: number
  }

  export type CourseCreateManyFieldOfStudyInput = {
    id?: number
    name: string
    description: string
    ects: number
    hoursOfLecture: number
    hoursOfLabs: number
    numberOfExams: number
    isAvailable?: boolean
    studyLevelId: number
  }

  export type ProfessorOnFieldOfStudyUpdateWithoutFieldOfStudyInput = {
    Professor?: ProfessorUpdateOneRequiredWithoutFieldsOfStudyNestedInput
  }

  export type ProfessorOnFieldOfStudyUncheckedUpdateWithoutFieldOfStudyInput = {
    professorUserId?: IntFieldUpdateOperationsInput | number
  }

  export type ProfessorOnFieldOfStudyUncheckedUpdateManyWithoutFieldOfStudyInput = {
    professorUserId?: IntFieldUpdateOperationsInput | number
  }

  export type StudentOnFieldOfStudyUpdateWithoutFieldOfStudyInput = {
    Student?: StudentUpdateOneRequiredWithoutFieldsOfStudyNestedInput
  }

  export type StudentOnFieldOfStudyUncheckedUpdateWithoutFieldOfStudyInput = {
    studentUserId?: IntFieldUpdateOperationsInput | number
  }

  export type StudentOnFieldOfStudyUncheckedUpdateManyWithoutFieldOfStudyInput = {
    studentUserId?: IntFieldUpdateOperationsInput | number
  }

  export type CourseUpdateWithoutFieldOfStudyInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ects?: IntFieldUpdateOperationsInput | number
    hoursOfLecture?: FloatFieldUpdateOperationsInput | number
    hoursOfLabs?: FloatFieldUpdateOperationsInput | number
    numberOfExams?: IntFieldUpdateOperationsInput | number
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    StudyLevel?: StudyLevelUpdateOneRequiredWithoutCoursesNestedInput
    Students?: StudentOnCourseUpdateManyWithoutCourseNestedInput
    Comments?: CommentUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutFieldOfStudyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ects?: IntFieldUpdateOperationsInput | number
    hoursOfLecture?: FloatFieldUpdateOperationsInput | number
    hoursOfLabs?: FloatFieldUpdateOperationsInput | number
    numberOfExams?: IntFieldUpdateOperationsInput | number
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    studyLevelId?: IntFieldUpdateOperationsInput | number
    Students?: StudentOnCourseUncheckedUpdateManyWithoutCourseNestedInput
    Comments?: CommentUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateManyWithoutFieldOfStudyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ects?: IntFieldUpdateOperationsInput | number
    hoursOfLecture?: FloatFieldUpdateOperationsInput | number
    hoursOfLabs?: FloatFieldUpdateOperationsInput | number
    numberOfExams?: IntFieldUpdateOperationsInput | number
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    studyLevelId?: IntFieldUpdateOperationsInput | number
  }

  export type StudentOnCourseCreateManyCourseInput = {
    studentUserId: number
  }

  export type CommentCreateManyCourseInput = {
    id?: number
    content: string
    date: Date | string
    studentUserId: number
  }

  export type StudentOnCourseUpdateWithoutCourseInput = {
    Student?: StudentUpdateOneRequiredWithoutCoursesNestedInput
    Rate?: RateUpdateOneWithoutStudentOnCourseNestedInput
  }

  export type StudentOnCourseUncheckedUpdateWithoutCourseInput = {
    studentUserId?: IntFieldUpdateOperationsInput | number
    Rate?: RateUncheckedUpdateOneWithoutStudentOnCourseNestedInput
  }

  export type StudentOnCourseUncheckedUpdateManyWithoutCourseInput = {
    studentUserId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUpdateWithoutCourseInput = {
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    Student?: StudentUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    studentUserId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUncheckedUpdateManyWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    studentUserId?: IntFieldUpdateOperationsInput | number
  }

  export type StudentCreateManyStudyLevelInput = {
    userId: number
    countryId: number
    schoolId: number
  }

  export type CourseCreateManyStudyLevelInput = {
    id?: number
    name: string
    description: string
    ects: number
    hoursOfLecture: number
    hoursOfLabs: number
    numberOfExams: number
    isAvailable?: boolean
    fieldOfStudyId: number
  }

  export type StudentUpdateWithoutStudyLevelInput = {
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
    country?: CountryUpdateOneRequiredWithoutStudentsNestedInput
    School?: SchoolUpdateOneRequiredWithoutStudentsNestedInput
    fieldsOfStudy?: StudentOnFieldOfStudyUpdateManyWithoutStudentNestedInput
    courses?: StudentOnCourseUpdateManyWithoutStudentNestedInput
    comments?: CommentUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutStudyLevelInput = {
    userId?: IntFieldUpdateOperationsInput | number
    countryId?: IntFieldUpdateOperationsInput | number
    schoolId?: IntFieldUpdateOperationsInput | number
    fieldsOfStudy?: StudentOnFieldOfStudyUncheckedUpdateManyWithoutStudentNestedInput
    courses?: StudentOnCourseUncheckedUpdateManyWithoutStudentNestedInput
    comments?: CommentUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateManyWithoutStudyLevelInput = {
    userId?: IntFieldUpdateOperationsInput | number
    countryId?: IntFieldUpdateOperationsInput | number
    schoolId?: IntFieldUpdateOperationsInput | number
  }

  export type CourseUpdateWithoutStudyLevelInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ects?: IntFieldUpdateOperationsInput | number
    hoursOfLecture?: FloatFieldUpdateOperationsInput | number
    hoursOfLabs?: FloatFieldUpdateOperationsInput | number
    numberOfExams?: IntFieldUpdateOperationsInput | number
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    FieldOfStudy?: FieldOfStudyUpdateOneRequiredWithoutCoursesNestedInput
    Students?: StudentOnCourseUpdateManyWithoutCourseNestedInput
    Comments?: CommentUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutStudyLevelInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ects?: IntFieldUpdateOperationsInput | number
    hoursOfLecture?: FloatFieldUpdateOperationsInput | number
    hoursOfLabs?: FloatFieldUpdateOperationsInput | number
    numberOfExams?: IntFieldUpdateOperationsInput | number
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    fieldOfStudyId?: IntFieldUpdateOperationsInput | number
    Students?: StudentOnCourseUncheckedUpdateManyWithoutCourseNestedInput
    Comments?: CommentUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateManyWithoutStudyLevelInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ects?: IntFieldUpdateOperationsInput | number
    hoursOfLecture?: FloatFieldUpdateOperationsInput | number
    hoursOfLabs?: FloatFieldUpdateOperationsInput | number
    numberOfExams?: IntFieldUpdateOperationsInput | number
    isAvailable?: BoolFieldUpdateOperationsInput | boolean
    fieldOfStudyId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ProfessorCountOutputTypeDefaultArgs instead
     */
    export type ProfessorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProfessorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StudentCountOutputTypeDefaultArgs instead
     */
    export type StudentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CountryCountOutputTypeDefaultArgs instead
     */
    export type CountryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CountryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UniversityCountOutputTypeDefaultArgs instead
     */
    export type UniversityCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UniversityCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SchoolCountOutputTypeDefaultArgs instead
     */
    export type SchoolCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SchoolCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FieldOfStudyCountOutputTypeDefaultArgs instead
     */
    export type FieldOfStudyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FieldOfStudyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CourseCountOutputTypeDefaultArgs instead
     */
    export type CourseCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CourseCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StudyLevelCountOutputTypeDefaultArgs instead
     */
    export type StudyLevelCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudyLevelCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AdminDefaultArgs instead
     */
    export type AdminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdminDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProfessorDefaultArgs instead
     */
    export type ProfessorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProfessorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StudentDefaultArgs instead
     */
    export type StudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CountryDefaultArgs instead
     */
    export type CountryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CountryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UniversityDefaultArgs instead
     */
    export type UniversityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UniversityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SchoolDefaultArgs instead
     */
    export type SchoolArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SchoolDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FieldOfStudyDefaultArgs instead
     */
    export type FieldOfStudyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FieldOfStudyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProfessorOnFieldOfStudyDefaultArgs instead
     */
    export type ProfessorOnFieldOfStudyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProfessorOnFieldOfStudyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StudentOnFieldOfStudyDefaultArgs instead
     */
    export type StudentOnFieldOfStudyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudentOnFieldOfStudyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CourseDefaultArgs instead
     */
    export type CourseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CourseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StudentOnCourseDefaultArgs instead
     */
    export type StudentOnCourseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudentOnCourseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommentDefaultArgs instead
     */
    export type CommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RateDefaultArgs instead
     */
    export type RateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RateDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StudyLevelDefaultArgs instead
     */
    export type StudyLevelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudyLevelDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}